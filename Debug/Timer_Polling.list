
Timer_Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006568  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006838  08006838  00007838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080068a8  080068a8  000078a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080068b0  080068b0  000078b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080068b4  080068b4  000078b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  24000000  080068b8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000264  2400007c  08006934  0000807c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002e0  08006934  000082e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013c71  00000000  00000000  000080aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000229c  00000000  00000000  0001bd1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ff8  00000000  00000000  0001dfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c84  00000000  00000000  0001efb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032d7b  00000000  00000000  0001fc34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014a3b  00000000  00000000  000529af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014d158  00000000  00000000  000673ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b4542  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004948  00000000  00000000  001b4588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001b8ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08006820 	.word	0x08006820

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000080 	.word	0x24000080
 800030c:	08006820 	.word	0x08006820

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <Timer_set_cnt>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Timer_set_cnt(uint32_t delay)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	Timer_Frequency_Cofig(delay);
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 f817 	bl	80006dc <Timer_Frequency_Cofig>
	HAL_TIM_Base_Start(&htim4);
 80006ae:	4808      	ldr	r0, [pc, #32]	@ (80006d0 <Timer_set_cnt+0x30>)
 80006b0:	f003 fe10 	bl	80042d4 <HAL_TIM_Base_Start>
	start_tick = HAL_GetTick();
 80006b4:	f000 fd2a 	bl	800110c <HAL_GetTick>
 80006b8:	4603      	mov	r3, r0
 80006ba:	4a06      	ldr	r2, [pc, #24]	@ (80006d4 <Timer_set_cnt+0x34>)
 80006bc:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2101      	movs	r1, #1
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <Timer_set_cnt+0x38>)
 80006c4:	f001 f832 	bl	800172c <HAL_GPIO_WritePin>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	240000b0 	.word	0x240000b0
 80006d4:	2400009c 	.word	0x2400009c
 80006d8:	58020400 	.word	0x58020400

080006dc <Timer_Frequency_Cofig>:

void Timer_Frequency_Cofig(uint32_t timer)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]

	uint32_t desired_freq = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
	uint32_t timer_freq = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
	uint32_t sysclk = HAL_RCC_GetSysClockFreq();
 80006ec:	f001 fe02 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 80006f0:	60f8      	str	r0, [r7, #12]

//	HAL_UART_Transmit(&huart7, timer_millis, snprintf(timer_millis, sizeof(timer_millis),"%d ", HAL_RCC_GetSysClockFreq()), 100);

	timer_overflow = timer/1000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a19      	ldr	r2, [pc, #100]	@ (800075c <Timer_Frequency_Cofig+0x80>)
 80006f6:	fba2 2303 	umull	r2, r3, r2, r3
 80006fa:	099b      	lsrs	r3, r3, #6
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <Timer_Frequency_Cofig+0x84>)
 8000700:	601a      	str	r2, [r3, #0]

	if(timer_overflow < 1)
 8000702:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <Timer_Frequency_Cofig+0x84>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	dc19      	bgt.n	800073e <Timer_Frequency_Cofig+0x62>
	{
//		if(timer > 500)
//		{
//			prescaler = 399;
//		}
		timer_overflow = 1;
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <Timer_Frequency_Cofig+0x84>)
 800070c:	2201      	movs	r2, #1
 800070e:	601a      	str	r2, [r3, #0]

		desired_freq = (1000/timer);
 8000710:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	fbb2 f3f3 	udiv	r3, r2, r3
 800071a:	617b      	str	r3, [r7, #20]

		timer_freq = (sysclk/(prescaler+1));
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <Timer_Frequency_Cofig+0x88>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	fbb2 f3f3 	udiv	r3, r2, r3
 8000728:	613b      	str	r3, [r7, #16]

		ARR = (timer_freq/desired_freq) - 1;
 800072a:	693a      	ldr	r2, [r7, #16]
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000732:	b29b      	uxth	r3, r3
 8000734:	3b01      	subs	r3, #1
 8000736:	b29a      	uxth	r2, r3
 8000738:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <Timer_Frequency_Cofig+0x8c>)
 800073a:	801a      	strh	r2, [r3, #0]
 800073c:	e007      	b.n	800074e <Timer_Frequency_Cofig+0x72>
	//
	//	prescaler = (sysclk/timer_freq)-1;
	}
	else
	{
		prescaler = 999;
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <Timer_Frequency_Cofig+0x88>)
 8000740:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000744:	601a      	str	r2, [r3, #0]
		ARR = 63999;
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <Timer_Frequency_Cofig+0x8c>)
 8000748:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 800074c:	801a      	strh	r2, [r3, #0]
	}

	MX_TIM4_Init();
 800074e:	f000 f8df 	bl	8000910 <MX_TIM4_Init>

}
 8000752:	bf00      	nop
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	10624dd3 	.word	0x10624dd3
 8000760:	24000098 	.word	0x24000098
 8000764:	24000008 	.word	0x24000008
 8000768:	24000004 	.word	0x24000004

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000770:	f000 fa36 	bl	8000be0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000774:	f000 fc44 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000778:	f000 f85a 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077c:	f000 f968 	bl	8000a50 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000780:	f000 f8c6 	bl	8000910 <MX_TIM4_Init>
  MX_UART7_Init();
 8000784:	f000 f918 	bl	80009b8 <MX_UART7_Init>
  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Timer_set_cnt(Timer_count);
 8000788:	4b1f      	ldr	r3, [pc, #124]	@ (8000808 <main+0x9c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff87 	bl	80006a0 <Timer_set_cnt>

  while (1)
  {
	  if(__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_UPDATE) != RESET)
 8000792:	4b1e      	ldr	r3, [pc, #120]	@ (800080c <main+0xa0>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	691b      	ldr	r3, [r3, #16]
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	2b01      	cmp	r3, #1
 800079e:	d1f8      	bne.n	8000792 <main+0x26>
	  {
		  stop_tick = HAL_GetTick();
 80007a0:	f000 fcb4 	bl	800110c <HAL_GetTick>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4a1a      	ldr	r2, [pc, #104]	@ (8000810 <main+0xa4>)
 80007a8:	6013      	str	r3, [r2, #0]
		  timer_overflow--;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <main+0xa8>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	4a18      	ldr	r2, [pc, #96]	@ (8000814 <main+0xa8>)
 80007b2:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_UPDATE);
 80007b4:	4b15      	ldr	r3, [pc, #84]	@ (800080c <main+0xa0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f06f 0201 	mvn.w	r2, #1
 80007bc:	611a      	str	r2, [r3, #16]
//		  HAL_UART_Transmit(&huart7, timer_millis, snprintf(timer_millis, sizeof(timer_millis),"%d ", (TIM4->ARR)), 100);

		  if(timer_overflow == 0)
 80007be:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <main+0xa8>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d1e5      	bne.n	8000792 <main+0x26>
		  {
			  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2101      	movs	r1, #1
 80007ca:	4813      	ldr	r0, [pc, #76]	@ (8000818 <main+0xac>)
 80007cc:	f000 ffae 	bl	800172c <HAL_GPIO_WritePin>
			  HAL_UART_Transmit(&huart7, msg, sizeof(msg), 100);
 80007d0:	2364      	movs	r3, #100	@ 0x64
 80007d2:	2210      	movs	r2, #16
 80007d4:	4911      	ldr	r1, [pc, #68]	@ (800081c <main+0xb0>)
 80007d6:	4812      	ldr	r0, [pc, #72]	@ (8000820 <main+0xb4>)
 80007d8:	f004 f950 	bl	8004a7c <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart7, timer_millis, snprintf(timer_millis, sizeof(timer_millis),"%d ", (stop_tick-start_tick)), 100);
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <main+0xa4>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <main+0xb8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	4a10      	ldr	r2, [pc, #64]	@ (8000828 <main+0xbc>)
 80007e8:	210a      	movs	r1, #10
 80007ea:	4810      	ldr	r0, [pc, #64]	@ (800082c <main+0xc0>)
 80007ec:	f005 fb64 	bl	8005eb8 <sniprintf>
 80007f0:	4603      	mov	r3, r0
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	2364      	movs	r3, #100	@ 0x64
 80007f6:	490d      	ldr	r1, [pc, #52]	@ (800082c <main+0xc0>)
 80007f8:	4809      	ldr	r0, [pc, #36]	@ (8000820 <main+0xb4>)
 80007fa:	f004 f93f 	bl	8004a7c <HAL_UART_Transmit>
			  HAL_TIM_Base_Stop(&htim4);
 80007fe:	4803      	ldr	r0, [pc, #12]	@ (800080c <main+0xa0>)
 8000800:	f003 fde6 	bl	80043d0 <HAL_TIM_Base_Stop>
	  if(__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_UPDATE) != RESET)
 8000804:	e7c5      	b.n	8000792 <main+0x26>
 8000806:	bf00      	nop
 8000808:	24000000 	.word	0x24000000
 800080c:	240000b0 	.word	0x240000b0
 8000810:	240000a0 	.word	0x240000a0
 8000814:	24000098 	.word	0x24000098
 8000818:	58020400 	.word	0x58020400
 800081c:	2400000c 	.word	0x2400000c
 8000820:	240000fc 	.word	0x240000fc
 8000824:	2400009c 	.word	0x2400009c
 8000828:	08006838 	.word	0x08006838
 800082c:	240000a4 	.word	0x240000a4

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b09c      	sub	sp, #112	@ 0x70
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083a:	224c      	movs	r2, #76	@ 0x4c
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f005 fb6e 	bl	8005f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2220      	movs	r2, #32
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f005 fb68 	bl	8005f20 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000850:	2002      	movs	r0, #2
 8000852:	f000 ff85 	bl	8001760 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b2c      	ldr	r3, [pc, #176]	@ (800090c <SystemClock_Config+0xdc>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000862:	4a2a      	ldr	r2, [pc, #168]	@ (800090c <SystemClock_Config+0xdc>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000868:	6193      	str	r3, [r2, #24]
 800086a:	4b28      	ldr	r3, [pc, #160]	@ (800090c <SystemClock_Config+0xdc>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000876:	bf00      	nop
 8000878:	4b24      	ldr	r3, [pc, #144]	@ (800090c <SystemClock_Config+0xdc>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000884:	d1f8      	bne.n	8000878 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000886:	2302      	movs	r3, #2
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800088a:	2301      	movs	r3, #1
 800088c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800088e:	2340      	movs	r3, #64	@ 0x40
 8000890:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000892:	2302      	movs	r3, #2
 8000894:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000896:	2300      	movs	r3, #0
 8000898:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800089a:	2304      	movs	r3, #4
 800089c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800089e:	230c      	movs	r3, #12
 80008a0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 3;
 80008a2:	2303      	movs	r3, #3
 80008a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008a6:	2304      	movs	r3, #4
 80008a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008ae:	230c      	movs	r3, #12
 80008b0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 ff88 	bl	80017d4 <HAL_RCC_OscConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008ca:	f000 f9b5 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ce:	233f      	movs	r3, #63	@ 0x3f
 80008d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d2:	2303      	movs	r3, #3
 80008d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008de:	2340      	movs	r3, #64	@ 0x40
 80008e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008e2:	2340      	movs	r3, #64	@ 0x40
 80008e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2101      	movs	r1, #1
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 fb47 	bl	8001f88 <HAL_RCC_ClockConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000900:	f000 f99a 	bl	8000c38 <Error_Handler>
  }
}
 8000904:	bf00      	nop
 8000906:	3770      	adds	r7, #112	@ 0x70
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	58024800 	.word	0x58024800

08000910 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000916:	f107 0310 	add.w	r3, r7, #16
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800092e:	4b1e      	ldr	r3, [pc, #120]	@ (80009a8 <MX_TIM4_Init+0x98>)
 8000930:	4a1e      	ldr	r2, [pc, #120]	@ (80009ac <MX_TIM4_Init+0x9c>)
 8000932:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = prescaler;
 8000934:	4b1e      	ldr	r3, [pc, #120]	@ (80009b0 <MX_TIM4_Init+0xa0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a1b      	ldr	r2, [pc, #108]	@ (80009a8 <MX_TIM4_Init+0x98>)
 800093a:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <MX_TIM4_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = ARR;
 8000942:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <MX_TIM4_Init+0xa4>)
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <MX_TIM4_Init+0x98>)
 800094a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094c:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <MX_TIM4_Init+0x98>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000952:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <MX_TIM4_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000958:	4813      	ldr	r0, [pc, #76]	@ (80009a8 <MX_TIM4_Init+0x98>)
 800095a:	f003 fc63 	bl	8004224 <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000964:	f000 f968 	bl	8000c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800096c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800096e:	f107 0310 	add.w	r3, r7, #16
 8000972:	4619      	mov	r1, r3
 8000974:	480c      	ldr	r0, [pc, #48]	@ (80009a8 <MX_TIM4_Init+0x98>)
 8000976:	f003 fd53 	bl	8004420 <HAL_TIM_ConfigClockSource>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000980:	f000 f95a 	bl	8000c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <MX_TIM4_Init+0x98>)
 8000992:	f003 ff87 	bl	80048a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800099c:	f000 f94c 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	3720      	adds	r7, #32
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	240000b0 	.word	0x240000b0
 80009ac:	40000800 	.word	0x40000800
 80009b0:	24000008 	.word	0x24000008
 80009b4:	24000004 	.word	0x24000004

080009b8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80009bc:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <MX_UART7_Init+0x90>)
 80009be:	4a23      	ldr	r2, [pc, #140]	@ (8000a4c <MX_UART7_Init+0x94>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 80009c2:	4b21      	ldr	r3, [pc, #132]	@ (8000a48 <MX_UART7_Init+0x90>)
 80009c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009c8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000a48 <MX_UART7_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a48 <MX_UART7_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <MX_UART7_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <MX_UART7_Init+0x90>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <MX_UART7_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <MX_UART7_Init+0x90>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <MX_UART7_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f4:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <MX_UART7_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fa:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <MX_UART7_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000a00:	4811      	ldr	r0, [pc, #68]	@ (8000a48 <MX_UART7_Init+0x90>)
 8000a02:	f003 ffeb 	bl	80049dc <HAL_UART_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f000 f914 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a10:	2100      	movs	r1, #0
 8000a12:	480d      	ldr	r0, [pc, #52]	@ (8000a48 <MX_UART7_Init+0x90>)
 8000a14:	f005 f985 	bl	8005d22 <HAL_UARTEx_SetTxFifoThreshold>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000a1e:	f000 f90b 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4808      	ldr	r0, [pc, #32]	@ (8000a48 <MX_UART7_Init+0x90>)
 8000a26:	f005 f9ba 	bl	8005d9e <HAL_UARTEx_SetRxFifoThreshold>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f000 f902 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	@ (8000a48 <MX_UART7_Init+0x90>)
 8000a36:	f005 f93b 	bl	8005cb0 <HAL_UARTEx_DisableFifoMode>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000a40:	f000 f8fa 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	240000fc 	.word	0x240000fc
 8000a4c:	40007800 	.word	0x40007800

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08c      	sub	sp, #48	@ 0x30
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	4b59      	ldr	r3, [pc, #356]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6c:	4a57      	ldr	r2, [pc, #348]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000a6e:	f043 0304 	orr.w	r3, r3, #4
 8000a72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a76:	4b55      	ldr	r3, [pc, #340]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	61bb      	str	r3, [r7, #24]
 8000a82:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a84:	4b51      	ldr	r3, [pc, #324]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8a:	4a50      	ldr	r2, [pc, #320]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000a8c:	f043 0320 	orr.w	r3, r3, #32
 8000a90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a94:	4b4d      	ldr	r3, [pc, #308]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9a:	f003 0320 	and.w	r3, r3, #32
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa8:	4a48      	ldr	r2, [pc, #288]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab2:	4b46      	ldr	r3, [pc, #280]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac0:	4b42      	ldr	r3, [pc, #264]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac6:	4a41      	ldr	r2, [pc, #260]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad0:	4b3e      	ldr	r3, [pc, #248]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	4b3b      	ldr	r3, [pc, #236]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae4:	4a39      	ldr	r2, [pc, #228]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000ae6:	f043 0308 	orr.w	r3, r3, #8
 8000aea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aee:	4b37      	ldr	r3, [pc, #220]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af4:	f003 0308 	and.w	r3, r3, #8
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b33      	ldr	r3, [pc, #204]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b02:	4a32      	ldr	r2, [pc, #200]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b20:	4a2a      	ldr	r2, [pc, #168]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2a:	4b28      	ldr	r3, [pc, #160]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b3e:	4824      	ldr	r0, [pc, #144]	@ (8000bd0 <MX_GPIO_Init+0x180>)
 8000b40:	f000 fdf4 	bl	800172c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2102      	movs	r1, #2
 8000b48:	4822      	ldr	r0, [pc, #136]	@ (8000bd4 <MX_GPIO_Init+0x184>)
 8000b4a:	f000 fdef 	bl	800172c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	481d      	ldr	r0, [pc, #116]	@ (8000bd8 <MX_GPIO_Init+0x188>)
 8000b64:	f000 fc3a 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000b68:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4813      	ldr	r0, [pc, #76]	@ (8000bd0 <MX_GPIO_Init+0x180>)
 8000b82:	f000 fc2b 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000b86:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b98:	2307      	movs	r3, #7
 8000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480e      	ldr	r0, [pc, #56]	@ (8000bdc <MX_GPIO_Init+0x18c>)
 8000ba4:	f000 fc1a 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <MX_GPIO_Init+0x184>)
 8000bc0:	f000 fc0c 	bl	80013dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc4:	bf00      	nop
 8000bc6:	3730      	adds	r7, #48	@ 0x30
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	58024400 	.word	0x58024400
 8000bd0:	58020400 	.word	0x58020400
 8000bd4:	58021000 	.word	0x58021000
 8000bd8:	58020800 	.word	0x58020800
 8000bdc:	58020c00 	.word	0x58020c00

08000be0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000be6:	463b      	mov	r3, r7
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bf2:	f000 fb7b 	bl	80012ec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c02:	231f      	movs	r3, #31
 8000c04:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c06:	2387      	movs	r3, #135	@ 0x87
 8000c08:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c12:	2301      	movs	r3, #1
 8000c14:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c16:	2301      	movs	r3, #1
 8000c18:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c22:	463b      	mov	r3, r7
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 fb99 	bl	800135c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c2a:	2004      	movs	r0, #4
 8000c2c:	f000 fb76 	bl	800131c <HAL_MPU_Enable>

}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <Error_Handler+0x8>

08000c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <HAL_MspInit+0x30>)
 8000c4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c50:	4a08      	ldr	r2, [pc, #32]	@ (8000c74 <HAL_MspInit+0x30>)
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <HAL_MspInit+0x30>)
 8000c5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c60:	f003 0302 	and.w	r3, r3, #2
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	58024400 	.word	0x58024400

08000c78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb4 <HAL_TIM_Base_MspInit+0x3c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d10e      	bne.n	8000ca8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x40>)
 8000c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c90:	4a09      	ldr	r2, [pc, #36]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x40>)
 8000c92:	f043 0304 	orr.w	r3, r3, #4
 8000c96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c9a:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x40>)
 8000c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	40000800 	.word	0x40000800
 8000cb8:	58024400 	.word	0x58024400

08000cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0b8      	sub	sp, #224	@ 0xe0
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	22b8      	movs	r2, #184	@ 0xb8
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f005 f91f 	bl	8005f20 <memset>
  if(huart->Instance==UART7)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a26      	ldr	r2, [pc, #152]	@ (8000d80 <HAL_UART_MspInit+0xc4>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d145      	bne.n	8000d78 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000cec:	f04f 0202 	mov.w	r2, #2
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 fccc 	bl	80026a0 <HAL_RCCEx_PeriphCLKConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d0e:	f7ff ff93 	bl	8000c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000d12:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <HAL_UART_MspInit+0xc8>)
 8000d14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d18:	4a1a      	ldr	r2, [pc, #104]	@ (8000d84 <HAL_UART_MspInit+0xc8>)
 8000d1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000d1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d22:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <HAL_UART_MspInit+0xc8>)
 8000d24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d28:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d30:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <HAL_UART_MspInit+0xc8>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d36:	4a13      	ldr	r2, [pc, #76]	@ (8000d84 <HAL_UART_MspInit+0xc8>)
 8000d38:	f043 0320 	orr.w	r3, r3, #32
 8000d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d40:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <HAL_UART_MspInit+0xc8>)
 8000d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d46:	f003 0320 	and.w	r3, r3, #32
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d4e:	23c0      	movs	r3, #192	@ 0xc0
 8000d50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8000d66:	2307      	movs	r3, #7
 8000d68:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d6c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000d70:	4619      	mov	r1, r3
 8000d72:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <HAL_UART_MspInit+0xcc>)
 8000d74:	f000 fb32 	bl	80013dc <HAL_GPIO_Init>

  /* USER CODE END UART7_MspInit 1 */

  }

}
 8000d78:	bf00      	nop
 8000d7a:	37e0      	adds	r7, #224	@ 0xe0
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40007800 	.word	0x40007800
 8000d84:	58024400 	.word	0x58024400
 8000d88:	58021400 	.word	0x58021400

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <NMI_Handler+0x4>

08000d94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <MemManage_Handler+0x4>

08000da4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de2:	f000 f97f 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	@ (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	@ (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f005 f888 	bl	8005f30 <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	24050000 	.word	0x24050000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	24000190 	.word	0x24000190
 8000e54:	240002e0 	.word	0x240002e0

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f58 <SystemInit+0x100>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e62:	4a3d      	ldr	r2, [pc, #244]	@ (8000f58 <SystemInit+0x100>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f5c <SystemInit+0x104>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 030f 	and.w	r3, r3, #15
 8000e74:	2b06      	cmp	r3, #6
 8000e76:	d807      	bhi.n	8000e88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e78:	4b38      	ldr	r3, [pc, #224]	@ (8000f5c <SystemInit+0x104>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f023 030f 	bic.w	r3, r3, #15
 8000e80:	4a36      	ldr	r2, [pc, #216]	@ (8000f5c <SystemInit+0x104>)
 8000e82:	f043 0307 	orr.w	r3, r3, #7
 8000e86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e88:	4b35      	ldr	r3, [pc, #212]	@ (8000f60 <SystemInit+0x108>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a34      	ldr	r2, [pc, #208]	@ (8000f60 <SystemInit+0x108>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e94:	4b32      	ldr	r3, [pc, #200]	@ (8000f60 <SystemInit+0x108>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e9a:	4b31      	ldr	r3, [pc, #196]	@ (8000f60 <SystemInit+0x108>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4930      	ldr	r1, [pc, #192]	@ (8000f60 <SystemInit+0x108>)
 8000ea0:	4b30      	ldr	r3, [pc, #192]	@ (8000f64 <SystemInit+0x10c>)
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f5c <SystemInit+0x104>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d007      	beq.n	8000ec2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f5c <SystemInit+0x104>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f023 030f 	bic.w	r3, r3, #15
 8000eba:	4a28      	ldr	r2, [pc, #160]	@ (8000f5c <SystemInit+0x104>)
 8000ebc:	f043 0307 	orr.w	r3, r3, #7
 8000ec0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ec2:	4b27      	ldr	r3, [pc, #156]	@ (8000f60 <SystemInit+0x108>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ec8:	4b25      	ldr	r3, [pc, #148]	@ (8000f60 <SystemInit+0x108>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ece:	4b24      	ldr	r3, [pc, #144]	@ (8000f60 <SystemInit+0x108>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ed4:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <SystemInit+0x108>)
 8000ed6:	4a24      	ldr	r2, [pc, #144]	@ (8000f68 <SystemInit+0x110>)
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eda:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <SystemInit+0x108>)
 8000edc:	4a23      	ldr	r2, [pc, #140]	@ (8000f6c <SystemInit+0x114>)
 8000ede:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f60 <SystemInit+0x108>)
 8000ee2:	4a23      	ldr	r2, [pc, #140]	@ (8000f70 <SystemInit+0x118>)
 8000ee4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f60 <SystemInit+0x108>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000eec:	4b1c      	ldr	r3, [pc, #112]	@ (8000f60 <SystemInit+0x108>)
 8000eee:	4a20      	ldr	r2, [pc, #128]	@ (8000f70 <SystemInit+0x118>)
 8000ef0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <SystemInit+0x108>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <SystemInit+0x108>)
 8000efa:	4a1d      	ldr	r2, [pc, #116]	@ (8000f70 <SystemInit+0x118>)
 8000efc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000efe:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <SystemInit+0x108>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f04:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <SystemInit+0x108>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a15      	ldr	r2, [pc, #84]	@ (8000f60 <SystemInit+0x108>)
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f10:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <SystemInit+0x108>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000f16:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <SystemInit+0x108>)
 8000f18:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d113      	bne.n	8000f4c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f24:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <SystemInit+0x108>)
 8000f26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f60 <SystemInit+0x108>)
 8000f2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f30:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <SystemInit+0x11c>)
 8000f36:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f3a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <SystemInit+0x108>)
 8000f3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f42:	4a07      	ldr	r2, [pc, #28]	@ (8000f60 <SystemInit+0x108>)
 8000f44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f48:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00
 8000f5c:	52002000 	.word	0x52002000
 8000f60:	58024400 	.word	0x58024400
 8000f64:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f68:	02020200 	.word	0x02020200
 8000f6c:	01ff0000 	.word	0x01ff0000
 8000f70:	01010280 	.word	0x01010280
 8000f74:	52004000 	.word	0x52004000

08000f78 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <ExitRun0Mode+0x2c>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	4a08      	ldr	r2, [pc, #32]	@ (8000fa4 <ExitRun0Mode+0x2c>)
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000f88:	bf00      	nop
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <ExitRun0Mode+0x2c>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f9      	beq.n	8000f8a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	58024800 	.word	0x58024800

08000fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fa8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000fe4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000fac:	f7ff ffe4 	bl	8000f78 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb0:	f7ff ff52 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb4:	480c      	ldr	r0, [pc, #48]	@ (8000fe8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fb6:	490d      	ldr	r1, [pc, #52]	@ (8000fec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fda:	f004 ffaf 	bl	8005f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fde:	f7ff fbc5 	bl	800076c <main>
  bx  lr
 8000fe2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000fe8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fec:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8000ff0:	080068b8 	.word	0x080068b8
  ldr r2, =_sbss
 8000ff4:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8000ff8:	240002e0 	.word	0x240002e0

08000ffc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC3_IRQHandler>
	...

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001006:	2003      	movs	r0, #3
 8001008:	f000 f93e 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800100c:	f001 f972 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 8001010:	4602      	mov	r2, r0
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <HAL_Init+0x68>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	0a1b      	lsrs	r3, r3, #8
 8001018:	f003 030f 	and.w	r3, r3, #15
 800101c:	4913      	ldr	r1, [pc, #76]	@ (800106c <HAL_Init+0x6c>)
 800101e:	5ccb      	ldrb	r3, [r1, r3]
 8001020:	f003 031f 	and.w	r3, r3, #31
 8001024:	fa22 f303 	lsr.w	r3, r2, r3
 8001028:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800102a:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <HAL_Init+0x68>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	4a0e      	ldr	r2, [pc, #56]	@ (800106c <HAL_Init+0x6c>)
 8001034:	5cd3      	ldrb	r3, [r2, r3]
 8001036:	f003 031f 	and.w	r3, r3, #31
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	fa22 f303 	lsr.w	r3, r2, r3
 8001040:	4a0b      	ldr	r2, [pc, #44]	@ (8001070 <HAL_Init+0x70>)
 8001042:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001044:	4a0b      	ldr	r2, [pc, #44]	@ (8001074 <HAL_Init+0x74>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104a:	2000      	movs	r0, #0
 800104c:	f000 f814 	bl	8001078 <HAL_InitTick>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e002      	b.n	8001060 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800105a:	f7ff fdf3 	bl	8000c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	58024400 	.word	0x58024400
 800106c:	0800683c 	.word	0x0800683c
 8001070:	24000020 	.word	0x24000020
 8001074:	2400001c 	.word	0x2400001c

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001080:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <HAL_InitTick+0x60>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e021      	b.n	80010d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800108c:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <HAL_InitTick+0x64>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <HAL_InitTick+0x60>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f915 	bl	80012d2 <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00e      	b.n	80010d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d80a      	bhi.n	80010ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f000 f8ed 	bl	800129e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c4:	4a06      	ldr	r2, [pc, #24]	@ (80010e0 <HAL_InitTick+0x68>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	24000028 	.word	0x24000028
 80010dc:	2400001c 	.word	0x2400001c
 80010e0:	24000024 	.word	0x24000024

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	24000028 	.word	0x24000028
 8001108:	24000194 	.word	0x24000194

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	24000194 	.word	0x24000194

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <__NVIC_SetPriorityGrouping+0x40>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	4313      	orrs	r3, r2
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <__NVIC_SetPriorityGrouping+0x40>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00
 8001168:	05fa0000 	.word	0x05fa0000

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	@ (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	@ (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	@ 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	@ 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff8e 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff47 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff5e 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff90 	bl	80011dc <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff5f 	bl	8001188 <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffb2 	bl	8001244 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012f0:	f3bf 8f5f 	dmb	sy
}
 80012f4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012f6:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <HAL_MPU_Disable+0x28>)
 80012f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fa:	4a06      	ldr	r2, [pc, #24]	@ (8001314 <HAL_MPU_Disable+0x28>)
 80012fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001300:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001302:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <HAL_MPU_Disable+0x2c>)
 8001304:	2200      	movs	r2, #0
 8001306:	605a      	str	r2, [r3, #4]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00
 8001318:	e000ed90 	.word	0xe000ed90

0800131c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001324:	4a0b      	ldr	r2, [pc, #44]	@ (8001354 <HAL_MPU_Enable+0x38>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <HAL_MPU_Enable+0x3c>)
 8001330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001332:	4a09      	ldr	r2, [pc, #36]	@ (8001358 <HAL_MPU_Enable+0x3c>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001338:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed90 	.word	0xe000ed90
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	785a      	ldrb	r2, [r3, #1]
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <HAL_MPU_ConfigRegion+0x7c>)
 800136a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800136c:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <HAL_MPU_ConfigRegion+0x7c>)
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	4a19      	ldr	r2, [pc, #100]	@ (80013d8 <HAL_MPU_ConfigRegion+0x7c>)
 8001372:	f023 0301 	bic.w	r3, r3, #1
 8001376:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001378:	4a17      	ldr	r2, [pc, #92]	@ (80013d8 <HAL_MPU_ConfigRegion+0x7c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7b1b      	ldrb	r3, [r3, #12]
 8001384:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7adb      	ldrb	r3, [r3, #11]
 800138a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800138c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7a9b      	ldrb	r3, [r3, #10]
 8001392:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001394:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7b5b      	ldrb	r3, [r3, #13]
 800139a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800139c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7b9b      	ldrb	r3, [r3, #14]
 80013a2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7bdb      	ldrb	r3, [r3, #15]
 80013aa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	7a5b      	ldrb	r3, [r3, #9]
 80013b2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	7a1b      	ldrb	r3, [r3, #8]
 80013ba:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013bc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	7812      	ldrb	r2, [r2, #0]
 80013c2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013c4:	4a04      	ldr	r2, [pc, #16]	@ (80013d8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013c6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013c8:	6113      	str	r3, [r2, #16]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed90 	.word	0xe000ed90

080013dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	@ 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013ea:	4b86      	ldr	r3, [pc, #536]	@ (8001604 <HAL_GPIO_Init+0x228>)
 80013ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013ee:	e18c      	b.n	800170a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2101      	movs	r1, #1
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 817e 	beq.w	8001704 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	2b01      	cmp	r3, #1
 8001412:	d005      	beq.n	8001420 <HAL_GPIO_Init+0x44>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d130      	bne.n	8001482 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001456:	2201      	movs	r2, #1
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	091b      	lsrs	r3, r3, #4
 800146c:	f003 0201 	and.w	r2, r3, #1
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	2b03      	cmp	r3, #3
 800148c:	d017      	beq.n	80014be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	2203      	movs	r2, #3
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d123      	bne.n	8001512 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	08da      	lsrs	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3208      	adds	r2, #8
 80014d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	220f      	movs	r2, #15
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	691a      	ldr	r2, [r3, #16]
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	08da      	lsrs	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3208      	adds	r2, #8
 800150c:	69b9      	ldr	r1, [r7, #24]
 800150e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0203 	and.w	r2, r3, #3
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 80d8 	beq.w	8001704 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001554:	4b2c      	ldr	r3, [pc, #176]	@ (8001608 <HAL_GPIO_Init+0x22c>)
 8001556:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800155a:	4a2b      	ldr	r2, [pc, #172]	@ (8001608 <HAL_GPIO_Init+0x22c>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001564:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <HAL_GPIO_Init+0x22c>)
 8001566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001572:	4a26      	ldr	r2, [pc, #152]	@ (800160c <HAL_GPIO_Init+0x230>)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3302      	adds	r3, #2
 800157a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	220f      	movs	r2, #15
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a1d      	ldr	r2, [pc, #116]	@ (8001610 <HAL_GPIO_Init+0x234>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d04a      	beq.n	8001634 <HAL_GPIO_Init+0x258>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001614 <HAL_GPIO_Init+0x238>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d02b      	beq.n	80015fe <HAL_GPIO_Init+0x222>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001618 <HAL_GPIO_Init+0x23c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d025      	beq.n	80015fa <HAL_GPIO_Init+0x21e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a1a      	ldr	r2, [pc, #104]	@ (800161c <HAL_GPIO_Init+0x240>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d01f      	beq.n	80015f6 <HAL_GPIO_Init+0x21a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a19      	ldr	r2, [pc, #100]	@ (8001620 <HAL_GPIO_Init+0x244>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d019      	beq.n	80015f2 <HAL_GPIO_Init+0x216>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a18      	ldr	r2, [pc, #96]	@ (8001624 <HAL_GPIO_Init+0x248>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d013      	beq.n	80015ee <HAL_GPIO_Init+0x212>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a17      	ldr	r2, [pc, #92]	@ (8001628 <HAL_GPIO_Init+0x24c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d00d      	beq.n	80015ea <HAL_GPIO_Init+0x20e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a16      	ldr	r2, [pc, #88]	@ (800162c <HAL_GPIO_Init+0x250>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d007      	beq.n	80015e6 <HAL_GPIO_Init+0x20a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a15      	ldr	r2, [pc, #84]	@ (8001630 <HAL_GPIO_Init+0x254>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d101      	bne.n	80015e2 <HAL_GPIO_Init+0x206>
 80015de:	2309      	movs	r3, #9
 80015e0:	e029      	b.n	8001636 <HAL_GPIO_Init+0x25a>
 80015e2:	230a      	movs	r3, #10
 80015e4:	e027      	b.n	8001636 <HAL_GPIO_Init+0x25a>
 80015e6:	2307      	movs	r3, #7
 80015e8:	e025      	b.n	8001636 <HAL_GPIO_Init+0x25a>
 80015ea:	2306      	movs	r3, #6
 80015ec:	e023      	b.n	8001636 <HAL_GPIO_Init+0x25a>
 80015ee:	2305      	movs	r3, #5
 80015f0:	e021      	b.n	8001636 <HAL_GPIO_Init+0x25a>
 80015f2:	2304      	movs	r3, #4
 80015f4:	e01f      	b.n	8001636 <HAL_GPIO_Init+0x25a>
 80015f6:	2303      	movs	r3, #3
 80015f8:	e01d      	b.n	8001636 <HAL_GPIO_Init+0x25a>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e01b      	b.n	8001636 <HAL_GPIO_Init+0x25a>
 80015fe:	2301      	movs	r3, #1
 8001600:	e019      	b.n	8001636 <HAL_GPIO_Init+0x25a>
 8001602:	bf00      	nop
 8001604:	58000080 	.word	0x58000080
 8001608:	58024400 	.word	0x58024400
 800160c:	58000400 	.word	0x58000400
 8001610:	58020000 	.word	0x58020000
 8001614:	58020400 	.word	0x58020400
 8001618:	58020800 	.word	0x58020800
 800161c:	58020c00 	.word	0x58020c00
 8001620:	58021000 	.word	0x58021000
 8001624:	58021400 	.word	0x58021400
 8001628:	58021800 	.word	0x58021800
 800162c:	58021c00 	.word	0x58021c00
 8001630:	58022400 	.word	0x58022400
 8001634:	2300      	movs	r3, #0
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	f002 0203 	and.w	r2, r2, #3
 800163c:	0092      	lsls	r2, r2, #2
 800163e:	4093      	lsls	r3, r2
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001646:	4938      	ldr	r1, [pc, #224]	@ (8001728 <HAL_GPIO_Init+0x34c>)
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	3302      	adds	r3, #2
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800167a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001682:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	3301      	adds	r3, #1
 8001708:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	f47f ae6b 	bne.w	80013f0 <HAL_GPIO_Init+0x14>
  }
}
 800171a:	bf00      	nop
 800171c:	bf00      	nop
 800171e:	3724      	adds	r7, #36	@ 0x24
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	58000400 	.word	0x58000400

0800172c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	807b      	strh	r3, [r7, #2]
 8001738:	4613      	mov	r3, r2
 800173a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800173c:	787b      	ldrb	r3, [r7, #1]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001742:	887a      	ldrh	r2, [r7, #2]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001748:	e003      	b.n	8001752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800174a:	887b      	ldrh	r3, [r7, #2]
 800174c:	041a      	lsls	r2, r3, #16
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	619a      	str	r2, [r3, #24]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001768:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <HAL_PWREx_ConfigSupply+0x70>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b04      	cmp	r3, #4
 8001772:	d00a      	beq.n	800178a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001774:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <HAL_PWREx_ConfigSupply+0x70>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	429a      	cmp	r2, r3
 8001780:	d001      	beq.n	8001786 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e01f      	b.n	80017c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	e01d      	b.n	80017c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800178a:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <HAL_PWREx_ConfigSupply+0x70>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f023 0207 	bic.w	r2, r3, #7
 8001792:	490f      	ldr	r1, [pc, #60]	@ (80017d0 <HAL_PWREx_ConfigSupply+0x70>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4313      	orrs	r3, r2
 8001798:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800179a:	f7ff fcb7 	bl	800110c <HAL_GetTick>
 800179e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017a0:	e009      	b.n	80017b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017a2:	f7ff fcb3 	bl	800110c <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017b0:	d901      	bls.n	80017b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e007      	b.n	80017c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017b6:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_PWREx_ConfigSupply+0x70>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017c2:	d1ee      	bne.n	80017a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	58024800 	.word	0x58024800

080017d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	@ 0x30
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e3c8      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 8087 	beq.w	8001902 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017f4:	4b88      	ldr	r3, [pc, #544]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017fe:	4b86      	ldr	r3, [pc, #536]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 8001800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001802:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001806:	2b10      	cmp	r3, #16
 8001808:	d007      	beq.n	800181a <HAL_RCC_OscConfig+0x46>
 800180a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800180c:	2b18      	cmp	r3, #24
 800180e:	d110      	bne.n	8001832 <HAL_RCC_OscConfig+0x5e>
 8001810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d10b      	bne.n	8001832 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d06c      	beq.n	8001900 <HAL_RCC_OscConfig+0x12c>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d168      	bne.n	8001900 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e3a2      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x76>
 800183c:	4b76      	ldr	r3, [pc, #472]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a75      	ldr	r2, [pc, #468]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 8001842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	e02e      	b.n	80018a8 <HAL_RCC_OscConfig+0xd4>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0x98>
 8001852:	4b71      	ldr	r3, [pc, #452]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a70      	ldr	r2, [pc, #448]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 8001858:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b6e      	ldr	r3, [pc, #440]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a6d      	ldr	r2, [pc, #436]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 8001864:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e01d      	b.n	80018a8 <HAL_RCC_OscConfig+0xd4>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0xbc>
 8001876:	4b68      	ldr	r3, [pc, #416]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a67      	ldr	r2, [pc, #412]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 800187c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b65      	ldr	r3, [pc, #404]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a64      	ldr	r2, [pc, #400]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e00b      	b.n	80018a8 <HAL_RCC_OscConfig+0xd4>
 8001890:	4b61      	ldr	r3, [pc, #388]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a60      	ldr	r2, [pc, #384]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 8001896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b5e      	ldr	r3, [pc, #376]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a5d      	ldr	r2, [pc, #372]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 80018a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d013      	beq.n	80018d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff fc2c 	bl	800110c <HAL_GetTick>
 80018b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b8:	f7ff fc28 	bl	800110c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	@ 0x64
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e356      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018ca:	4b53      	ldr	r3, [pc, #332]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0xe4>
 80018d6:	e014      	b.n	8001902 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff fc18 	bl	800110c <HAL_GetTick>
 80018dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff fc14 	bl	800110c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	@ 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e342      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018f2:	4b49      	ldr	r3, [pc, #292]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x10c>
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 808c 	beq.w	8001a28 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001910:	4b41      	ldr	r3, [pc, #260]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001918:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800191a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 800191c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <HAL_RCC_OscConfig+0x162>
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	2b18      	cmp	r3, #24
 800192a:	d137      	bne.n	800199c <HAL_RCC_OscConfig+0x1c8>
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d132      	bne.n	800199c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001936:	4b38      	ldr	r3, [pc, #224]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	2b00      	cmp	r3, #0
 8001940:	d005      	beq.n	800194e <HAL_RCC_OscConfig+0x17a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e314      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800194e:	4b32      	ldr	r3, [pc, #200]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 0219 	bic.w	r2, r3, #25
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	492f      	ldr	r1, [pc, #188]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 800195c:	4313      	orrs	r3, r2
 800195e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff fbd4 	bl	800110c <HAL_GetTick>
 8001964:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001968:	f7ff fbd0 	bl	800110c <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e2fe      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800197a:	4b27      	ldr	r3, [pc, #156]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001986:	4b24      	ldr	r3, [pc, #144]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	061b      	lsls	r3, r3, #24
 8001994:	4920      	ldr	r1, [pc, #128]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 8001996:	4313      	orrs	r3, r2
 8001998:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800199a:	e045      	b.n	8001a28 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d026      	beq.n	80019f2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f023 0219 	bic.w	r2, r3, #25
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4919      	ldr	r1, [pc, #100]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b6:	f7ff fba9 	bl	800110c <HAL_GetTick>
 80019ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019be:	f7ff fba5 	bl	800110c <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e2d3      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019d0:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	061b      	lsls	r3, r3, #24
 80019ea:	490b      	ldr	r1, [pc, #44]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
 80019f0:	e01a      	b.n	8001a28 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f2:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a08      	ldr	r2, [pc, #32]	@ (8001a18 <HAL_RCC_OscConfig+0x244>)
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fe:	f7ff fb85 	bl	800110c <HAL_GetTick>
 8001a02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a06:	f7ff fb81 	bl	800110c <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d903      	bls.n	8001a1c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e2af      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
 8001a18:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a1c:	4b96      	ldr	r3, [pc, #600]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1ee      	bne.n	8001a06 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d06a      	beq.n	8001b0a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a34:	4b90      	ldr	r3, [pc, #576]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a3c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a3e:	4b8e      	ldr	r3, [pc, #568]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a42:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d007      	beq.n	8001a5a <HAL_RCC_OscConfig+0x286>
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2b18      	cmp	r3, #24
 8001a4e:	d11b      	bne.n	8001a88 <HAL_RCC_OscConfig+0x2b4>
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d116      	bne.n	8001a88 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a5a:	4b87      	ldr	r3, [pc, #540]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d005      	beq.n	8001a72 <HAL_RCC_OscConfig+0x29e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	2b80      	cmp	r3, #128	@ 0x80
 8001a6c:	d001      	beq.n	8001a72 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e282      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a72:	4b81      	ldr	r3, [pc, #516]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	061b      	lsls	r3, r3, #24
 8001a80:	497d      	ldr	r1, [pc, #500]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a86:	e040      	b.n	8001b0a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d023      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a90:	4b79      	ldr	r3, [pc, #484]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a78      	ldr	r2, [pc, #480]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fb36 	bl	800110c <HAL_GetTick>
 8001aa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001aa4:	f7ff fb32 	bl	800110c <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e260      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ab6:	4b70      	ldr	r3, [pc, #448]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	061b      	lsls	r3, r3, #24
 8001ad0:	4969      	ldr	r1, [pc, #420]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60cb      	str	r3, [r1, #12]
 8001ad6:	e018      	b.n	8001b0a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ad8:	4b67      	ldr	r3, [pc, #412]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a66      	ldr	r2, [pc, #408]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001ade:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fb12 	bl	800110c <HAL_GetTick>
 8001ae8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001aec:	f7ff fb0e 	bl	800110c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e23c      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001afe:	4b5e      	ldr	r3, [pc, #376]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d036      	beq.n	8001b84 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d019      	beq.n	8001b52 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1e:	4b56      	ldr	r3, [pc, #344]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b22:	4a55      	ldr	r2, [pc, #340]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2a:	f7ff faef 	bl	800110c <HAL_GetTick>
 8001b2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b32:	f7ff faeb 	bl	800110c <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e219      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b44:	4b4c      	ldr	r3, [pc, #304]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x35e>
 8001b50:	e018      	b.n	8001b84 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b52:	4b49      	ldr	r3, [pc, #292]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b56:	4a48      	ldr	r2, [pc, #288]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5e:	f7ff fad5 	bl	800110c <HAL_GetTick>
 8001b62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b66:	f7ff fad1 	bl	800110c <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e1ff      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b78:	4b3f      	ldr	r3, [pc, #252]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f0      	bne.n	8001b66 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0320 	and.w	r3, r3, #32
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d036      	beq.n	8001bfe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d019      	beq.n	8001bcc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b98:	4b37      	ldr	r3, [pc, #220]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a36      	ldr	r2, [pc, #216]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001b9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ba2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ba4:	f7ff fab2 	bl	800110c <HAL_GetTick>
 8001ba8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bac:	f7ff faae 	bl	800110c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e1dc      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x3d8>
 8001bca:	e018      	b.n	8001bfe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a29      	ldr	r2, [pc, #164]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001bd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001bd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bd8:	f7ff fa98 	bl	800110c <HAL_GetTick>
 8001bdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001be0:	f7ff fa94 	bl	800110c <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e1c2      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bf2:	4b21      	ldr	r3, [pc, #132]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 8086 	beq.w	8001d18 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a1a      	ldr	r2, [pc, #104]	@ (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c18:	f7ff fa78 	bl	800110c <HAL_GetTick>
 8001c1c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c20:	f7ff fa74 	bl	800110c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	@ 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e1a2      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c32:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d106      	bne.n	8001c54 <HAL_RCC_OscConfig+0x480>
 8001c46:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c52:	e032      	b.n	8001cba <HAL_RCC_OscConfig+0x4e6>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d111      	bne.n	8001c80 <HAL_RCC_OscConfig+0x4ac>
 8001c5c:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c60:	4a05      	ldr	r2, [pc, #20]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001c62:	f023 0301 	bic.w	r3, r3, #1
 8001c66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6c:	4a02      	ldr	r2, [pc, #8]	@ (8001c78 <HAL_RCC_OscConfig+0x4a4>)
 8001c6e:	f023 0304 	bic.w	r3, r3, #4
 8001c72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c74:	e021      	b.n	8001cba <HAL_RCC_OscConfig+0x4e6>
 8001c76:	bf00      	nop
 8001c78:	58024400 	.word	0x58024400
 8001c7c:	58024800 	.word	0x58024800
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b05      	cmp	r3, #5
 8001c86:	d10c      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x4ce>
 8001c88:	4b83      	ldr	r3, [pc, #524]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8c:	4a82      	ldr	r2, [pc, #520]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001c8e:	f043 0304 	orr.w	r3, r3, #4
 8001c92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c94:	4b80      	ldr	r3, [pc, #512]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c98:	4a7f      	ldr	r2, [pc, #508]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca0:	e00b      	b.n	8001cba <HAL_RCC_OscConfig+0x4e6>
 8001ca2:	4b7d      	ldr	r3, [pc, #500]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca6:	4a7c      	ldr	r2, [pc, #496]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cae:	4b7a      	ldr	r3, [pc, #488]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb2:	4a79      	ldr	r2, [pc, #484]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001cb4:	f023 0304 	bic.w	r3, r3, #4
 8001cb8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d015      	beq.n	8001cee <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc2:	f7ff fa23 	bl	800110c <HAL_GetTick>
 8001cc6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cc8:	e00a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cca:	f7ff fa1f 	bl	800110c <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e14b      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ce0:	4b6d      	ldr	r3, [pc, #436]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0ee      	beq.n	8001cca <HAL_RCC_OscConfig+0x4f6>
 8001cec:	e014      	b.n	8001d18 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cee:	f7ff fa0d 	bl	800110c <HAL_GetTick>
 8001cf2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f7ff fa09 	bl	800110c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e135      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d0c:	4b62      	ldr	r3, [pc, #392]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1ee      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 812a 	beq.w	8001f76 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d22:	4b5d      	ldr	r3, [pc, #372]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d2a:	2b18      	cmp	r3, #24
 8001d2c:	f000 80ba 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	f040 8095 	bne.w	8001e64 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3a:	4b57      	ldr	r3, [pc, #348]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a56      	ldr	r2, [pc, #344]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001d40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7ff f9e1 	bl	800110c <HAL_GetTick>
 8001d4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4e:	f7ff f9dd 	bl	800110c <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e10b      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d60:	4b4d      	ldr	r3, [pc, #308]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d6c:	4b4a      	ldr	r3, [pc, #296]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001d6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d70:	4b4a      	ldr	r3, [pc, #296]	@ (8001e9c <HAL_RCC_OscConfig+0x6c8>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	4945      	ldr	r1, [pc, #276]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	628b      	str	r3, [r1, #40]	@ 0x28
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d94:	3b01      	subs	r3, #1
 8001d96:	025b      	lsls	r3, r3, #9
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da0:	3b01      	subs	r3, #1
 8001da2:	041b      	lsls	r3, r3, #16
 8001da4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dae:	3b01      	subs	r3, #1
 8001db0:	061b      	lsls	r3, r3, #24
 8001db2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001db6:	4938      	ldr	r1, [pc, #224]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001dbc:	4b36      	ldr	r3, [pc, #216]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc0:	4a35      	ldr	r2, [pc, #212]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001dc2:	f023 0301 	bic.w	r3, r3, #1
 8001dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001dc8:	4b33      	ldr	r3, [pc, #204]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001dca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dcc:	4b34      	ldr	r3, [pc, #208]	@ (8001ea0 <HAL_RCC_OscConfig+0x6cc>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001dd4:	00d2      	lsls	r2, r2, #3
 8001dd6:	4930      	ldr	r1, [pc, #192]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de0:	f023 020c 	bic.w	r2, r3, #12
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de8:	492b      	ldr	r1, [pc, #172]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001dee:	4b2a      	ldr	r3, [pc, #168]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df2:	f023 0202 	bic.w	r2, r3, #2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfa:	4927      	ldr	r1, [pc, #156]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e00:	4b25      	ldr	r3, [pc, #148]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e04:	4a24      	ldr	r2, [pc, #144]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001e06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e0c:	4b22      	ldr	r3, [pc, #136]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e10:	4a21      	ldr	r2, [pc, #132]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e18:	4b1f      	ldr	r3, [pc, #124]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001e1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001e24:	4b1c      	ldr	r3, [pc, #112]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e28:	4a1b      	ldr	r2, [pc, #108]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e30:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a18      	ldr	r2, [pc, #96]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001e36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff f966 	bl	800110c <HAL_GetTick>
 8001e40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e44:	f7ff f962 	bl	800110c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e090      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e56:	4b10      	ldr	r3, [pc, #64]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x670>
 8001e62:	e088      	b.n	8001f76 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e64:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0b      	ldr	r2, [pc, #44]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001e6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7ff f94c 	bl	800110c <HAL_GetTick>
 8001e74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e78:	f7ff f948 	bl	800110c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e076      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e8a:	4b03      	ldr	r3, [pc, #12]	@ (8001e98 <HAL_RCC_OscConfig+0x6c4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x6a4>
 8001e96:	e06e      	b.n	8001f76 <HAL_RCC_OscConfig+0x7a2>
 8001e98:	58024400 	.word	0x58024400
 8001e9c:	fffffc0c 	.word	0xfffffc0c
 8001ea0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ea4:	4b36      	ldr	r3, [pc, #216]	@ (8001f80 <HAL_RCC_OscConfig+0x7ac>)
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001eaa:	4b35      	ldr	r3, [pc, #212]	@ (8001f80 <HAL_RCC_OscConfig+0x7ac>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d031      	beq.n	8001f1c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f003 0203 	and.w	r2, r3, #3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d12a      	bne.n	8001f1c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d122      	bne.n	8001f1c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d11a      	bne.n	8001f1c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	0a5b      	lsrs	r3, r3, #9
 8001eea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d111      	bne.n	8001f1c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	0c1b      	lsrs	r3, r3, #16
 8001efc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f04:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d108      	bne.n	8001f1c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	0e1b      	lsrs	r3, r3, #24
 8001f0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f16:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e02b      	b.n	8001f78 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001f20:	4b17      	ldr	r3, [pc, #92]	@ (8001f80 <HAL_RCC_OscConfig+0x7ac>)
 8001f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f24:	08db      	lsrs	r3, r3, #3
 8001f26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f2a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d01f      	beq.n	8001f76 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001f36:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <HAL_RCC_OscConfig+0x7ac>)
 8001f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3a:	4a11      	ldr	r2, [pc, #68]	@ (8001f80 <HAL_RCC_OscConfig+0x7ac>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f42:	f7ff f8e3 	bl	800110c <HAL_GetTick>
 8001f46:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001f48:	bf00      	nop
 8001f4a:	f7ff f8df 	bl	800110c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d0f9      	beq.n	8001f4a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <HAL_RCC_OscConfig+0x7ac>)
 8001f58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f84 <HAL_RCC_OscConfig+0x7b0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f62:	00d2      	lsls	r2, r2, #3
 8001f64:	4906      	ldr	r1, [pc, #24]	@ (8001f80 <HAL_RCC_OscConfig+0x7ac>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001f6a:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <HAL_RCC_OscConfig+0x7ac>)
 8001f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6e:	4a04      	ldr	r2, [pc, #16]	@ (8001f80 <HAL_RCC_OscConfig+0x7ac>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3730      	adds	r7, #48	@ 0x30
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	58024400 	.word	0x58024400
 8001f84:	ffff0007 	.word	0xffff0007

08001f88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e19c      	b.n	80022d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b8a      	ldr	r3, [pc, #552]	@ (80021c8 <HAL_RCC_ClockConfig+0x240>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d910      	bls.n	8001fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b87      	ldr	r3, [pc, #540]	@ (80021c8 <HAL_RCC_ClockConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 020f 	bic.w	r2, r3, #15
 8001fb2:	4985      	ldr	r1, [pc, #532]	@ (80021c8 <HAL_RCC_ClockConfig+0x240>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b83      	ldr	r3, [pc, #524]	@ (80021c8 <HAL_RCC_ClockConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e184      	b.n	80022d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	4b7b      	ldr	r3, [pc, #492]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d908      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fe8:	4b78      	ldr	r3, [pc, #480]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	4975      	ldr	r1, [pc, #468]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d010      	beq.n	8002028 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	4b70      	ldr	r3, [pc, #448]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002012:	429a      	cmp	r2, r3
 8002014:	d908      	bls.n	8002028 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002016:	4b6d      	ldr	r3, [pc, #436]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	496a      	ldr	r1, [pc, #424]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 8002024:	4313      	orrs	r3, r2
 8002026:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	d010      	beq.n	8002056 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699a      	ldr	r2, [r3, #24]
 8002038:	4b64      	ldr	r3, [pc, #400]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002040:	429a      	cmp	r2, r3
 8002042:	d908      	bls.n	8002056 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002044:	4b61      	ldr	r3, [pc, #388]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	495e      	ldr	r1, [pc, #376]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 8002052:	4313      	orrs	r3, r2
 8002054:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b00      	cmp	r3, #0
 8002060:	d010      	beq.n	8002084 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69da      	ldr	r2, [r3, #28]
 8002066:	4b59      	ldr	r3, [pc, #356]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800206e:	429a      	cmp	r2, r3
 8002070:	d908      	bls.n	8002084 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002072:	4b56      	ldr	r3, [pc, #344]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	4953      	ldr	r1, [pc, #332]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 8002080:	4313      	orrs	r3, r2
 8002082:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d010      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	4b4d      	ldr	r3, [pc, #308]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	429a      	cmp	r2, r3
 800209e:	d908      	bls.n	80020b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a0:	4b4a      	ldr	r3, [pc, #296]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f023 020f 	bic.w	r2, r3, #15
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4947      	ldr	r1, [pc, #284]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d055      	beq.n	800216a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020be:	4b43      	ldr	r3, [pc, #268]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	4940      	ldr	r1, [pc, #256]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d107      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020d8:	4b3c      	ldr	r3, [pc, #240]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d121      	bne.n	8002128 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0f6      	b.n	80022d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020f0:	4b36      	ldr	r3, [pc, #216]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d115      	bne.n	8002128 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0ea      	b.n	80022d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d107      	bne.n	8002118 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002108:	4b30      	ldr	r3, [pc, #192]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d109      	bne.n	8002128 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0de      	b.n	80022d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002118:	4b2c      	ldr	r3, [pc, #176]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0d6      	b.n	80022d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002128:	4b28      	ldr	r3, [pc, #160]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	f023 0207 	bic.w	r2, r3, #7
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4925      	ldr	r1, [pc, #148]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 8002136:	4313      	orrs	r3, r2
 8002138:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800213a:	f7fe ffe7 	bl	800110c <HAL_GetTick>
 800213e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002140:	e00a      	b.n	8002158 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002142:	f7fe ffe3 	bl	800110c <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002150:	4293      	cmp	r3, r2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e0be      	b.n	80022d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002158:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	429a      	cmp	r2, r3
 8002168:	d1eb      	bne.n	8002142 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d010      	beq.n	8002198 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	4b14      	ldr	r3, [pc, #80]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	429a      	cmp	r2, r3
 8002184:	d208      	bcs.n	8002198 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002186:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f023 020f 	bic.w	r2, r3, #15
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	490e      	ldr	r1, [pc, #56]	@ (80021cc <HAL_RCC_ClockConfig+0x244>)
 8002194:	4313      	orrs	r3, r2
 8002196:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002198:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <HAL_RCC_ClockConfig+0x240>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 030f 	and.w	r3, r3, #15
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d214      	bcs.n	80021d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <HAL_RCC_ClockConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 020f 	bic.w	r2, r3, #15
 80021ae:	4906      	ldr	r1, [pc, #24]	@ (80021c8 <HAL_RCC_ClockConfig+0x240>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <HAL_RCC_ClockConfig+0x240>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e086      	b.n	80022d6 <HAL_RCC_ClockConfig+0x34e>
 80021c8:	52002000 	.word	0x52002000
 80021cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d010      	beq.n	80021fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	4b3f      	ldr	r3, [pc, #252]	@ (80022e0 <HAL_RCC_ClockConfig+0x358>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d208      	bcs.n	80021fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021ec:	4b3c      	ldr	r3, [pc, #240]	@ (80022e0 <HAL_RCC_ClockConfig+0x358>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	4939      	ldr	r1, [pc, #228]	@ (80022e0 <HAL_RCC_ClockConfig+0x358>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d010      	beq.n	800222c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	4b34      	ldr	r3, [pc, #208]	@ (80022e0 <HAL_RCC_ClockConfig+0x358>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002216:	429a      	cmp	r2, r3
 8002218:	d208      	bcs.n	800222c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800221a:	4b31      	ldr	r3, [pc, #196]	@ (80022e0 <HAL_RCC_ClockConfig+0x358>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	492e      	ldr	r1, [pc, #184]	@ (80022e0 <HAL_RCC_ClockConfig+0x358>)
 8002228:	4313      	orrs	r3, r2
 800222a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	d010      	beq.n	800225a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699a      	ldr	r2, [r3, #24]
 800223c:	4b28      	ldr	r3, [pc, #160]	@ (80022e0 <HAL_RCC_ClockConfig+0x358>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002244:	429a      	cmp	r2, r3
 8002246:	d208      	bcs.n	800225a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002248:	4b25      	ldr	r3, [pc, #148]	@ (80022e0 <HAL_RCC_ClockConfig+0x358>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	4922      	ldr	r1, [pc, #136]	@ (80022e0 <HAL_RCC_ClockConfig+0x358>)
 8002256:	4313      	orrs	r3, r2
 8002258:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0320 	and.w	r3, r3, #32
 8002262:	2b00      	cmp	r3, #0
 8002264:	d010      	beq.n	8002288 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	4b1d      	ldr	r3, [pc, #116]	@ (80022e0 <HAL_RCC_ClockConfig+0x358>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002272:	429a      	cmp	r2, r3
 8002274:	d208      	bcs.n	8002288 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002276:	4b1a      	ldr	r3, [pc, #104]	@ (80022e0 <HAL_RCC_ClockConfig+0x358>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	4917      	ldr	r1, [pc, #92]	@ (80022e0 <HAL_RCC_ClockConfig+0x358>)
 8002284:	4313      	orrs	r3, r2
 8002286:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002288:	f000 f834 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b14      	ldr	r3, [pc, #80]	@ (80022e0 <HAL_RCC_ClockConfig+0x358>)
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	0a1b      	lsrs	r3, r3, #8
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	4912      	ldr	r1, [pc, #72]	@ (80022e4 <HAL_RCC_ClockConfig+0x35c>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
 80022a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022a6:	4b0e      	ldr	r3, [pc, #56]	@ (80022e0 <HAL_RCC_ClockConfig+0x358>)
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	4a0d      	ldr	r2, [pc, #52]	@ (80022e4 <HAL_RCC_ClockConfig+0x35c>)
 80022b0:	5cd3      	ldrb	r3, [r2, r3]
 80022b2:	f003 031f 	and.w	r3, r3, #31
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
 80022bc:	4a0a      	ldr	r2, [pc, #40]	@ (80022e8 <HAL_RCC_ClockConfig+0x360>)
 80022be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022c0:	4a0a      	ldr	r2, [pc, #40]	@ (80022ec <HAL_RCC_ClockConfig+0x364>)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80022c6:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <HAL_RCC_ClockConfig+0x368>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe fed4 	bl	8001078 <HAL_InitTick>
 80022d0:	4603      	mov	r3, r0
 80022d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	58024400 	.word	0x58024400
 80022e4:	0800683c 	.word	0x0800683c
 80022e8:	24000020 	.word	0x24000020
 80022ec:	2400001c 	.word	0x2400001c
 80022f0:	24000024 	.word	0x24000024

080022f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	@ 0x24
 80022f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022fa:	4bb3      	ldr	r3, [pc, #716]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002302:	2b18      	cmp	r3, #24
 8002304:	f200 8155 	bhi.w	80025b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002308:	a201      	add	r2, pc, #4	@ (adr r2, 8002310 <HAL_RCC_GetSysClockFreq+0x1c>)
 800230a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230e:	bf00      	nop
 8002310:	08002375 	.word	0x08002375
 8002314:	080025b3 	.word	0x080025b3
 8002318:	080025b3 	.word	0x080025b3
 800231c:	080025b3 	.word	0x080025b3
 8002320:	080025b3 	.word	0x080025b3
 8002324:	080025b3 	.word	0x080025b3
 8002328:	080025b3 	.word	0x080025b3
 800232c:	080025b3 	.word	0x080025b3
 8002330:	0800239b 	.word	0x0800239b
 8002334:	080025b3 	.word	0x080025b3
 8002338:	080025b3 	.word	0x080025b3
 800233c:	080025b3 	.word	0x080025b3
 8002340:	080025b3 	.word	0x080025b3
 8002344:	080025b3 	.word	0x080025b3
 8002348:	080025b3 	.word	0x080025b3
 800234c:	080025b3 	.word	0x080025b3
 8002350:	080023a1 	.word	0x080023a1
 8002354:	080025b3 	.word	0x080025b3
 8002358:	080025b3 	.word	0x080025b3
 800235c:	080025b3 	.word	0x080025b3
 8002360:	080025b3 	.word	0x080025b3
 8002364:	080025b3 	.word	0x080025b3
 8002368:	080025b3 	.word	0x080025b3
 800236c:	080025b3 	.word	0x080025b3
 8002370:	080023a7 	.word	0x080023a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002374:	4b94      	ldr	r3, [pc, #592]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0320 	and.w	r3, r3, #32
 800237c:	2b00      	cmp	r3, #0
 800237e:	d009      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002380:	4b91      	ldr	r3, [pc, #580]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	08db      	lsrs	r3, r3, #3
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	4a90      	ldr	r2, [pc, #576]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800238c:	fa22 f303 	lsr.w	r3, r2, r3
 8002390:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002392:	e111      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002394:	4b8d      	ldr	r3, [pc, #564]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002396:	61bb      	str	r3, [r7, #24]
      break;
 8002398:	e10e      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800239a:	4b8d      	ldr	r3, [pc, #564]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800239c:	61bb      	str	r3, [r7, #24]
      break;
 800239e:	e10b      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80023a0:	4b8c      	ldr	r3, [pc, #560]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80023a2:	61bb      	str	r3, [r7, #24]
      break;
 80023a4:	e108      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023a6:	4b88      	ldr	r3, [pc, #544]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80023b0:	4b85      	ldr	r3, [pc, #532]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023bc:	4b82      	ldr	r3, [pc, #520]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80023c6:	4b80      	ldr	r3, [pc, #512]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ca:	08db      	lsrs	r3, r3, #3
 80023cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	ee07 3a90 	vmov	s15, r3
 80023da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80e1 	beq.w	80025ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	f000 8083 	beq.w	80024f8 <HAL_RCC_GetSysClockFreq+0x204>
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	f200 80a1 	bhi.w	800253c <HAL_RCC_GetSysClockFreq+0x248>
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x114>
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d056      	beq.n	80024b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002406:	e099      	b.n	800253c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002408:	4b6f      	ldr	r3, [pc, #444]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	2b00      	cmp	r3, #0
 8002412:	d02d      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002414:	4b6c      	ldr	r3, [pc, #432]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	08db      	lsrs	r3, r3, #3
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	4a6b      	ldr	r2, [pc, #428]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
 8002424:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	ee07 3a90 	vmov	s15, r3
 800242c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800243a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800243e:	4b62      	ldr	r3, [pc, #392]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002446:	ee07 3a90 	vmov	s15, r3
 800244a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800244e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002452:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80025d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800245a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800245e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800246e:	e087      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80025dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800247e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002482:	4b51      	ldr	r3, [pc, #324]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002492:	ed97 6a02 	vldr	s12, [r7, #8]
 8002496:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80025d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800249a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800249e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024b2:	e065      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80025e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024c6:	4b40      	ldr	r3, [pc, #256]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80025d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024f6:	e043      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002502:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80025e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800250a:	4b2f      	ldr	r3, [pc, #188]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002512:	ee07 3a90 	vmov	s15, r3
 8002516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800251a:	ed97 6a02 	vldr	s12, [r7, #8]
 800251e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80025d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800252a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800252e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002536:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800253a:	e021      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002546:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80025e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800254a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800254e:	4b1e      	ldr	r3, [pc, #120]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800255e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002562:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80025d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800256a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800256e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800257e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002580:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002584:	0a5b      	lsrs	r3, r3, #9
 8002586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800258a:	3301      	adds	r3, #1
 800258c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	ee07 3a90 	vmov	s15, r3
 8002594:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002598:	edd7 6a07 	vldr	s13, [r7, #28]
 800259c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a4:	ee17 3a90 	vmov	r3, s15
 80025a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80025aa:	e005      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61bb      	str	r3, [r7, #24]
      break;
 80025b0:	e002      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80025b2:	4b07      	ldr	r3, [pc, #28]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025b4:	61bb      	str	r3, [r7, #24]
      break;
 80025b6:	bf00      	nop
  }

  return sysclockfreq;
 80025b8:	69bb      	ldr	r3, [r7, #24]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	@ 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	58024400 	.word	0x58024400
 80025cc:	03d09000 	.word	0x03d09000
 80025d0:	003d0900 	.word	0x003d0900
 80025d4:	02faf080 	.word	0x02faf080
 80025d8:	46000000 	.word	0x46000000
 80025dc:	4c742400 	.word	0x4c742400
 80025e0:	4a742400 	.word	0x4a742400
 80025e4:	4c3ebc20 	.word	0x4c3ebc20

080025e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80025ee:	f7ff fe81 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 80025f2:	4602      	mov	r2, r0
 80025f4:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <HAL_RCC_GetHCLKFreq+0x50>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	490f      	ldr	r1, [pc, #60]	@ (800263c <HAL_RCC_GetHCLKFreq+0x54>)
 8002600:	5ccb      	ldrb	r3, [r1, r3]
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	fa22 f303 	lsr.w	r3, r2, r3
 800260a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800260c:	4b0a      	ldr	r3, [pc, #40]	@ (8002638 <HAL_RCC_GetHCLKFreq+0x50>)
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	4a09      	ldr	r2, [pc, #36]	@ (800263c <HAL_RCC_GetHCLKFreq+0x54>)
 8002616:	5cd3      	ldrb	r3, [r2, r3]
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	fa22 f303 	lsr.w	r3, r2, r3
 8002622:	4a07      	ldr	r2, [pc, #28]	@ (8002640 <HAL_RCC_GetHCLKFreq+0x58>)
 8002624:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002626:	4a07      	ldr	r2, [pc, #28]	@ (8002644 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800262c:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <HAL_RCC_GetHCLKFreq+0x58>)
 800262e:	681b      	ldr	r3, [r3, #0]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	58024400 	.word	0x58024400
 800263c:	0800683c 	.word	0x0800683c
 8002640:	24000020 	.word	0x24000020
 8002644:	2400001c 	.word	0x2400001c

08002648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800264c:	f7ff ffcc 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002650:	4602      	mov	r2, r0
 8002652:	4b06      	ldr	r3, [pc, #24]	@ (800266c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	4904      	ldr	r1, [pc, #16]	@ (8002670 <HAL_RCC_GetPCLK1Freq+0x28>)
 800265e:	5ccb      	ldrb	r3, [r1, r3]
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002668:	4618      	mov	r0, r3
 800266a:	bd80      	pop	{r7, pc}
 800266c:	58024400 	.word	0x58024400
 8002670:	0800683c 	.word	0x0800683c

08002674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002678:	f7ff ffb6 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 800267c:	4602      	mov	r2, r0
 800267e:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	0a1b      	lsrs	r3, r3, #8
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	4904      	ldr	r1, [pc, #16]	@ (800269c <HAL_RCC_GetPCLK2Freq+0x28>)
 800268a:	5ccb      	ldrb	r3, [r1, r3]
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002694:	4618      	mov	r0, r3
 8002696:	bd80      	pop	{r7, pc}
 8002698:	58024400 	.word	0x58024400
 800269c:	0800683c 	.word	0x0800683c

080026a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026a4:	b0c6      	sub	sp, #280	@ 0x118
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026ac:	2300      	movs	r3, #0
 80026ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80026c4:	2500      	movs	r5, #0
 80026c6:	ea54 0305 	orrs.w	r3, r4, r5
 80026ca:	d049      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80026cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80026d6:	d02f      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80026d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80026dc:	d828      	bhi.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80026de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026e2:	d01a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80026e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026e8:	d822      	bhi.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80026ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026f2:	d007      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026f4:	e01c      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026f6:	4bab      	ldr	r3, [pc, #684]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fa:	4aaa      	ldr	r2, [pc, #680]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002700:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002702:	e01a      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002708:	3308      	adds	r3, #8
 800270a:	2102      	movs	r1, #2
 800270c:	4618      	mov	r0, r3
 800270e:	f001 fc25 	bl	8003f5c <RCCEx_PLL2_Config>
 8002712:	4603      	mov	r3, r0
 8002714:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002718:	e00f      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800271a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800271e:	3328      	adds	r3, #40	@ 0x28
 8002720:	2102      	movs	r1, #2
 8002722:	4618      	mov	r0, r3
 8002724:	f001 fccc 	bl	80040c0 <RCCEx_PLL3_Config>
 8002728:	4603      	mov	r3, r0
 800272a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800272e:	e004      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002736:	e000      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800273a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10a      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002742:	4b98      	ldr	r3, [pc, #608]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002746:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800274a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800274e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002750:	4a94      	ldr	r2, [pc, #592]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002752:	430b      	orrs	r3, r1
 8002754:	6513      	str	r3, [r2, #80]	@ 0x50
 8002756:	e003      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002758:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800275c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002768:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800276c:	f04f 0900 	mov.w	r9, #0
 8002770:	ea58 0309 	orrs.w	r3, r8, r9
 8002774:	d047      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800277a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277c:	2b04      	cmp	r3, #4
 800277e:	d82a      	bhi.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002780:	a201      	add	r2, pc, #4	@ (adr r2, 8002788 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002786:	bf00      	nop
 8002788:	0800279d 	.word	0x0800279d
 800278c:	080027ab 	.word	0x080027ab
 8002790:	080027c1 	.word	0x080027c1
 8002794:	080027df 	.word	0x080027df
 8002798:	080027df 	.word	0x080027df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800279c:	4b81      	ldr	r3, [pc, #516]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800279e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a0:	4a80      	ldr	r2, [pc, #512]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027a8:	e01a      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027ae:	3308      	adds	r3, #8
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 fbd2 	bl	8003f5c <RCCEx_PLL2_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027be:	e00f      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027c4:	3328      	adds	r3, #40	@ 0x28
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f001 fc79 	bl	80040c0 <RCCEx_PLL3_Config>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027d4:	e004      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80027dc:	e000      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80027de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027e8:	4b6e      	ldr	r3, [pc, #440]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ec:	f023 0107 	bic.w	r1, r3, #7
 80027f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f6:	4a6b      	ldr	r2, [pc, #428]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027f8:	430b      	orrs	r3, r1
 80027fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80027fc:	e003      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002802:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8002812:	f04f 0b00 	mov.w	fp, #0
 8002816:	ea5a 030b 	orrs.w	r3, sl, fp
 800281a:	d05b      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800281c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002820:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002824:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002828:	d03b      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800282a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800282e:	d834      	bhi.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002830:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002834:	d037      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002836:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800283a:	d82e      	bhi.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800283c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002840:	d033      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002842:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002846:	d828      	bhi.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002848:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800284c:	d01a      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800284e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002852:	d822      	bhi.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002858:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800285c:	d007      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800285e:	e01c      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002860:	4b50      	ldr	r3, [pc, #320]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002864:	4a4f      	ldr	r2, [pc, #316]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002866:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800286a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800286c:	e01e      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800286e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002872:	3308      	adds	r3, #8
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f001 fb70 	bl	8003f5c <RCCEx_PLL2_Config>
 800287c:	4603      	mov	r3, r0
 800287e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002882:	e013      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002888:	3328      	adds	r3, #40	@ 0x28
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f001 fc17 	bl	80040c0 <RCCEx_PLL3_Config>
 8002892:	4603      	mov	r3, r0
 8002894:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002898:	e008      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80028a0:	e004      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80028a2:	bf00      	nop
 80028a4:	e002      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80028a6:	bf00      	nop
 80028a8:	e000      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80028aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10b      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80028b4:	4b3b      	ldr	r3, [pc, #236]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80028bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028c4:	4a37      	ldr	r2, [pc, #220]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028c6:	430b      	orrs	r3, r1
 80028c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ca:	e003      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80028d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80028d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80028e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80028e4:	2300      	movs	r3, #0
 80028e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80028ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80028ee:	460b      	mov	r3, r1
 80028f0:	4313      	orrs	r3, r2
 80028f2:	d05d      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80028f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80028fc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002900:	d03b      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002902:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002906:	d834      	bhi.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002908:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800290c:	d037      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800290e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002912:	d82e      	bhi.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002914:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002918:	d033      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800291a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800291e:	d828      	bhi.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002920:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002924:	d01a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002926:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800292a:	d822      	bhi.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002934:	d007      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002936:	e01c      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002938:	4b1a      	ldr	r3, [pc, #104]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	4a19      	ldr	r2, [pc, #100]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800293e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002944:	e01e      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800294a:	3308      	adds	r3, #8
 800294c:	2100      	movs	r1, #0
 800294e:	4618      	mov	r0, r3
 8002950:	f001 fb04 	bl	8003f5c <RCCEx_PLL2_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800295a:	e013      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800295c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002960:	3328      	adds	r3, #40	@ 0x28
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f001 fbab 	bl	80040c0 <RCCEx_PLL3_Config>
 800296a:	4603      	mov	r3, r0
 800296c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002970:	e008      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002978:	e004      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800297a:	bf00      	nop
 800297c:	e002      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800297e:	bf00      	nop
 8002980:	e000      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002984:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10d      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800298c:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800298e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002990:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002998:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800299c:	4a01      	ldr	r2, [pc, #4]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800299e:	430b      	orrs	r3, r1
 80029a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029a2:	e005      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80029a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80029ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80029b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80029bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80029c6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4313      	orrs	r3, r2
 80029ce:	d03a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80029d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d6:	2b30      	cmp	r3, #48	@ 0x30
 80029d8:	d01f      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80029da:	2b30      	cmp	r3, #48	@ 0x30
 80029dc:	d819      	bhi.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80029de:	2b20      	cmp	r3, #32
 80029e0:	d00c      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d815      	bhi.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d019      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	d111      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029ee:	4baa      	ldr	r3, [pc, #680]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f2:	4aa9      	ldr	r2, [pc, #676]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80029fa:	e011      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80029fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a00:	3308      	adds	r3, #8
 8002a02:	2102      	movs	r1, #2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f001 faa9 	bl	8003f5c <RCCEx_PLL2_Config>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002a10:	e006      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002a18:	e002      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002a1a:	bf00      	nop
 8002a1c:	e000      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10a      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002a28:	4b9b      	ldr	r3, [pc, #620]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a36:	4a98      	ldr	r2, [pc, #608]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a3c:	e003      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002a52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002a5c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002a60:	460b      	mov	r3, r1
 8002a62:	4313      	orrs	r3, r2
 8002a64:	d051      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a70:	d035      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8002a72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a76:	d82e      	bhi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002a78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a7c:	d031      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002a7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a82:	d828      	bhi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a88:	d01a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a8e:	d822      	bhi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a98:	d007      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8002a9a:	e01c      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a9c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa0:	4a7d      	ldr	r2, [pc, #500]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002aa8:	e01c      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002aae:	3308      	adds	r3, #8
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f001 fa52 	bl	8003f5c <RCCEx_PLL2_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002abe:	e011      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ac4:	3328      	adds	r3, #40	@ 0x28
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f001 faf9 	bl	80040c0 <RCCEx_PLL3_Config>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ad4:	e006      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002adc:	e002      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002ade:	bf00      	nop
 8002ae0:	e000      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10a      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002aec:	4b6a      	ldr	r3, [pc, #424]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002af0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afa:	4a67      	ldr	r2, [pc, #412]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002afc:	430b      	orrs	r3, r1
 8002afe:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b00:	e003      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002b06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b12:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002b16:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b20:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4313      	orrs	r3, r2
 8002b28:	d053      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b34:	d033      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002b36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b3a:	d82c      	bhi.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002b3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b40:	d02f      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8002b42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b46:	d826      	bhi.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002b48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b4c:	d02b      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002b4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b52:	d820      	bhi.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002b54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b58:	d012      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002b5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b5e:	d81a      	bhi.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d022      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b68:	d115      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b6e:	3308      	adds	r3, #8
 8002b70:	2101      	movs	r1, #1
 8002b72:	4618      	mov	r0, r3
 8002b74:	f001 f9f2 	bl	8003f5c <RCCEx_PLL2_Config>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b7e:	e015      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b84:	3328      	adds	r3, #40	@ 0x28
 8002b86:	2101      	movs	r1, #1
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f001 fa99 	bl	80040c0 <RCCEx_PLL3_Config>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b94:	e00a      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002b9c:	e006      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002b9e:	bf00      	nop
 8002ba0:	e004      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002ba2:	bf00      	nop
 8002ba4:	e002      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002ba6:	bf00      	nop
 8002ba8:	e000      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002bb4:	4b38      	ldr	r3, [pc, #224]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bb8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc2:	4a35      	ldr	r2, [pc, #212]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bc8:	e003      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002bce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bda:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002bde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002be2:	2300      	movs	r3, #0
 8002be4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002be8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002bec:	460b      	mov	r3, r1
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	d058      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bfe:	d033      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c04:	d82c      	bhi.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c0a:	d02f      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c10:	d826      	bhi.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002c12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002c16:	d02b      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002c18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002c1c:	d820      	bhi.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002c1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c22:	d012      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002c24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c28:	d81a      	bhi.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d022      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002c2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c32:	d115      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c38:	3308      	adds	r3, #8
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f001 f98d 	bl	8003f5c <RCCEx_PLL2_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c48:	e015      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c4e:	3328      	adds	r3, #40	@ 0x28
 8002c50:	2101      	movs	r1, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 fa34 	bl	80040c0 <RCCEx_PLL3_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c5e:	e00a      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002c66:	e006      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c68:	bf00      	nop
 8002c6a:	e004      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c6c:	bf00      	nop
 8002c6e:	e002      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c70:	bf00      	nop
 8002c72:	e000      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10e      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c7e:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c82:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002c8e:	4a02      	ldr	r2, [pc, #8]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c94:	e006      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002c96:	bf00      	nop
 8002c98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ca0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002cba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	d037      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cce:	d00e      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002cd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cd4:	d816      	bhi.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d018      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002cda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cde:	d111      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ce0:	4bc4      	ldr	r3, [pc, #784]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	4ac3      	ldr	r2, [pc, #780]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002cec:	e00f      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cf2:	3308      	adds	r3, #8
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f001 f930 	bl	8003f5c <RCCEx_PLL2_Config>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d02:	e004      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002d0a:	e000      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d16:	4bb7      	ldr	r3, [pc, #732]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d1a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d24:	4ab3      	ldr	r2, [pc, #716]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d26:	430b      	orrs	r3, r1
 8002d28:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d2a:	e003      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002d40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d44:	2300      	movs	r3, #0
 8002d46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4313      	orrs	r3, r2
 8002d52:	d039      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d81c      	bhi.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d64 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d64:	08002da1 	.word	0x08002da1
 8002d68:	08002d75 	.word	0x08002d75
 8002d6c:	08002d83 	.word	0x08002d83
 8002d70:	08002da1 	.word	0x08002da1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d74:	4b9f      	ldr	r3, [pc, #636]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d78:	4a9e      	ldr	r2, [pc, #632]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d80:	e00f      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d86:	3308      	adds	r3, #8
 8002d88:	2102      	movs	r1, #2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f001 f8e6 	bl	8003f5c <RCCEx_PLL2_Config>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d96:	e004      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002d9e:	e000      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002da2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10a      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002daa:	4b92      	ldr	r3, [pc, #584]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dae:	f023 0103 	bic.w	r1, r3, #3
 8002db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002db8:	4a8e      	ldr	r2, [pc, #568]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dbe:	e003      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002dc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002dde:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f000 8099 	beq.w	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dea:	4b83      	ldr	r3, [pc, #524]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a82      	ldr	r2, [pc, #520]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002df6:	f7fe f989 	bl	800110c <HAL_GetTick>
 8002dfa:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e00:	f7fe f984 	bl	800110c <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b64      	cmp	r3, #100	@ 0x64
 8002e0e:	d903      	bls.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002e16:	e005      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e18:	4b77      	ldr	r3, [pc, #476]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0ed      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002e24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d173      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e2c:	4b71      	ldr	r3, [pc, #452]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e38:	4053      	eors	r3, r2
 8002e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d015      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e42:	4b6c      	ldr	r3, [pc, #432]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e4a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e4e:	4b69      	ldr	r3, [pc, #420]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e52:	4a68      	ldr	r2, [pc, #416]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e58:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5a:	4b66      	ldr	r3, [pc, #408]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5e:	4a65      	ldr	r2, [pc, #404]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e64:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e66:	4a63      	ldr	r2, [pc, #396]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e6c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e7a:	d118      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7fe f946 	bl	800110c <HAL_GetTick>
 8002e80:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e84:	e00d      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e86:	f7fe f941 	bl	800110c <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002e90:	1ad2      	subs	r2, r2, r3
 8002e92:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d903      	bls.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8002ea0:	e005      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ea2:	4b54      	ldr	r3, [pc, #336]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0eb      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002eae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d129      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ec2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ec6:	d10e      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002ec8:	4b4a      	ldr	r3, [pc, #296]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ed4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ed8:	091a      	lsrs	r2, r3, #4
 8002eda:	4b48      	ldr	r3, [pc, #288]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	4a45      	ldr	r2, [pc, #276]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6113      	str	r3, [r2, #16]
 8002ee4:	e005      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002ee6:	4b43      	ldr	r3, [pc, #268]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	4a42      	ldr	r2, [pc, #264]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002eec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002ef0:	6113      	str	r3, [r2, #16]
 8002ef2:	4b40      	ldr	r3, [pc, #256]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ef4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002efa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f02:	4a3c      	ldr	r2, [pc, #240]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f04:	430b      	orrs	r3, r1
 8002f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f08:	e008      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8002f12:	e003      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f002 0301 	and.w	r3, r2, #1
 8002f28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002f32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002f36:	460b      	mov	r3, r1
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f000 808f 	beq.w	800305c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f44:	2b28      	cmp	r3, #40	@ 0x28
 8002f46:	d871      	bhi.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002f48:	a201      	add	r2, pc, #4	@ (adr r2, 8002f50 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4e:	bf00      	nop
 8002f50:	08003035 	.word	0x08003035
 8002f54:	0800302d 	.word	0x0800302d
 8002f58:	0800302d 	.word	0x0800302d
 8002f5c:	0800302d 	.word	0x0800302d
 8002f60:	0800302d 	.word	0x0800302d
 8002f64:	0800302d 	.word	0x0800302d
 8002f68:	0800302d 	.word	0x0800302d
 8002f6c:	0800302d 	.word	0x0800302d
 8002f70:	08003001 	.word	0x08003001
 8002f74:	0800302d 	.word	0x0800302d
 8002f78:	0800302d 	.word	0x0800302d
 8002f7c:	0800302d 	.word	0x0800302d
 8002f80:	0800302d 	.word	0x0800302d
 8002f84:	0800302d 	.word	0x0800302d
 8002f88:	0800302d 	.word	0x0800302d
 8002f8c:	0800302d 	.word	0x0800302d
 8002f90:	08003017 	.word	0x08003017
 8002f94:	0800302d 	.word	0x0800302d
 8002f98:	0800302d 	.word	0x0800302d
 8002f9c:	0800302d 	.word	0x0800302d
 8002fa0:	0800302d 	.word	0x0800302d
 8002fa4:	0800302d 	.word	0x0800302d
 8002fa8:	0800302d 	.word	0x0800302d
 8002fac:	0800302d 	.word	0x0800302d
 8002fb0:	08003035 	.word	0x08003035
 8002fb4:	0800302d 	.word	0x0800302d
 8002fb8:	0800302d 	.word	0x0800302d
 8002fbc:	0800302d 	.word	0x0800302d
 8002fc0:	0800302d 	.word	0x0800302d
 8002fc4:	0800302d 	.word	0x0800302d
 8002fc8:	0800302d 	.word	0x0800302d
 8002fcc:	0800302d 	.word	0x0800302d
 8002fd0:	08003035 	.word	0x08003035
 8002fd4:	0800302d 	.word	0x0800302d
 8002fd8:	0800302d 	.word	0x0800302d
 8002fdc:	0800302d 	.word	0x0800302d
 8002fe0:	0800302d 	.word	0x0800302d
 8002fe4:	0800302d 	.word	0x0800302d
 8002fe8:	0800302d 	.word	0x0800302d
 8002fec:	0800302d 	.word	0x0800302d
 8002ff0:	08003035 	.word	0x08003035
 8002ff4:	58024400 	.word	0x58024400
 8002ff8:	58024800 	.word	0x58024800
 8002ffc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003004:	3308      	adds	r3, #8
 8003006:	2101      	movs	r1, #1
 8003008:	4618      	mov	r0, r3
 800300a:	f000 ffa7 	bl	8003f5c <RCCEx_PLL2_Config>
 800300e:	4603      	mov	r3, r0
 8003010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003014:	e00f      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800301a:	3328      	adds	r3, #40	@ 0x28
 800301c:	2101      	movs	r1, #1
 800301e:	4618      	mov	r0, r3
 8003020:	f001 f84e 	bl	80040c0 <RCCEx_PLL3_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800302a:	e004      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003032:	e000      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003036:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800303e:	4bbf      	ldr	r3, [pc, #764]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003042:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800304a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800304c:	4abb      	ldr	r2, [pc, #748]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800304e:	430b      	orrs	r3, r1
 8003050:	6553      	str	r3, [r2, #84]	@ 0x54
 8003052:	e003      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003054:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003058:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800305c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	f002 0302 	and.w	r3, r2, #2
 8003068:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800306c:	2300      	movs	r3, #0
 800306e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003072:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003076:	460b      	mov	r3, r1
 8003078:	4313      	orrs	r3, r2
 800307a:	d041      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800307c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003082:	2b05      	cmp	r3, #5
 8003084:	d824      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003086:	a201      	add	r2, pc, #4	@ (adr r2, 800308c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308c:	080030d9 	.word	0x080030d9
 8003090:	080030a5 	.word	0x080030a5
 8003094:	080030bb 	.word	0x080030bb
 8003098:	080030d9 	.word	0x080030d9
 800309c:	080030d9 	.word	0x080030d9
 80030a0:	080030d9 	.word	0x080030d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030a8:	3308      	adds	r3, #8
 80030aa:	2101      	movs	r1, #1
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 ff55 	bl	8003f5c <RCCEx_PLL2_Config>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80030b8:	e00f      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030be:	3328      	adds	r3, #40	@ 0x28
 80030c0:	2101      	movs	r1, #1
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fffc 	bl	80040c0 <RCCEx_PLL3_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80030ce:	e004      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80030d6:	e000      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80030d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10a      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80030e2:	4b96      	ldr	r3, [pc, #600]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80030e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e6:	f023 0107 	bic.w	r1, r3, #7
 80030ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f0:	4a92      	ldr	r2, [pc, #584]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80030f2:	430b      	orrs	r3, r1
 80030f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80030f6:	e003      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003108:	f002 0304 	and.w	r3, r2, #4
 800310c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003110:	2300      	movs	r3, #0
 8003112:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003116:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800311a:	460b      	mov	r3, r1
 800311c:	4313      	orrs	r3, r2
 800311e:	d044      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003128:	2b05      	cmp	r3, #5
 800312a:	d825      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800312c:	a201      	add	r2, pc, #4	@ (adr r2, 8003134 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003132:	bf00      	nop
 8003134:	08003181 	.word	0x08003181
 8003138:	0800314d 	.word	0x0800314d
 800313c:	08003163 	.word	0x08003163
 8003140:	08003181 	.word	0x08003181
 8003144:	08003181 	.word	0x08003181
 8003148:	08003181 	.word	0x08003181
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800314c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003150:	3308      	adds	r3, #8
 8003152:	2101      	movs	r1, #1
 8003154:	4618      	mov	r0, r3
 8003156:	f000 ff01 	bl	8003f5c <RCCEx_PLL2_Config>
 800315a:	4603      	mov	r3, r0
 800315c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003160:	e00f      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003166:	3328      	adds	r3, #40	@ 0x28
 8003168:	2101      	movs	r1, #1
 800316a:	4618      	mov	r0, r3
 800316c:	f000 ffa8 	bl	80040c0 <RCCEx_PLL3_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003176:	e004      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800317e:	e000      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003182:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10b      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800318a:	4b6c      	ldr	r3, [pc, #432]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800318c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318e:	f023 0107 	bic.w	r1, r3, #7
 8003192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319a:	4a68      	ldr	r2, [pc, #416]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800319c:	430b      	orrs	r3, r1
 800319e:	6593      	str	r3, [r2, #88]	@ 0x58
 80031a0:	e003      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	f002 0320 	and.w	r3, r2, #32
 80031b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031ba:	2300      	movs	r3, #0
 80031bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80031c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4313      	orrs	r3, r2
 80031c8:	d055      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80031ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031d6:	d033      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80031d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031dc:	d82c      	bhi.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80031de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e2:	d02f      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80031e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e8:	d826      	bhi.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80031ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031ee:	d02b      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80031f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031f4:	d820      	bhi.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80031f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031fa:	d012      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80031fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003200:	d81a      	bhi.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003202:	2b00      	cmp	r3, #0
 8003204:	d022      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003206:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800320a:	d115      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800320c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003210:	3308      	adds	r3, #8
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fea1 	bl	8003f5c <RCCEx_PLL2_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003220:	e015      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003226:	3328      	adds	r3, #40	@ 0x28
 8003228:	2102      	movs	r1, #2
 800322a:	4618      	mov	r0, r3
 800322c:	f000 ff48 	bl	80040c0 <RCCEx_PLL3_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003236:	e00a      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800323e:	e006      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003240:	bf00      	nop
 8003242:	e004      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003244:	bf00      	nop
 8003246:	e002      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003248:	bf00      	nop
 800324a:	e000      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800324c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800324e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10b      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003256:	4b39      	ldr	r3, [pc, #228]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800325e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003262:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003266:	4a35      	ldr	r2, [pc, #212]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003268:	430b      	orrs	r3, r1
 800326a:	6553      	str	r3, [r2, #84]	@ 0x54
 800326c:	e003      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003272:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003282:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003286:	2300      	movs	r3, #0
 8003288:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800328c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003290:	460b      	mov	r3, r1
 8003292:	4313      	orrs	r3, r2
 8003294:	d058      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800329a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800329e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80032a2:	d033      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80032a4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80032a8:	d82c      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80032aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ae:	d02f      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80032b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b4:	d826      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80032b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032ba:	d02b      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80032bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032c0:	d820      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80032c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032c6:	d012      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80032c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032cc:	d81a      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d022      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80032d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d6:	d115      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032dc:	3308      	adds	r3, #8
 80032de:	2100      	movs	r1, #0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fe3b 	bl	8003f5c <RCCEx_PLL2_Config>
 80032e6:	4603      	mov	r3, r0
 80032e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80032ec:	e015      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032f2:	3328      	adds	r3, #40	@ 0x28
 80032f4:	2102      	movs	r1, #2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fee2 	bl	80040c0 <RCCEx_PLL3_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003302:	e00a      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800330a:	e006      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800330c:	bf00      	nop
 800330e:	e004      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003310:	bf00      	nop
 8003312:	e002      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003314:	bf00      	nop
 8003316:	e000      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800331a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10e      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003322:	4b06      	ldr	r3, [pc, #24]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003326:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800332a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800332e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003332:	4a02      	ldr	r2, [pc, #8]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003334:	430b      	orrs	r3, r1
 8003336:	6593      	str	r3, [r2, #88]	@ 0x58
 8003338:	e006      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800333a:	bf00      	nop
 800333c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003344:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800334c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003350:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003354:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003358:	2300      	movs	r3, #0
 800335a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800335e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003362:	460b      	mov	r3, r1
 8003364:	4313      	orrs	r3, r2
 8003366:	d055      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800336c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003370:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003374:	d033      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003376:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800337a:	d82c      	bhi.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800337c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003380:	d02f      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003382:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003386:	d826      	bhi.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003388:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800338c:	d02b      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800338e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003392:	d820      	bhi.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003394:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003398:	d012      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800339a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800339e:	d81a      	bhi.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d022      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80033a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033a8:	d115      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ae:	3308      	adds	r3, #8
 80033b0:	2100      	movs	r1, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fdd2 	bl	8003f5c <RCCEx_PLL2_Config>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80033be:	e015      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033c4:	3328      	adds	r3, #40	@ 0x28
 80033c6:	2102      	movs	r1, #2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fe79 	bl	80040c0 <RCCEx_PLL3_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80033d4:	e00a      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033dc:	e006      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80033de:	bf00      	nop
 80033e0:	e004      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80033e2:	bf00      	nop
 80033e4:	e002      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80033e6:	bf00      	nop
 80033e8:	e000      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80033ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10b      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80033f4:	4ba0      	ldr	r3, [pc, #640]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80033fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003400:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003404:	4a9c      	ldr	r2, [pc, #624]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003406:	430b      	orrs	r3, r1
 8003408:	6593      	str	r3, [r2, #88]	@ 0x58
 800340a:	e003      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003410:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	f002 0308 	and.w	r3, r2, #8
 8003420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800342a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800342e:	460b      	mov	r3, r1
 8003430:	4313      	orrs	r3, r2
 8003432:	d01e      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800343c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003440:	d10c      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003446:	3328      	adds	r3, #40	@ 0x28
 8003448:	2102      	movs	r1, #2
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fe38 	bl	80040c0 <RCCEx_PLL3_Config>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800345c:	4b86      	ldr	r3, [pc, #536]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800345e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003460:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003468:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800346c:	4a82      	ldr	r2, [pc, #520]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800346e:	430b      	orrs	r3, r1
 8003470:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347a:	f002 0310 	and.w	r3, r2, #16
 800347e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003482:	2300      	movs	r3, #0
 8003484:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003488:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800348c:	460b      	mov	r3, r1
 800348e:	4313      	orrs	r3, r2
 8003490:	d01e      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800349a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800349e:	d10c      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034a4:	3328      	adds	r3, #40	@ 0x28
 80034a6:	2102      	movs	r1, #2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fe09 	bl	80040c0 <RCCEx_PLL3_Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80034bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80034c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ca:	4a6b      	ldr	r2, [pc, #428]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80034dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034de:	2300      	movs	r3, #0
 80034e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034e2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80034e6:	460b      	mov	r3, r1
 80034e8:	4313      	orrs	r3, r2
 80034ea:	d03e      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80034ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80034f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034f8:	d022      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80034fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034fe:	d81b      	bhi.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003508:	d00b      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800350a:	e015      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800350c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003510:	3308      	adds	r3, #8
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fd21 	bl	8003f5c <RCCEx_PLL2_Config>
 800351a:	4603      	mov	r3, r0
 800351c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003520:	e00f      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003526:	3328      	adds	r3, #40	@ 0x28
 8003528:	2102      	movs	r1, #2
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fdc8 	bl	80040c0 <RCCEx_PLL3_Config>
 8003530:	4603      	mov	r3, r0
 8003532:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003536:	e004      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800353e:	e000      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003542:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10b      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800354a:	4b4b      	ldr	r3, [pc, #300]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003556:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800355a:	4a47      	ldr	r2, [pc, #284]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800355c:	430b      	orrs	r3, r1
 800355e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003560:	e003      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003562:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003566:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800356a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800356e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003572:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003576:	673b      	str	r3, [r7, #112]	@ 0x70
 8003578:	2300      	movs	r3, #0
 800357a:	677b      	str	r3, [r7, #116]	@ 0x74
 800357c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003580:	460b      	mov	r3, r1
 8003582:	4313      	orrs	r3, r2
 8003584:	d03b      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800358a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800358e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003592:	d01f      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003594:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003598:	d818      	bhi.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800359a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800359e:	d003      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80035a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035a4:	d007      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80035a6:	e011      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a8:	4b33      	ldr	r3, [pc, #204]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80035aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ac:	4a32      	ldr	r2, [pc, #200]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80035ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80035b4:	e00f      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ba:	3328      	adds	r3, #40	@ 0x28
 80035bc:	2101      	movs	r1, #1
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fd7e 	bl	80040c0 <RCCEx_PLL3_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80035ca:	e004      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035d2:	e000      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80035d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10b      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035de:	4b26      	ldr	r3, [pc, #152]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80035e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80035e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ee:	4a22      	ldr	r2, [pc, #136]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80035f4:	e003      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80035fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003606:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800360a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800360c:	2300      	movs	r3, #0
 800360e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003610:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003614:	460b      	mov	r3, r1
 8003616:	4313      	orrs	r3, r2
 8003618:	d034      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800361a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800361e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003628:	d007      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800362a:	e011      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800362c:	4b12      	ldr	r3, [pc, #72]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800362e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003630:	4a11      	ldr	r2, [pc, #68]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003636:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003638:	e00e      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800363a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800363e:	3308      	adds	r3, #8
 8003640:	2102      	movs	r1, #2
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fc8a 	bl	8003f5c <RCCEx_PLL2_Config>
 8003648:	4603      	mov	r3, r0
 800364a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800364e:	e003      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10d      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003660:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003664:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800366c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800366e:	4a02      	ldr	r2, [pc, #8]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003670:	430b      	orrs	r3, r1
 8003672:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003674:	e006      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003676:	bf00      	nop
 8003678:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003680:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003690:	663b      	str	r3, [r7, #96]	@ 0x60
 8003692:	2300      	movs	r3, #0
 8003694:	667b      	str	r3, [r7, #100]	@ 0x64
 8003696:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800369a:	460b      	mov	r3, r1
 800369c:	4313      	orrs	r3, r2
 800369e:	d00c      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a4:	3328      	adds	r3, #40	@ 0x28
 80036a6:	2102      	movs	r1, #2
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fd09 	bl	80040c0 <RCCEx_PLL3_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80036ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80036c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036c8:	2300      	movs	r3, #0
 80036ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036cc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80036d0:	460b      	mov	r3, r1
 80036d2:	4313      	orrs	r3, r2
 80036d4:	d036      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80036d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036e0:	d018      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80036e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036e6:	d811      	bhi.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80036e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036ec:	d014      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80036ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036f2:	d80b      	bhi.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d011      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80036f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036fc:	d106      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036fe:	4bb7      	ldr	r3, [pc, #732]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003702:	4ab6      	ldr	r2, [pc, #728]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003708:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800370a:	e008      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003712:	e004      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003714:	bf00      	nop
 8003716:	e002      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003718:	bf00      	nop
 800371a:	e000      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800371c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800371e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10a      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003726:	4bad      	ldr	r3, [pc, #692]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800372e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003732:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003734:	4aa9      	ldr	r2, [pc, #676]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003736:	430b      	orrs	r3, r1
 8003738:	6553      	str	r3, [r2, #84]	@ 0x54
 800373a:	e003      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003740:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003750:	653b      	str	r3, [r7, #80]	@ 0x50
 8003752:	2300      	movs	r3, #0
 8003754:	657b      	str	r3, [r7, #84]	@ 0x54
 8003756:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800375a:	460b      	mov	r3, r1
 800375c:	4313      	orrs	r3, r2
 800375e:	d009      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003760:	4b9e      	ldr	r3, [pc, #632]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003764:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800376c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376e:	4a9b      	ldr	r2, [pc, #620]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003770:	430b      	orrs	r3, r1
 8003772:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003780:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003782:	2300      	movs	r3, #0
 8003784:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003786:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800378a:	460b      	mov	r3, r1
 800378c:	4313      	orrs	r3, r2
 800378e:	d009      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003790:	4b92      	ldr	r3, [pc, #584]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003794:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800379c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800379e:	4a8f      	ldr	r2, [pc, #572]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80037b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80037b2:	2300      	movs	r3, #0
 80037b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037b6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80037ba:	460b      	mov	r3, r1
 80037bc:	4313      	orrs	r3, r2
 80037be:	d00e      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037c0:	4b86      	ldr	r3, [pc, #536]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	4a85      	ldr	r2, [pc, #532]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80037c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80037ca:	6113      	str	r3, [r2, #16]
 80037cc:	4b83      	ldr	r3, [pc, #524]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80037ce:	6919      	ldr	r1, [r3, #16]
 80037d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80037d8:	4a80      	ldr	r2, [pc, #512]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80037da:	430b      	orrs	r3, r1
 80037dc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80037ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037ec:	2300      	movs	r3, #0
 80037ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037f0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80037f4:	460b      	mov	r3, r1
 80037f6:	4313      	orrs	r3, r2
 80037f8:	d009      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80037fa:	4b78      	ldr	r3, [pc, #480]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80037fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003808:	4a74      	ldr	r2, [pc, #464]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800380a:	430b      	orrs	r3, r1
 800380c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800380e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800381a:	633b      	str	r3, [r7, #48]	@ 0x30
 800381c:	2300      	movs	r3, #0
 800381e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003820:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003824:	460b      	mov	r3, r1
 8003826:	4313      	orrs	r3, r2
 8003828:	d00a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800382a:	4b6c      	ldr	r3, [pc, #432]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800382c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383a:	4a68      	ldr	r2, [pc, #416]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800383c:	430b      	orrs	r3, r1
 800383e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	2100      	movs	r1, #0
 800384a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003852:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003856:	460b      	mov	r3, r1
 8003858:	4313      	orrs	r3, r2
 800385a:	d011      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800385c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003860:	3308      	adds	r3, #8
 8003862:	2100      	movs	r1, #0
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fb79 	bl	8003f5c <RCCEx_PLL2_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800387c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	2100      	movs	r1, #0
 800388a:	6239      	str	r1, [r7, #32]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	627b      	str	r3, [r7, #36]	@ 0x24
 8003892:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003896:	460b      	mov	r3, r1
 8003898:	4313      	orrs	r3, r2
 800389a:	d011      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800389c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038a0:	3308      	adds	r3, #8
 80038a2:	2101      	movs	r1, #1
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fb59 	bl	8003f5c <RCCEx_PLL2_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80038b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80038c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	2100      	movs	r1, #0
 80038ca:	61b9      	str	r1, [r7, #24]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80038d6:	460b      	mov	r3, r1
 80038d8:	4313      	orrs	r3, r2
 80038da:	d011      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038e0:	3308      	adds	r3, #8
 80038e2:	2102      	movs	r1, #2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fb39 	bl	8003f5c <RCCEx_PLL2_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80038f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	2100      	movs	r1, #0
 800390a:	6139      	str	r1, [r7, #16]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	617b      	str	r3, [r7, #20]
 8003912:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003916:	460b      	mov	r3, r1
 8003918:	4313      	orrs	r3, r2
 800391a:	d011      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800391c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003920:	3328      	adds	r3, #40	@ 0x28
 8003922:	2100      	movs	r1, #0
 8003924:	4618      	mov	r0, r3
 8003926:	f000 fbcb 	bl	80040c0 <RCCEx_PLL3_Config>
 800392a:	4603      	mov	r3, r0
 800392c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8003930:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003938:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800393c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	2100      	movs	r1, #0
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003956:	460b      	mov	r3, r1
 8003958:	4313      	orrs	r3, r2
 800395a:	d011      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800395c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003960:	3328      	adds	r3, #40	@ 0x28
 8003962:	2101      	movs	r1, #1
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fbab 	bl	80040c0 <RCCEx_PLL3_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003970:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003978:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800397c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	2100      	movs	r1, #0
 800398a:	6039      	str	r1, [r7, #0]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	607b      	str	r3, [r7, #4]
 8003992:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003996:	460b      	mov	r3, r1
 8003998:	4313      	orrs	r3, r2
 800399a:	d011      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800399c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039a0:	3328      	adds	r3, #40	@ 0x28
 80039a2:	2102      	movs	r1, #2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fb8b 	bl	80040c0 <RCCEx_PLL3_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80039b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80039c0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e000      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80039d4:	46bd      	mov	sp, r7
 80039d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039da:	bf00      	nop
 80039dc:	58024400 	.word	0x58024400

080039e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80039e4:	f7fe fe00 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b06      	ldr	r3, [pc, #24]	@ (8003a04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	4904      	ldr	r1, [pc, #16]	@ (8003a08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	58024400 	.word	0x58024400
 8003a08:	0800683c 	.word	0x0800683c

08003a0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b089      	sub	sp, #36	@ 0x24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a14:	4ba1      	ldr	r3, [pc, #644]	@ (8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003a1e:	4b9f      	ldr	r3, [pc, #636]	@ (8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a22:	0b1b      	lsrs	r3, r3, #12
 8003a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003a2a:	4b9c      	ldr	r3, [pc, #624]	@ (8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003a36:	4b99      	ldr	r3, [pc, #612]	@ (8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a3a:	08db      	lsrs	r3, r3, #3
 8003a3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	ee07 3a90 	vmov	s15, r3
 8003a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 8111 	beq.w	8003c7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	f000 8083 	beq.w	8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	f200 80a1 	bhi.w	8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d056      	beq.n	8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003a76:	e099      	b.n	8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a78:	4b88      	ldr	r3, [pc, #544]	@ (8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d02d      	beq.n	8003ae0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a84:	4b85      	ldr	r3, [pc, #532]	@ (8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	08db      	lsrs	r3, r3, #3
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	4a84      	ldr	r2, [pc, #528]	@ (8003ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
 8003a94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	ee07 3a90 	vmov	s15, r3
 8003a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aae:	4b7b      	ldr	r3, [pc, #492]	@ (8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ac2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ada:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003ade:	e087      	b.n	8003bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	ee07 3a90 	vmov	s15, r3
 8003ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af2:	4b6a      	ldr	r3, [pc, #424]	@ (8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b22:	e065      	b.n	8003bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003cac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b36:	4b59      	ldr	r3, [pc, #356]	@ (8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b66:	e043      	b.n	8003bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7a:	4b48      	ldr	r3, [pc, #288]	@ (8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003baa:	e021      	b.n	8003bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003cac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bbe:	4b37      	ldr	r3, [pc, #220]	@ (8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bd2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf4:	0a5b      	lsrs	r3, r3, #9
 8003bf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c16:	ee17 2a90 	vmov	r2, s15
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c22:	0c1b      	lsrs	r3, r3, #16
 8003c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c28:	ee07 3a90 	vmov	s15, r3
 8003c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c44:	ee17 2a90 	vmov	r2, s15
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003c4c:	4b13      	ldr	r3, [pc, #76]	@ (8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c50:	0e1b      	lsrs	r3, r3, #24
 8003c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c56:	ee07 3a90 	vmov	s15, r3
 8003c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c72:	ee17 2a90 	vmov	r2, s15
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c7a:	e008      	b.n	8003c8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	609a      	str	r2, [r3, #8]
}
 8003c8e:	bf00      	nop
 8003c90:	3724      	adds	r7, #36	@ 0x24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	58024400 	.word	0x58024400
 8003ca0:	03d09000 	.word	0x03d09000
 8003ca4:	46000000 	.word	0x46000000
 8003ca8:	4c742400 	.word	0x4c742400
 8003cac:	4a742400 	.word	0x4a742400
 8003cb0:	4c3ebc20 	.word	0x4c3ebc20

08003cb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b089      	sub	sp, #36	@ 0x24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cbc:	4ba1      	ldr	r3, [pc, #644]	@ (8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003cc6:	4b9f      	ldr	r3, [pc, #636]	@ (8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cca:	0d1b      	lsrs	r3, r3, #20
 8003ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003cd2:	4b9c      	ldr	r3, [pc, #624]	@ (8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd6:	0a1b      	lsrs	r3, r3, #8
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003cde:	4b99      	ldr	r3, [pc, #612]	@ (8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce2:	08db      	lsrs	r3, r3, #3
 8003ce4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	fb02 f303 	mul.w	r3, r2, r3
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8111 	beq.w	8003f24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	f000 8083 	beq.w	8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	f200 80a1 	bhi.w	8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d056      	beq.n	8003dcc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003d1e:	e099      	b.n	8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d20:	4b88      	ldr	r3, [pc, #544]	@ (8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d02d      	beq.n	8003d88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d2c:	4b85      	ldr	r3, [pc, #532]	@ (8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	08db      	lsrs	r3, r3, #3
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	4a84      	ldr	r2, [pc, #528]	@ (8003f48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	ee07 3a90 	vmov	s15, r3
 8003d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d56:	4b7b      	ldr	r3, [pc, #492]	@ (8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d86:	e087      	b.n	8003e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dca:	e065      	b.n	8003e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dde:	4b59      	ldr	r3, [pc, #356]	@ (8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003df2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e0e:	e043      	b.n	8003e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e22:	4b48      	ldr	r3, [pc, #288]	@ (8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e52:	e021      	b.n	8003e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e66:	4b37      	ldr	r3, [pc, #220]	@ (8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003e98:	4b2a      	ldr	r3, [pc, #168]	@ (8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	0a5b      	lsrs	r3, r3, #9
 8003e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ebe:	ee17 2a90 	vmov	r2, s15
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	0c1b      	lsrs	r3, r3, #16
 8003ecc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ed0:	ee07 3a90 	vmov	s15, r3
 8003ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003edc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eec:	ee17 2a90 	vmov	r2, s15
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003ef4:	4b13      	ldr	r3, [pc, #76]	@ (8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	0e1b      	lsrs	r3, r3, #24
 8003efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f1a:	ee17 2a90 	vmov	r2, s15
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003f22:	e008      	b.n	8003f36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	609a      	str	r2, [r3, #8]
}
 8003f36:	bf00      	nop
 8003f38:	3724      	adds	r7, #36	@ 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	58024400 	.word	0x58024400
 8003f48:	03d09000 	.word	0x03d09000
 8003f4c:	46000000 	.word	0x46000000
 8003f50:	4c742400 	.word	0x4c742400
 8003f54:	4a742400 	.word	0x4a742400
 8003f58:	4c3ebc20 	.word	0x4c3ebc20

08003f5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f6a:	4b53      	ldr	r3, [pc, #332]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d101      	bne.n	8003f7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e099      	b.n	80040ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f7a:	4b4f      	ldr	r3, [pc, #316]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a4e      	ldr	r2, [pc, #312]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8003f80:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f86:	f7fd f8c1 	bl	800110c <HAL_GetTick>
 8003f8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f8c:	e008      	b.n	8003fa0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f8e:	f7fd f8bd 	bl	800110c <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e086      	b.n	80040ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fa0:	4b45      	ldr	r3, [pc, #276]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1f0      	bne.n	8003f8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003fac:	4b42      	ldr	r3, [pc, #264]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8003fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	031b      	lsls	r3, r3, #12
 8003fba:	493f      	ldr	r1, [pc, #252]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	628b      	str	r3, [r1, #40]	@ 0x28
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	025b      	lsls	r3, r3, #9
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	041b      	lsls	r3, r3, #16
 8003fde:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	061b      	lsls	r3, r3, #24
 8003fec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ff0:	4931      	ldr	r1, [pc, #196]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ff6:	4b30      	ldr	r3, [pc, #192]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8003ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	492d      	ldr	r1, [pc, #180]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8004004:	4313      	orrs	r3, r2
 8004006:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004008:	4b2b      	ldr	r3, [pc, #172]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	f023 0220 	bic.w	r2, r3, #32
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	4928      	ldr	r1, [pc, #160]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8004016:	4313      	orrs	r3, r2
 8004018:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800401a:	4b27      	ldr	r3, [pc, #156]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 800401c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401e:	4a26      	ldr	r2, [pc, #152]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8004020:	f023 0310 	bic.w	r3, r3, #16
 8004024:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004026:	4b24      	ldr	r3, [pc, #144]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8004028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800402a:	4b24      	ldr	r3, [pc, #144]	@ (80040bc <RCCEx_PLL2_Config+0x160>)
 800402c:	4013      	ands	r3, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	69d2      	ldr	r2, [r2, #28]
 8004032:	00d2      	lsls	r2, r2, #3
 8004034:	4920      	ldr	r1, [pc, #128]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8004036:	4313      	orrs	r3, r2
 8004038:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800403a:	4b1f      	ldr	r3, [pc, #124]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 800403c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403e:	4a1e      	ldr	r2, [pc, #120]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8004040:	f043 0310 	orr.w	r3, r3, #16
 8004044:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d106      	bne.n	800405a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800404c:	4b1a      	ldr	r3, [pc, #104]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 800404e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004050:	4a19      	ldr	r2, [pc, #100]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8004052:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004056:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004058:	e00f      	b.n	800407a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d106      	bne.n	800406e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004060:	4b15      	ldr	r3, [pc, #84]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8004062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004064:	4a14      	ldr	r2, [pc, #80]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8004066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800406a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800406c:	e005      	b.n	800407a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800406e:	4b12      	ldr	r3, [pc, #72]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8004070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004072:	4a11      	ldr	r2, [pc, #68]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8004074:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004078:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800407a:	4b0f      	ldr	r3, [pc, #60]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a0e      	ldr	r2, [pc, #56]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 8004080:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004084:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004086:	f7fd f841 	bl	800110c <HAL_GetTick>
 800408a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800408c:	e008      	b.n	80040a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800408e:	f7fd f83d 	bl	800110c <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e006      	b.n	80040ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040a0:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <RCCEx_PLL2_Config+0x15c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0f0      	beq.n	800408e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	58024400 	.word	0x58024400
 80040bc:	ffff0007 	.word	0xffff0007

080040c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040ce:	4b53      	ldr	r3, [pc, #332]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 80040d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d101      	bne.n	80040de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e099      	b.n	8004212 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80040de:	4b4f      	ldr	r3, [pc, #316]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a4e      	ldr	r2, [pc, #312]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 80040e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ea:	f7fd f80f 	bl	800110c <HAL_GetTick>
 80040ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040f0:	e008      	b.n	8004104 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040f2:	f7fd f80b 	bl	800110c <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e086      	b.n	8004212 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004104:	4b45      	ldr	r3, [pc, #276]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f0      	bne.n	80040f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004110:	4b42      	ldr	r3, [pc, #264]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 8004112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004114:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	051b      	lsls	r3, r3, #20
 800411e:	493f      	ldr	r1, [pc, #252]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 8004120:	4313      	orrs	r3, r2
 8004122:	628b      	str	r3, [r1, #40]	@ 0x28
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	3b01      	subs	r3, #1
 800412a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	3b01      	subs	r3, #1
 8004134:	025b      	lsls	r3, r3, #9
 8004136:	b29b      	uxth	r3, r3
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	3b01      	subs	r3, #1
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	3b01      	subs	r3, #1
 800414e:	061b      	lsls	r3, r3, #24
 8004150:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004154:	4931      	ldr	r1, [pc, #196]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 8004156:	4313      	orrs	r3, r2
 8004158:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800415a:	4b30      	ldr	r3, [pc, #192]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 800415c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	492d      	ldr	r1, [pc, #180]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 8004168:	4313      	orrs	r3, r2
 800416a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800416c:	4b2b      	ldr	r3, [pc, #172]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 800416e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004170:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	4928      	ldr	r1, [pc, #160]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 800417a:	4313      	orrs	r3, r2
 800417c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800417e:	4b27      	ldr	r3, [pc, #156]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 8004180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004182:	4a26      	ldr	r2, [pc, #152]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 8004184:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004188:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800418a:	4b24      	ldr	r3, [pc, #144]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 800418c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800418e:	4b24      	ldr	r3, [pc, #144]	@ (8004220 <RCCEx_PLL3_Config+0x160>)
 8004190:	4013      	ands	r3, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	69d2      	ldr	r2, [r2, #28]
 8004196:	00d2      	lsls	r2, r2, #3
 8004198:	4920      	ldr	r1, [pc, #128]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 800419a:	4313      	orrs	r3, r2
 800419c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800419e:	4b1f      	ldr	r3, [pc, #124]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 80041a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a2:	4a1e      	ldr	r2, [pc, #120]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 80041a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d106      	bne.n	80041be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80041b0:	4b1a      	ldr	r3, [pc, #104]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 80041b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b4:	4a19      	ldr	r2, [pc, #100]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 80041b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041bc:	e00f      	b.n	80041de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d106      	bne.n	80041d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80041c4:	4b15      	ldr	r3, [pc, #84]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 80041c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c8:	4a14      	ldr	r2, [pc, #80]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 80041ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041d0:	e005      	b.n	80041de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80041d2:	4b12      	ldr	r3, [pc, #72]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 80041d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d6:	4a11      	ldr	r2, [pc, #68]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 80041d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80041de:	4b0f      	ldr	r3, [pc, #60]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a0e      	ldr	r2, [pc, #56]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ea:	f7fc ff8f 	bl	800110c <HAL_GetTick>
 80041ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041f0:	e008      	b.n	8004204 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041f2:	f7fc ff8b 	bl	800110c <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e006      	b.n	8004212 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004204:	4b05      	ldr	r3, [pc, #20]	@ (800421c <RCCEx_PLL3_Config+0x15c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0f0      	beq.n	80041f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004210:	7bfb      	ldrb	r3, [r7, #15]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	58024400 	.word	0x58024400
 8004220:	ffff0007 	.word	0xffff0007

08004224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e049      	b.n	80042ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fc fd14 	bl	8000c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3304      	adds	r3, #4
 8004260:	4619      	mov	r1, r3
 8004262:	4610      	mov	r0, r2
 8004264:	f000 f9d4 	bl	8004610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d001      	beq.n	80042ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e056      	b.n	800439a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a2b      	ldr	r2, [pc, #172]	@ (80043a8 <HAL_TIM_Base_Start+0xd4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d02c      	beq.n	8004358 <HAL_TIM_Base_Start+0x84>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004306:	d027      	beq.n	8004358 <HAL_TIM_Base_Start+0x84>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a27      	ldr	r2, [pc, #156]	@ (80043ac <HAL_TIM_Base_Start+0xd8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d022      	beq.n	8004358 <HAL_TIM_Base_Start+0x84>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a26      	ldr	r2, [pc, #152]	@ (80043b0 <HAL_TIM_Base_Start+0xdc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d01d      	beq.n	8004358 <HAL_TIM_Base_Start+0x84>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a24      	ldr	r2, [pc, #144]	@ (80043b4 <HAL_TIM_Base_Start+0xe0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d018      	beq.n	8004358 <HAL_TIM_Base_Start+0x84>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a23      	ldr	r2, [pc, #140]	@ (80043b8 <HAL_TIM_Base_Start+0xe4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d013      	beq.n	8004358 <HAL_TIM_Base_Start+0x84>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a21      	ldr	r2, [pc, #132]	@ (80043bc <HAL_TIM_Base_Start+0xe8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00e      	beq.n	8004358 <HAL_TIM_Base_Start+0x84>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a20      	ldr	r2, [pc, #128]	@ (80043c0 <HAL_TIM_Base_Start+0xec>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d009      	beq.n	8004358 <HAL_TIM_Base_Start+0x84>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a1e      	ldr	r2, [pc, #120]	@ (80043c4 <HAL_TIM_Base_Start+0xf0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d004      	beq.n	8004358 <HAL_TIM_Base_Start+0x84>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a1d      	ldr	r2, [pc, #116]	@ (80043c8 <HAL_TIM_Base_Start+0xf4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d115      	bne.n	8004384 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	4b1b      	ldr	r3, [pc, #108]	@ (80043cc <HAL_TIM_Base_Start+0xf8>)
 8004360:	4013      	ands	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b06      	cmp	r3, #6
 8004368:	d015      	beq.n	8004396 <HAL_TIM_Base_Start+0xc2>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004370:	d011      	beq.n	8004396 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0201 	orr.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004382:	e008      	b.n	8004396 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	e000      	b.n	8004398 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004396:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40010000 	.word	0x40010000
 80043ac:	40000400 	.word	0x40000400
 80043b0:	40000800 	.word	0x40000800
 80043b4:	40000c00 	.word	0x40000c00
 80043b8:	40010400 	.word	0x40010400
 80043bc:	40001800 	.word	0x40001800
 80043c0:	40014000 	.word	0x40014000
 80043c4:	4000e000 	.word	0x4000e000
 80043c8:	4000e400 	.word	0x4000e400
 80043cc:	00010007 	.word	0x00010007

080043d0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6a1a      	ldr	r2, [r3, #32]
 80043de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10f      	bne.n	8004408 <HAL_TIM_Base_Stop+0x38>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6a1a      	ldr	r2, [r3, #32]
 80043ee:	f240 4344 	movw	r3, #1092	@ 0x444
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d107      	bne.n	8004408 <HAL_TIM_Base_Stop+0x38>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
	...

08004420 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_TIM_ConfigClockSource+0x1c>
 8004438:	2302      	movs	r3, #2
 800443a:	e0dc      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x1d6>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	4b6a      	ldr	r3, [pc, #424]	@ (8004600 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004458:	4013      	ands	r3, r2
 800445a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004462:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a64      	ldr	r2, [pc, #400]	@ (8004604 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	f000 80a9 	beq.w	80045ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004478:	4a62      	ldr	r2, [pc, #392]	@ (8004604 <HAL_TIM_ConfigClockSource+0x1e4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	f200 80ae 	bhi.w	80045dc <HAL_TIM_ConfigClockSource+0x1bc>
 8004480:	4a61      	ldr	r2, [pc, #388]	@ (8004608 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	f000 80a1 	beq.w	80045ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004488:	4a5f      	ldr	r2, [pc, #380]	@ (8004608 <HAL_TIM_ConfigClockSource+0x1e8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	f200 80a6 	bhi.w	80045dc <HAL_TIM_ConfigClockSource+0x1bc>
 8004490:	4a5e      	ldr	r2, [pc, #376]	@ (800460c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004492:	4293      	cmp	r3, r2
 8004494:	f000 8099 	beq.w	80045ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004498:	4a5c      	ldr	r2, [pc, #368]	@ (800460c <HAL_TIM_ConfigClockSource+0x1ec>)
 800449a:	4293      	cmp	r3, r2
 800449c:	f200 809e 	bhi.w	80045dc <HAL_TIM_ConfigClockSource+0x1bc>
 80044a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80044a4:	f000 8091 	beq.w	80045ca <HAL_TIM_ConfigClockSource+0x1aa>
 80044a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80044ac:	f200 8096 	bhi.w	80045dc <HAL_TIM_ConfigClockSource+0x1bc>
 80044b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044b4:	f000 8089 	beq.w	80045ca <HAL_TIM_ConfigClockSource+0x1aa>
 80044b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044bc:	f200 808e 	bhi.w	80045dc <HAL_TIM_ConfigClockSource+0x1bc>
 80044c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044c4:	d03e      	beq.n	8004544 <HAL_TIM_ConfigClockSource+0x124>
 80044c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ca:	f200 8087 	bhi.w	80045dc <HAL_TIM_ConfigClockSource+0x1bc>
 80044ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d2:	f000 8086 	beq.w	80045e2 <HAL_TIM_ConfigClockSource+0x1c2>
 80044d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044da:	d87f      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x1bc>
 80044dc:	2b70      	cmp	r3, #112	@ 0x70
 80044de:	d01a      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0xf6>
 80044e0:	2b70      	cmp	r3, #112	@ 0x70
 80044e2:	d87b      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x1bc>
 80044e4:	2b60      	cmp	r3, #96	@ 0x60
 80044e6:	d050      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x16a>
 80044e8:	2b60      	cmp	r3, #96	@ 0x60
 80044ea:	d877      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x1bc>
 80044ec:	2b50      	cmp	r3, #80	@ 0x50
 80044ee:	d03c      	beq.n	800456a <HAL_TIM_ConfigClockSource+0x14a>
 80044f0:	2b50      	cmp	r3, #80	@ 0x50
 80044f2:	d873      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x1bc>
 80044f4:	2b40      	cmp	r3, #64	@ 0x40
 80044f6:	d058      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0x18a>
 80044f8:	2b40      	cmp	r3, #64	@ 0x40
 80044fa:	d86f      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x1bc>
 80044fc:	2b30      	cmp	r3, #48	@ 0x30
 80044fe:	d064      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004500:	2b30      	cmp	r3, #48	@ 0x30
 8004502:	d86b      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x1bc>
 8004504:	2b20      	cmp	r3, #32
 8004506:	d060      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004508:	2b20      	cmp	r3, #32
 800450a:	d867      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x1bc>
 800450c:	2b00      	cmp	r3, #0
 800450e:	d05c      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004510:	2b10      	cmp	r3, #16
 8004512:	d05a      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004514:	e062      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004526:	f000 f99d 	bl	8004864 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	609a      	str	r2, [r3, #8]
      break;
 8004542:	e04f      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004554:	f000 f986 	bl	8004864 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004566:	609a      	str	r2, [r3, #8]
      break;
 8004568:	e03c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004576:	461a      	mov	r2, r3
 8004578:	f000 f8f6 	bl	8004768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2150      	movs	r1, #80	@ 0x50
 8004582:	4618      	mov	r0, r3
 8004584:	f000 f950 	bl	8004828 <TIM_ITRx_SetConfig>
      break;
 8004588:	e02c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004596:	461a      	mov	r2, r3
 8004598:	f000 f915 	bl	80047c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2160      	movs	r1, #96	@ 0x60
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 f940 	bl	8004828 <TIM_ITRx_SetConfig>
      break;
 80045a8:	e01c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b6:	461a      	mov	r2, r3
 80045b8:	f000 f8d6 	bl	8004768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2140      	movs	r1, #64	@ 0x40
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 f930 	bl	8004828 <TIM_ITRx_SetConfig>
      break;
 80045c8:	e00c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f000 f927 	bl	8004828 <TIM_ITRx_SetConfig>
      break;
 80045da:	e003      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
      break;
 80045e0:	e000      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80045e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	ffceff88 	.word	0xffceff88
 8004604:	00100040 	.word	0x00100040
 8004608:	00100030 	.word	0x00100030
 800460c:	00100020 	.word	0x00100020

08004610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a47      	ldr	r2, [pc, #284]	@ (8004740 <TIM_Base_SetConfig+0x130>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d013      	beq.n	8004650 <TIM_Base_SetConfig+0x40>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800462e:	d00f      	beq.n	8004650 <TIM_Base_SetConfig+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a44      	ldr	r2, [pc, #272]	@ (8004744 <TIM_Base_SetConfig+0x134>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00b      	beq.n	8004650 <TIM_Base_SetConfig+0x40>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a43      	ldr	r2, [pc, #268]	@ (8004748 <TIM_Base_SetConfig+0x138>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d007      	beq.n	8004650 <TIM_Base_SetConfig+0x40>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a42      	ldr	r2, [pc, #264]	@ (800474c <TIM_Base_SetConfig+0x13c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_Base_SetConfig+0x40>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a41      	ldr	r2, [pc, #260]	@ (8004750 <TIM_Base_SetConfig+0x140>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d108      	bne.n	8004662 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a36      	ldr	r2, [pc, #216]	@ (8004740 <TIM_Base_SetConfig+0x130>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d027      	beq.n	80046ba <TIM_Base_SetConfig+0xaa>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004670:	d023      	beq.n	80046ba <TIM_Base_SetConfig+0xaa>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a33      	ldr	r2, [pc, #204]	@ (8004744 <TIM_Base_SetConfig+0x134>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d01f      	beq.n	80046ba <TIM_Base_SetConfig+0xaa>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a32      	ldr	r2, [pc, #200]	@ (8004748 <TIM_Base_SetConfig+0x138>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d01b      	beq.n	80046ba <TIM_Base_SetConfig+0xaa>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a31      	ldr	r2, [pc, #196]	@ (800474c <TIM_Base_SetConfig+0x13c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d017      	beq.n	80046ba <TIM_Base_SetConfig+0xaa>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a30      	ldr	r2, [pc, #192]	@ (8004750 <TIM_Base_SetConfig+0x140>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <TIM_Base_SetConfig+0xaa>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a2f      	ldr	r2, [pc, #188]	@ (8004754 <TIM_Base_SetConfig+0x144>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00f      	beq.n	80046ba <TIM_Base_SetConfig+0xaa>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a2e      	ldr	r2, [pc, #184]	@ (8004758 <TIM_Base_SetConfig+0x148>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00b      	beq.n	80046ba <TIM_Base_SetConfig+0xaa>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a2d      	ldr	r2, [pc, #180]	@ (800475c <TIM_Base_SetConfig+0x14c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d007      	beq.n	80046ba <TIM_Base_SetConfig+0xaa>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004760 <TIM_Base_SetConfig+0x150>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d003      	beq.n	80046ba <TIM_Base_SetConfig+0xaa>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004764 <TIM_Base_SetConfig+0x154>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d108      	bne.n	80046cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a14      	ldr	r2, [pc, #80]	@ (8004740 <TIM_Base_SetConfig+0x130>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00f      	beq.n	8004712 <TIM_Base_SetConfig+0x102>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a16      	ldr	r2, [pc, #88]	@ (8004750 <TIM_Base_SetConfig+0x140>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00b      	beq.n	8004712 <TIM_Base_SetConfig+0x102>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a15      	ldr	r2, [pc, #84]	@ (8004754 <TIM_Base_SetConfig+0x144>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d007      	beq.n	8004712 <TIM_Base_SetConfig+0x102>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a14      	ldr	r2, [pc, #80]	@ (8004758 <TIM_Base_SetConfig+0x148>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d003      	beq.n	8004712 <TIM_Base_SetConfig+0x102>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a13      	ldr	r2, [pc, #76]	@ (800475c <TIM_Base_SetConfig+0x14c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d103      	bne.n	800471a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f043 0204 	orr.w	r2, r3, #4
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	601a      	str	r2, [r3, #0]
}
 8004732:	bf00      	nop
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40010000 	.word	0x40010000
 8004744:	40000400 	.word	0x40000400
 8004748:	40000800 	.word	0x40000800
 800474c:	40000c00 	.word	0x40000c00
 8004750:	40010400 	.word	0x40010400
 8004754:	40014000 	.word	0x40014000
 8004758:	40014400 	.word	0x40014400
 800475c:	40014800 	.word	0x40014800
 8004760:	4000e000 	.word	0x4000e000
 8004764:	4000e400 	.word	0x4000e400

08004768 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	f023 0201 	bic.w	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f023 030a 	bic.w	r3, r3, #10
 80047a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b087      	sub	sp, #28
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f023 0210 	bic.w	r2, r3, #16
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	031b      	lsls	r3, r3, #12
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004802:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
	...

08004828 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4b09      	ldr	r3, [pc, #36]	@ (8004860 <TIM_ITRx_SetConfig+0x38>)
 800483c:	4013      	ands	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	f043 0307 	orr.w	r3, r3, #7
 800484a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	609a      	str	r2, [r3, #8]
}
 8004852:	bf00      	nop
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	ffcfff8f 	.word	0xffcfff8f

08004864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800487e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	021a      	lsls	r2, r3, #8
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	431a      	orrs	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4313      	orrs	r3, r2
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	609a      	str	r2, [r3, #8]
}
 8004898:	bf00      	nop
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e077      	b.n	80049ac <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a35      	ldr	r2, [pc, #212]	@ (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a34      	ldr	r2, [pc, #208]	@ (80049bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d108      	bne.n	8004902 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80048f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004908:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4313      	orrs	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a25      	ldr	r2, [pc, #148]	@ (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d02c      	beq.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800492e:	d027      	beq.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a22      	ldr	r2, [pc, #136]	@ (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d022      	beq.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a21      	ldr	r2, [pc, #132]	@ (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d01d      	beq.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1f      	ldr	r2, [pc, #124]	@ (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d018      	beq.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1a      	ldr	r2, [pc, #104]	@ (80049bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d013      	beq.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1b      	ldr	r2, [pc, #108]	@ (80049cc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00e      	beq.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1a      	ldr	r2, [pc, #104]	@ (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d009      	beq.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a18      	ldr	r2, [pc, #96]	@ (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d004      	beq.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a17      	ldr	r2, [pc, #92]	@ (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d10c      	bne.n	800499a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004986:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	4313      	orrs	r3, r2
 8004990:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	40010000 	.word	0x40010000
 80049bc:	40010400 	.word	0x40010400
 80049c0:	40000400 	.word	0x40000400
 80049c4:	40000800 	.word	0x40000800
 80049c8:	40000c00 	.word	0x40000c00
 80049cc:	40001800 	.word	0x40001800
 80049d0:	40014000 	.word	0x40014000
 80049d4:	4000e000 	.word	0x4000e000
 80049d8:	4000e400 	.word	0x4000e400

080049dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e042      	b.n	8004a74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d106      	bne.n	8004a06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7fc f95b 	bl	8000cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2224      	movs	r2, #36	@ 0x24
 8004a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 ff22 	bl	8005870 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f8b3 	bl	8004b98 <UART_SetConfig>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e01b      	b.n	8004a74 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 ffa1 	bl	80059b4 <UART_CheckIdleState>
 8004a72:	4603      	mov	r3, r0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08a      	sub	sp, #40	@ 0x28
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d17b      	bne.n	8004b8e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <HAL_UART_Transmit+0x26>
 8004a9c:	88fb      	ldrh	r3, [r7, #6]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e074      	b.n	8004b90 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2221      	movs	r2, #33	@ 0x21
 8004ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ab6:	f7fc fb29 	bl	800110c <HAL_GetTick>
 8004aba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	88fa      	ldrh	r2, [r7, #6]
 8004ac0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	88fa      	ldrh	r2, [r7, #6]
 8004ac8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad4:	d108      	bne.n	8004ae8 <HAL_UART_Transmit+0x6c>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d104      	bne.n	8004ae8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	61bb      	str	r3, [r7, #24]
 8004ae6:	e003      	b.n	8004af0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004af0:	e030      	b.n	8004b54 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2200      	movs	r2, #0
 8004afa:	2180      	movs	r1, #128	@ 0x80
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f001 f803 	bl	8005b08 <UART_WaitOnFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e03d      	b.n	8004b90 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10b      	bne.n	8004b32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b28:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	3302      	adds	r3, #2
 8004b2e:	61bb      	str	r3, [r7, #24]
 8004b30:	e007      	b.n	8004b42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	781a      	ldrb	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1c8      	bne.n	8004af2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2200      	movs	r2, #0
 8004b68:	2140      	movs	r1, #64	@ 0x40
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 ffcc 	bl	8005b08 <UART_WaitOnFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e006      	b.n	8004b90 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e000      	b.n	8004b90 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004b8e:	2302      	movs	r3, #2
  }
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3720      	adds	r7, #32
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b9c:	b092      	sub	sp, #72	@ 0x48
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4bbe      	ldr	r3, [pc, #760]	@ (8004ec0 <UART_SetConfig+0x328>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	6812      	ldr	r2, [r2, #0]
 8004bce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4ab3      	ldr	r2, [pc, #716]	@ (8004ec4 <UART_SetConfig+0x32c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d004      	beq.n	8004c04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c00:	4313      	orrs	r3, r2
 8004c02:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	4baf      	ldr	r3, [pc, #700]	@ (8004ec8 <UART_SetConfig+0x330>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	6812      	ldr	r2, [r2, #0]
 8004c12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004c14:	430b      	orrs	r3, r1
 8004c16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1e:	f023 010f 	bic.w	r1, r3, #15
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4aa6      	ldr	r2, [pc, #664]	@ (8004ecc <UART_SetConfig+0x334>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d177      	bne.n	8004d28 <UART_SetConfig+0x190>
 8004c38:	4ba5      	ldr	r3, [pc, #660]	@ (8004ed0 <UART_SetConfig+0x338>)
 8004c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c40:	2b28      	cmp	r3, #40	@ 0x28
 8004c42:	d86d      	bhi.n	8004d20 <UART_SetConfig+0x188>
 8004c44:	a201      	add	r2, pc, #4	@ (adr r2, 8004c4c <UART_SetConfig+0xb4>)
 8004c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4a:	bf00      	nop
 8004c4c:	08004cf1 	.word	0x08004cf1
 8004c50:	08004d21 	.word	0x08004d21
 8004c54:	08004d21 	.word	0x08004d21
 8004c58:	08004d21 	.word	0x08004d21
 8004c5c:	08004d21 	.word	0x08004d21
 8004c60:	08004d21 	.word	0x08004d21
 8004c64:	08004d21 	.word	0x08004d21
 8004c68:	08004d21 	.word	0x08004d21
 8004c6c:	08004cf9 	.word	0x08004cf9
 8004c70:	08004d21 	.word	0x08004d21
 8004c74:	08004d21 	.word	0x08004d21
 8004c78:	08004d21 	.word	0x08004d21
 8004c7c:	08004d21 	.word	0x08004d21
 8004c80:	08004d21 	.word	0x08004d21
 8004c84:	08004d21 	.word	0x08004d21
 8004c88:	08004d21 	.word	0x08004d21
 8004c8c:	08004d01 	.word	0x08004d01
 8004c90:	08004d21 	.word	0x08004d21
 8004c94:	08004d21 	.word	0x08004d21
 8004c98:	08004d21 	.word	0x08004d21
 8004c9c:	08004d21 	.word	0x08004d21
 8004ca0:	08004d21 	.word	0x08004d21
 8004ca4:	08004d21 	.word	0x08004d21
 8004ca8:	08004d21 	.word	0x08004d21
 8004cac:	08004d09 	.word	0x08004d09
 8004cb0:	08004d21 	.word	0x08004d21
 8004cb4:	08004d21 	.word	0x08004d21
 8004cb8:	08004d21 	.word	0x08004d21
 8004cbc:	08004d21 	.word	0x08004d21
 8004cc0:	08004d21 	.word	0x08004d21
 8004cc4:	08004d21 	.word	0x08004d21
 8004cc8:	08004d21 	.word	0x08004d21
 8004ccc:	08004d11 	.word	0x08004d11
 8004cd0:	08004d21 	.word	0x08004d21
 8004cd4:	08004d21 	.word	0x08004d21
 8004cd8:	08004d21 	.word	0x08004d21
 8004cdc:	08004d21 	.word	0x08004d21
 8004ce0:	08004d21 	.word	0x08004d21
 8004ce4:	08004d21 	.word	0x08004d21
 8004ce8:	08004d21 	.word	0x08004d21
 8004cec:	08004d19 	.word	0x08004d19
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cf6:	e326      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cfe:	e322      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004d00:	2308      	movs	r3, #8
 8004d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d06:	e31e      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004d08:	2310      	movs	r3, #16
 8004d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d0e:	e31a      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004d10:	2320      	movs	r3, #32
 8004d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d16:	e316      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004d18:	2340      	movs	r3, #64	@ 0x40
 8004d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d1e:	e312      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004d20:	2380      	movs	r3, #128	@ 0x80
 8004d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d26:	e30e      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a69      	ldr	r2, [pc, #420]	@ (8004ed4 <UART_SetConfig+0x33c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d130      	bne.n	8004d94 <UART_SetConfig+0x1fc>
 8004d32:	4b67      	ldr	r3, [pc, #412]	@ (8004ed0 <UART_SetConfig+0x338>)
 8004d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	2b05      	cmp	r3, #5
 8004d3c:	d826      	bhi.n	8004d8c <UART_SetConfig+0x1f4>
 8004d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d44 <UART_SetConfig+0x1ac>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004d5d 	.word	0x08004d5d
 8004d48:	08004d65 	.word	0x08004d65
 8004d4c:	08004d6d 	.word	0x08004d6d
 8004d50:	08004d75 	.word	0x08004d75
 8004d54:	08004d7d 	.word	0x08004d7d
 8004d58:	08004d85 	.word	0x08004d85
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d62:	e2f0      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004d64:	2304      	movs	r3, #4
 8004d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d6a:	e2ec      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004d6c:	2308      	movs	r3, #8
 8004d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d72:	e2e8      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004d74:	2310      	movs	r3, #16
 8004d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d7a:	e2e4      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004d7c:	2320      	movs	r3, #32
 8004d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d82:	e2e0      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004d84:	2340      	movs	r3, #64	@ 0x40
 8004d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d8a:	e2dc      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004d8c:	2380      	movs	r3, #128	@ 0x80
 8004d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d92:	e2d8      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a4f      	ldr	r2, [pc, #316]	@ (8004ed8 <UART_SetConfig+0x340>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d130      	bne.n	8004e00 <UART_SetConfig+0x268>
 8004d9e:	4b4c      	ldr	r3, [pc, #304]	@ (8004ed0 <UART_SetConfig+0x338>)
 8004da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	2b05      	cmp	r3, #5
 8004da8:	d826      	bhi.n	8004df8 <UART_SetConfig+0x260>
 8004daa:	a201      	add	r2, pc, #4	@ (adr r2, 8004db0 <UART_SetConfig+0x218>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004dc9 	.word	0x08004dc9
 8004db4:	08004dd1 	.word	0x08004dd1
 8004db8:	08004dd9 	.word	0x08004dd9
 8004dbc:	08004de1 	.word	0x08004de1
 8004dc0:	08004de9 	.word	0x08004de9
 8004dc4:	08004df1 	.word	0x08004df1
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dce:	e2ba      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dd6:	e2b6      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004dd8:	2308      	movs	r3, #8
 8004dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dde:	e2b2      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004de0:	2310      	movs	r3, #16
 8004de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004de6:	e2ae      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004de8:	2320      	movs	r3, #32
 8004dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dee:	e2aa      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004df0:	2340      	movs	r3, #64	@ 0x40
 8004df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004df6:	e2a6      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004df8:	2380      	movs	r3, #128	@ 0x80
 8004dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dfe:	e2a2      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a35      	ldr	r2, [pc, #212]	@ (8004edc <UART_SetConfig+0x344>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d130      	bne.n	8004e6c <UART_SetConfig+0x2d4>
 8004e0a:	4b31      	ldr	r3, [pc, #196]	@ (8004ed0 <UART_SetConfig+0x338>)
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	2b05      	cmp	r3, #5
 8004e14:	d826      	bhi.n	8004e64 <UART_SetConfig+0x2cc>
 8004e16:	a201      	add	r2, pc, #4	@ (adr r2, 8004e1c <UART_SetConfig+0x284>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e35 	.word	0x08004e35
 8004e20:	08004e3d 	.word	0x08004e3d
 8004e24:	08004e45 	.word	0x08004e45
 8004e28:	08004e4d 	.word	0x08004e4d
 8004e2c:	08004e55 	.word	0x08004e55
 8004e30:	08004e5d 	.word	0x08004e5d
 8004e34:	2300      	movs	r3, #0
 8004e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e3a:	e284      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e42:	e280      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004e44:	2308      	movs	r3, #8
 8004e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e4a:	e27c      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004e4c:	2310      	movs	r3, #16
 8004e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e52:	e278      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004e54:	2320      	movs	r3, #32
 8004e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e5a:	e274      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004e5c:	2340      	movs	r3, #64	@ 0x40
 8004e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e62:	e270      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004e64:	2380      	movs	r3, #128	@ 0x80
 8004e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e6a:	e26c      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1b      	ldr	r2, [pc, #108]	@ (8004ee0 <UART_SetConfig+0x348>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d142      	bne.n	8004efc <UART_SetConfig+0x364>
 8004e76:	4b16      	ldr	r3, [pc, #88]	@ (8004ed0 <UART_SetConfig+0x338>)
 8004e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	2b05      	cmp	r3, #5
 8004e80:	d838      	bhi.n	8004ef4 <UART_SetConfig+0x35c>
 8004e82:	a201      	add	r2, pc, #4	@ (adr r2, 8004e88 <UART_SetConfig+0x2f0>)
 8004e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e88:	08004ea1 	.word	0x08004ea1
 8004e8c:	08004ea9 	.word	0x08004ea9
 8004e90:	08004eb1 	.word	0x08004eb1
 8004e94:	08004eb9 	.word	0x08004eb9
 8004e98:	08004ee5 	.word	0x08004ee5
 8004e9c:	08004eed 	.word	0x08004eed
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ea6:	e24e      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eae:	e24a      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004eb0:	2308      	movs	r3, #8
 8004eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eb6:	e246      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004eb8:	2310      	movs	r3, #16
 8004eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ebe:	e242      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004ec0:	cfff69f3 	.word	0xcfff69f3
 8004ec4:	58000c00 	.word	0x58000c00
 8004ec8:	11fff4ff 	.word	0x11fff4ff
 8004ecc:	40011000 	.word	0x40011000
 8004ed0:	58024400 	.word	0x58024400
 8004ed4:	40004400 	.word	0x40004400
 8004ed8:	40004800 	.word	0x40004800
 8004edc:	40004c00 	.word	0x40004c00
 8004ee0:	40005000 	.word	0x40005000
 8004ee4:	2320      	movs	r3, #32
 8004ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eea:	e22c      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004eec:	2340      	movs	r3, #64	@ 0x40
 8004eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ef2:	e228      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004ef4:	2380      	movs	r3, #128	@ 0x80
 8004ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004efa:	e224      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4ab1      	ldr	r2, [pc, #708]	@ (80051c8 <UART_SetConfig+0x630>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d176      	bne.n	8004ff4 <UART_SetConfig+0x45c>
 8004f06:	4bb1      	ldr	r3, [pc, #708]	@ (80051cc <UART_SetConfig+0x634>)
 8004f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f0e:	2b28      	cmp	r3, #40	@ 0x28
 8004f10:	d86c      	bhi.n	8004fec <UART_SetConfig+0x454>
 8004f12:	a201      	add	r2, pc, #4	@ (adr r2, 8004f18 <UART_SetConfig+0x380>)
 8004f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f18:	08004fbd 	.word	0x08004fbd
 8004f1c:	08004fed 	.word	0x08004fed
 8004f20:	08004fed 	.word	0x08004fed
 8004f24:	08004fed 	.word	0x08004fed
 8004f28:	08004fed 	.word	0x08004fed
 8004f2c:	08004fed 	.word	0x08004fed
 8004f30:	08004fed 	.word	0x08004fed
 8004f34:	08004fed 	.word	0x08004fed
 8004f38:	08004fc5 	.word	0x08004fc5
 8004f3c:	08004fed 	.word	0x08004fed
 8004f40:	08004fed 	.word	0x08004fed
 8004f44:	08004fed 	.word	0x08004fed
 8004f48:	08004fed 	.word	0x08004fed
 8004f4c:	08004fed 	.word	0x08004fed
 8004f50:	08004fed 	.word	0x08004fed
 8004f54:	08004fed 	.word	0x08004fed
 8004f58:	08004fcd 	.word	0x08004fcd
 8004f5c:	08004fed 	.word	0x08004fed
 8004f60:	08004fed 	.word	0x08004fed
 8004f64:	08004fed 	.word	0x08004fed
 8004f68:	08004fed 	.word	0x08004fed
 8004f6c:	08004fed 	.word	0x08004fed
 8004f70:	08004fed 	.word	0x08004fed
 8004f74:	08004fed 	.word	0x08004fed
 8004f78:	08004fd5 	.word	0x08004fd5
 8004f7c:	08004fed 	.word	0x08004fed
 8004f80:	08004fed 	.word	0x08004fed
 8004f84:	08004fed 	.word	0x08004fed
 8004f88:	08004fed 	.word	0x08004fed
 8004f8c:	08004fed 	.word	0x08004fed
 8004f90:	08004fed 	.word	0x08004fed
 8004f94:	08004fed 	.word	0x08004fed
 8004f98:	08004fdd 	.word	0x08004fdd
 8004f9c:	08004fed 	.word	0x08004fed
 8004fa0:	08004fed 	.word	0x08004fed
 8004fa4:	08004fed 	.word	0x08004fed
 8004fa8:	08004fed 	.word	0x08004fed
 8004fac:	08004fed 	.word	0x08004fed
 8004fb0:	08004fed 	.word	0x08004fed
 8004fb4:	08004fed 	.word	0x08004fed
 8004fb8:	08004fe5 	.word	0x08004fe5
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fc2:	e1c0      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fca:	e1bc      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004fcc:	2308      	movs	r3, #8
 8004fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fd2:	e1b8      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fda:	e1b4      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004fdc:	2320      	movs	r3, #32
 8004fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fe2:	e1b0      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004fe4:	2340      	movs	r3, #64	@ 0x40
 8004fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fea:	e1ac      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004fec:	2380      	movs	r3, #128	@ 0x80
 8004fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ff2:	e1a8      	b.n	8005346 <UART_SetConfig+0x7ae>
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a75      	ldr	r2, [pc, #468]	@ (80051d0 <UART_SetConfig+0x638>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d130      	bne.n	8005060 <UART_SetConfig+0x4c8>
 8004ffe:	4b73      	ldr	r3, [pc, #460]	@ (80051cc <UART_SetConfig+0x634>)
 8005000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	2b05      	cmp	r3, #5
 8005008:	d826      	bhi.n	8005058 <UART_SetConfig+0x4c0>
 800500a:	a201      	add	r2, pc, #4	@ (adr r2, 8005010 <UART_SetConfig+0x478>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005029 	.word	0x08005029
 8005014:	08005031 	.word	0x08005031
 8005018:	08005039 	.word	0x08005039
 800501c:	08005041 	.word	0x08005041
 8005020:	08005049 	.word	0x08005049
 8005024:	08005051 	.word	0x08005051
 8005028:	2300      	movs	r3, #0
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800502e:	e18a      	b.n	8005346 <UART_SetConfig+0x7ae>
 8005030:	2304      	movs	r3, #4
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005036:	e186      	b.n	8005346 <UART_SetConfig+0x7ae>
 8005038:	2308      	movs	r3, #8
 800503a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800503e:	e182      	b.n	8005346 <UART_SetConfig+0x7ae>
 8005040:	2310      	movs	r3, #16
 8005042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005046:	e17e      	b.n	8005346 <UART_SetConfig+0x7ae>
 8005048:	2320      	movs	r3, #32
 800504a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800504e:	e17a      	b.n	8005346 <UART_SetConfig+0x7ae>
 8005050:	2340      	movs	r3, #64	@ 0x40
 8005052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005056:	e176      	b.n	8005346 <UART_SetConfig+0x7ae>
 8005058:	2380      	movs	r3, #128	@ 0x80
 800505a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800505e:	e172      	b.n	8005346 <UART_SetConfig+0x7ae>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a5b      	ldr	r2, [pc, #364]	@ (80051d4 <UART_SetConfig+0x63c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d130      	bne.n	80050cc <UART_SetConfig+0x534>
 800506a:	4b58      	ldr	r3, [pc, #352]	@ (80051cc <UART_SetConfig+0x634>)
 800506c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	2b05      	cmp	r3, #5
 8005074:	d826      	bhi.n	80050c4 <UART_SetConfig+0x52c>
 8005076:	a201      	add	r2, pc, #4	@ (adr r2, 800507c <UART_SetConfig+0x4e4>)
 8005078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507c:	08005095 	.word	0x08005095
 8005080:	0800509d 	.word	0x0800509d
 8005084:	080050a5 	.word	0x080050a5
 8005088:	080050ad 	.word	0x080050ad
 800508c:	080050b5 	.word	0x080050b5
 8005090:	080050bd 	.word	0x080050bd
 8005094:	2300      	movs	r3, #0
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800509a:	e154      	b.n	8005346 <UART_SetConfig+0x7ae>
 800509c:	2304      	movs	r3, #4
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050a2:	e150      	b.n	8005346 <UART_SetConfig+0x7ae>
 80050a4:	2308      	movs	r3, #8
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050aa:	e14c      	b.n	8005346 <UART_SetConfig+0x7ae>
 80050ac:	2310      	movs	r3, #16
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050b2:	e148      	b.n	8005346 <UART_SetConfig+0x7ae>
 80050b4:	2320      	movs	r3, #32
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ba:	e144      	b.n	8005346 <UART_SetConfig+0x7ae>
 80050bc:	2340      	movs	r3, #64	@ 0x40
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050c2:	e140      	b.n	8005346 <UART_SetConfig+0x7ae>
 80050c4:	2380      	movs	r3, #128	@ 0x80
 80050c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ca:	e13c      	b.n	8005346 <UART_SetConfig+0x7ae>
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a41      	ldr	r2, [pc, #260]	@ (80051d8 <UART_SetConfig+0x640>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	f040 8082 	bne.w	80051dc <UART_SetConfig+0x644>
 80050d8:	4b3c      	ldr	r3, [pc, #240]	@ (80051cc <UART_SetConfig+0x634>)
 80050da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050e0:	2b28      	cmp	r3, #40	@ 0x28
 80050e2:	d86d      	bhi.n	80051c0 <UART_SetConfig+0x628>
 80050e4:	a201      	add	r2, pc, #4	@ (adr r2, 80050ec <UART_SetConfig+0x554>)
 80050e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ea:	bf00      	nop
 80050ec:	08005191 	.word	0x08005191
 80050f0:	080051c1 	.word	0x080051c1
 80050f4:	080051c1 	.word	0x080051c1
 80050f8:	080051c1 	.word	0x080051c1
 80050fc:	080051c1 	.word	0x080051c1
 8005100:	080051c1 	.word	0x080051c1
 8005104:	080051c1 	.word	0x080051c1
 8005108:	080051c1 	.word	0x080051c1
 800510c:	08005199 	.word	0x08005199
 8005110:	080051c1 	.word	0x080051c1
 8005114:	080051c1 	.word	0x080051c1
 8005118:	080051c1 	.word	0x080051c1
 800511c:	080051c1 	.word	0x080051c1
 8005120:	080051c1 	.word	0x080051c1
 8005124:	080051c1 	.word	0x080051c1
 8005128:	080051c1 	.word	0x080051c1
 800512c:	080051a1 	.word	0x080051a1
 8005130:	080051c1 	.word	0x080051c1
 8005134:	080051c1 	.word	0x080051c1
 8005138:	080051c1 	.word	0x080051c1
 800513c:	080051c1 	.word	0x080051c1
 8005140:	080051c1 	.word	0x080051c1
 8005144:	080051c1 	.word	0x080051c1
 8005148:	080051c1 	.word	0x080051c1
 800514c:	080051a9 	.word	0x080051a9
 8005150:	080051c1 	.word	0x080051c1
 8005154:	080051c1 	.word	0x080051c1
 8005158:	080051c1 	.word	0x080051c1
 800515c:	080051c1 	.word	0x080051c1
 8005160:	080051c1 	.word	0x080051c1
 8005164:	080051c1 	.word	0x080051c1
 8005168:	080051c1 	.word	0x080051c1
 800516c:	080051b1 	.word	0x080051b1
 8005170:	080051c1 	.word	0x080051c1
 8005174:	080051c1 	.word	0x080051c1
 8005178:	080051c1 	.word	0x080051c1
 800517c:	080051c1 	.word	0x080051c1
 8005180:	080051c1 	.word	0x080051c1
 8005184:	080051c1 	.word	0x080051c1
 8005188:	080051c1 	.word	0x080051c1
 800518c:	080051b9 	.word	0x080051b9
 8005190:	2301      	movs	r3, #1
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005196:	e0d6      	b.n	8005346 <UART_SetConfig+0x7ae>
 8005198:	2304      	movs	r3, #4
 800519a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800519e:	e0d2      	b.n	8005346 <UART_SetConfig+0x7ae>
 80051a0:	2308      	movs	r3, #8
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051a6:	e0ce      	b.n	8005346 <UART_SetConfig+0x7ae>
 80051a8:	2310      	movs	r3, #16
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ae:	e0ca      	b.n	8005346 <UART_SetConfig+0x7ae>
 80051b0:	2320      	movs	r3, #32
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b6:	e0c6      	b.n	8005346 <UART_SetConfig+0x7ae>
 80051b8:	2340      	movs	r3, #64	@ 0x40
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051be:	e0c2      	b.n	8005346 <UART_SetConfig+0x7ae>
 80051c0:	2380      	movs	r3, #128	@ 0x80
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051c6:	e0be      	b.n	8005346 <UART_SetConfig+0x7ae>
 80051c8:	40011400 	.word	0x40011400
 80051cc:	58024400 	.word	0x58024400
 80051d0:	40007800 	.word	0x40007800
 80051d4:	40007c00 	.word	0x40007c00
 80051d8:	40011800 	.word	0x40011800
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4aad      	ldr	r2, [pc, #692]	@ (8005498 <UART_SetConfig+0x900>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d176      	bne.n	80052d4 <UART_SetConfig+0x73c>
 80051e6:	4bad      	ldr	r3, [pc, #692]	@ (800549c <UART_SetConfig+0x904>)
 80051e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051ee:	2b28      	cmp	r3, #40	@ 0x28
 80051f0:	d86c      	bhi.n	80052cc <UART_SetConfig+0x734>
 80051f2:	a201      	add	r2, pc, #4	@ (adr r2, 80051f8 <UART_SetConfig+0x660>)
 80051f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f8:	0800529d 	.word	0x0800529d
 80051fc:	080052cd 	.word	0x080052cd
 8005200:	080052cd 	.word	0x080052cd
 8005204:	080052cd 	.word	0x080052cd
 8005208:	080052cd 	.word	0x080052cd
 800520c:	080052cd 	.word	0x080052cd
 8005210:	080052cd 	.word	0x080052cd
 8005214:	080052cd 	.word	0x080052cd
 8005218:	080052a5 	.word	0x080052a5
 800521c:	080052cd 	.word	0x080052cd
 8005220:	080052cd 	.word	0x080052cd
 8005224:	080052cd 	.word	0x080052cd
 8005228:	080052cd 	.word	0x080052cd
 800522c:	080052cd 	.word	0x080052cd
 8005230:	080052cd 	.word	0x080052cd
 8005234:	080052cd 	.word	0x080052cd
 8005238:	080052ad 	.word	0x080052ad
 800523c:	080052cd 	.word	0x080052cd
 8005240:	080052cd 	.word	0x080052cd
 8005244:	080052cd 	.word	0x080052cd
 8005248:	080052cd 	.word	0x080052cd
 800524c:	080052cd 	.word	0x080052cd
 8005250:	080052cd 	.word	0x080052cd
 8005254:	080052cd 	.word	0x080052cd
 8005258:	080052b5 	.word	0x080052b5
 800525c:	080052cd 	.word	0x080052cd
 8005260:	080052cd 	.word	0x080052cd
 8005264:	080052cd 	.word	0x080052cd
 8005268:	080052cd 	.word	0x080052cd
 800526c:	080052cd 	.word	0x080052cd
 8005270:	080052cd 	.word	0x080052cd
 8005274:	080052cd 	.word	0x080052cd
 8005278:	080052bd 	.word	0x080052bd
 800527c:	080052cd 	.word	0x080052cd
 8005280:	080052cd 	.word	0x080052cd
 8005284:	080052cd 	.word	0x080052cd
 8005288:	080052cd 	.word	0x080052cd
 800528c:	080052cd 	.word	0x080052cd
 8005290:	080052cd 	.word	0x080052cd
 8005294:	080052cd 	.word	0x080052cd
 8005298:	080052c5 	.word	0x080052c5
 800529c:	2301      	movs	r3, #1
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052a2:	e050      	b.n	8005346 <UART_SetConfig+0x7ae>
 80052a4:	2304      	movs	r3, #4
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052aa:	e04c      	b.n	8005346 <UART_SetConfig+0x7ae>
 80052ac:	2308      	movs	r3, #8
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b2:	e048      	b.n	8005346 <UART_SetConfig+0x7ae>
 80052b4:	2310      	movs	r3, #16
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ba:	e044      	b.n	8005346 <UART_SetConfig+0x7ae>
 80052bc:	2320      	movs	r3, #32
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c2:	e040      	b.n	8005346 <UART_SetConfig+0x7ae>
 80052c4:	2340      	movs	r3, #64	@ 0x40
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ca:	e03c      	b.n	8005346 <UART_SetConfig+0x7ae>
 80052cc:	2380      	movs	r3, #128	@ 0x80
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d2:	e038      	b.n	8005346 <UART_SetConfig+0x7ae>
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a71      	ldr	r2, [pc, #452]	@ (80054a0 <UART_SetConfig+0x908>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d130      	bne.n	8005340 <UART_SetConfig+0x7a8>
 80052de:	4b6f      	ldr	r3, [pc, #444]	@ (800549c <UART_SetConfig+0x904>)
 80052e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	2b05      	cmp	r3, #5
 80052e8:	d826      	bhi.n	8005338 <UART_SetConfig+0x7a0>
 80052ea:	a201      	add	r2, pc, #4	@ (adr r2, 80052f0 <UART_SetConfig+0x758>)
 80052ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f0:	08005309 	.word	0x08005309
 80052f4:	08005311 	.word	0x08005311
 80052f8:	08005319 	.word	0x08005319
 80052fc:	08005321 	.word	0x08005321
 8005300:	08005329 	.word	0x08005329
 8005304:	08005331 	.word	0x08005331
 8005308:	2302      	movs	r3, #2
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800530e:	e01a      	b.n	8005346 <UART_SetConfig+0x7ae>
 8005310:	2304      	movs	r3, #4
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005316:	e016      	b.n	8005346 <UART_SetConfig+0x7ae>
 8005318:	2308      	movs	r3, #8
 800531a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531e:	e012      	b.n	8005346 <UART_SetConfig+0x7ae>
 8005320:	2310      	movs	r3, #16
 8005322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005326:	e00e      	b.n	8005346 <UART_SetConfig+0x7ae>
 8005328:	2320      	movs	r3, #32
 800532a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532e:	e00a      	b.n	8005346 <UART_SetConfig+0x7ae>
 8005330:	2340      	movs	r3, #64	@ 0x40
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005336:	e006      	b.n	8005346 <UART_SetConfig+0x7ae>
 8005338:	2380      	movs	r3, #128	@ 0x80
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533e:	e002      	b.n	8005346 <UART_SetConfig+0x7ae>
 8005340:	2380      	movs	r3, #128	@ 0x80
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a55      	ldr	r2, [pc, #340]	@ (80054a0 <UART_SetConfig+0x908>)
 800534c:	4293      	cmp	r3, r2
 800534e:	f040 80f8 	bne.w	8005542 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005352:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005356:	2b20      	cmp	r3, #32
 8005358:	dc46      	bgt.n	80053e8 <UART_SetConfig+0x850>
 800535a:	2b02      	cmp	r3, #2
 800535c:	db75      	blt.n	800544a <UART_SetConfig+0x8b2>
 800535e:	3b02      	subs	r3, #2
 8005360:	2b1e      	cmp	r3, #30
 8005362:	d872      	bhi.n	800544a <UART_SetConfig+0x8b2>
 8005364:	a201      	add	r2, pc, #4	@ (adr r2, 800536c <UART_SetConfig+0x7d4>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	080053ef 	.word	0x080053ef
 8005370:	0800544b 	.word	0x0800544b
 8005374:	080053f7 	.word	0x080053f7
 8005378:	0800544b 	.word	0x0800544b
 800537c:	0800544b 	.word	0x0800544b
 8005380:	0800544b 	.word	0x0800544b
 8005384:	08005407 	.word	0x08005407
 8005388:	0800544b 	.word	0x0800544b
 800538c:	0800544b 	.word	0x0800544b
 8005390:	0800544b 	.word	0x0800544b
 8005394:	0800544b 	.word	0x0800544b
 8005398:	0800544b 	.word	0x0800544b
 800539c:	0800544b 	.word	0x0800544b
 80053a0:	0800544b 	.word	0x0800544b
 80053a4:	08005417 	.word	0x08005417
 80053a8:	0800544b 	.word	0x0800544b
 80053ac:	0800544b 	.word	0x0800544b
 80053b0:	0800544b 	.word	0x0800544b
 80053b4:	0800544b 	.word	0x0800544b
 80053b8:	0800544b 	.word	0x0800544b
 80053bc:	0800544b 	.word	0x0800544b
 80053c0:	0800544b 	.word	0x0800544b
 80053c4:	0800544b 	.word	0x0800544b
 80053c8:	0800544b 	.word	0x0800544b
 80053cc:	0800544b 	.word	0x0800544b
 80053d0:	0800544b 	.word	0x0800544b
 80053d4:	0800544b 	.word	0x0800544b
 80053d8:	0800544b 	.word	0x0800544b
 80053dc:	0800544b 	.word	0x0800544b
 80053e0:	0800544b 	.word	0x0800544b
 80053e4:	0800543d 	.word	0x0800543d
 80053e8:	2b40      	cmp	r3, #64	@ 0x40
 80053ea:	d02a      	beq.n	8005442 <UART_SetConfig+0x8aa>
 80053ec:	e02d      	b.n	800544a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80053ee:	f7fe faf7 	bl	80039e0 <HAL_RCCEx_GetD3PCLK1Freq>
 80053f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80053f4:	e02f      	b.n	8005456 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fe fb06 	bl	8003a0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005404:	e027      	b.n	8005456 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005406:	f107 0318 	add.w	r3, r7, #24
 800540a:	4618      	mov	r0, r3
 800540c:	f7fe fc52 	bl	8003cb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005414:	e01f      	b.n	8005456 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005416:	4b21      	ldr	r3, [pc, #132]	@ (800549c <UART_SetConfig+0x904>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b00      	cmp	r3, #0
 8005420:	d009      	beq.n	8005436 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005422:	4b1e      	ldr	r3, [pc, #120]	@ (800549c <UART_SetConfig+0x904>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	08db      	lsrs	r3, r3, #3
 8005428:	f003 0303 	and.w	r3, r3, #3
 800542c:	4a1d      	ldr	r2, [pc, #116]	@ (80054a4 <UART_SetConfig+0x90c>)
 800542e:	fa22 f303 	lsr.w	r3, r2, r3
 8005432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005434:	e00f      	b.n	8005456 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005436:	4b1b      	ldr	r3, [pc, #108]	@ (80054a4 <UART_SetConfig+0x90c>)
 8005438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800543a:	e00c      	b.n	8005456 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800543c:	4b1a      	ldr	r3, [pc, #104]	@ (80054a8 <UART_SetConfig+0x910>)
 800543e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005440:	e009      	b.n	8005456 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005448:	e005      	b.n	8005456 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005454:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 81ee 	beq.w	800583a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	4a12      	ldr	r2, [pc, #72]	@ (80054ac <UART_SetConfig+0x914>)
 8005464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005468:	461a      	mov	r2, r3
 800546a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800546c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005470:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	4613      	mov	r3, r2
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	4413      	add	r3, r2
 800547c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800547e:	429a      	cmp	r2, r3
 8005480:	d305      	bcc.n	800548e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005488:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800548a:	429a      	cmp	r2, r3
 800548c:	d910      	bls.n	80054b0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005494:	e1d1      	b.n	800583a <UART_SetConfig+0xca2>
 8005496:	bf00      	nop
 8005498:	40011c00 	.word	0x40011c00
 800549c:	58024400 	.word	0x58024400
 80054a0:	58000c00 	.word	0x58000c00
 80054a4:	03d09000 	.word	0x03d09000
 80054a8:	003d0900 	.word	0x003d0900
 80054ac:	0800684c 	.word	0x0800684c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054b2:	2200      	movs	r2, #0
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	60fa      	str	r2, [r7, #12]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	4ac0      	ldr	r2, [pc, #768]	@ (80057c0 <UART_SetConfig+0xc28>)
 80054be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2200      	movs	r2, #0
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054d2:	f7fa ff6d 	bl	80003b0 <__aeabi_uldivmod>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4610      	mov	r0, r2
 80054dc:	4619      	mov	r1, r3
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	f04f 0300 	mov.w	r3, #0
 80054e6:	020b      	lsls	r3, r1, #8
 80054e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054ec:	0202      	lsls	r2, r0, #8
 80054ee:	6979      	ldr	r1, [r7, #20]
 80054f0:	6849      	ldr	r1, [r1, #4]
 80054f2:	0849      	lsrs	r1, r1, #1
 80054f4:	2000      	movs	r0, #0
 80054f6:	460c      	mov	r4, r1
 80054f8:	4605      	mov	r5, r0
 80054fa:	eb12 0804 	adds.w	r8, r2, r4
 80054fe:	eb43 0905 	adc.w	r9, r3, r5
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	469a      	mov	sl, r3
 800550a:	4693      	mov	fp, r2
 800550c:	4652      	mov	r2, sl
 800550e:	465b      	mov	r3, fp
 8005510:	4640      	mov	r0, r8
 8005512:	4649      	mov	r1, r9
 8005514:	f7fa ff4c 	bl	80003b0 <__aeabi_uldivmod>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4613      	mov	r3, r2
 800551e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005522:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005526:	d308      	bcc.n	800553a <UART_SetConfig+0x9a2>
 8005528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800552e:	d204      	bcs.n	800553a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005536:	60da      	str	r2, [r3, #12]
 8005538:	e17f      	b.n	800583a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005540:	e17b      	b.n	800583a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800554a:	f040 80bd 	bne.w	80056c8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800554e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005552:	2b20      	cmp	r3, #32
 8005554:	dc48      	bgt.n	80055e8 <UART_SetConfig+0xa50>
 8005556:	2b00      	cmp	r3, #0
 8005558:	db7b      	blt.n	8005652 <UART_SetConfig+0xaba>
 800555a:	2b20      	cmp	r3, #32
 800555c:	d879      	bhi.n	8005652 <UART_SetConfig+0xaba>
 800555e:	a201      	add	r2, pc, #4	@ (adr r2, 8005564 <UART_SetConfig+0x9cc>)
 8005560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005564:	080055ef 	.word	0x080055ef
 8005568:	080055f7 	.word	0x080055f7
 800556c:	08005653 	.word	0x08005653
 8005570:	08005653 	.word	0x08005653
 8005574:	080055ff 	.word	0x080055ff
 8005578:	08005653 	.word	0x08005653
 800557c:	08005653 	.word	0x08005653
 8005580:	08005653 	.word	0x08005653
 8005584:	0800560f 	.word	0x0800560f
 8005588:	08005653 	.word	0x08005653
 800558c:	08005653 	.word	0x08005653
 8005590:	08005653 	.word	0x08005653
 8005594:	08005653 	.word	0x08005653
 8005598:	08005653 	.word	0x08005653
 800559c:	08005653 	.word	0x08005653
 80055a0:	08005653 	.word	0x08005653
 80055a4:	0800561f 	.word	0x0800561f
 80055a8:	08005653 	.word	0x08005653
 80055ac:	08005653 	.word	0x08005653
 80055b0:	08005653 	.word	0x08005653
 80055b4:	08005653 	.word	0x08005653
 80055b8:	08005653 	.word	0x08005653
 80055bc:	08005653 	.word	0x08005653
 80055c0:	08005653 	.word	0x08005653
 80055c4:	08005653 	.word	0x08005653
 80055c8:	08005653 	.word	0x08005653
 80055cc:	08005653 	.word	0x08005653
 80055d0:	08005653 	.word	0x08005653
 80055d4:	08005653 	.word	0x08005653
 80055d8:	08005653 	.word	0x08005653
 80055dc:	08005653 	.word	0x08005653
 80055e0:	08005653 	.word	0x08005653
 80055e4:	08005645 	.word	0x08005645
 80055e8:	2b40      	cmp	r3, #64	@ 0x40
 80055ea:	d02e      	beq.n	800564a <UART_SetConfig+0xab2>
 80055ec:	e031      	b.n	8005652 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055ee:	f7fd f82b 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 80055f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80055f4:	e033      	b.n	800565e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055f6:	f7fd f83d 	bl	8002674 <HAL_RCC_GetPCLK2Freq>
 80055fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80055fc:	e02f      	b.n	800565e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005602:	4618      	mov	r0, r3
 8005604:	f7fe fa02 	bl	8003a0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800560c:	e027      	b.n	800565e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800560e:	f107 0318 	add.w	r3, r7, #24
 8005612:	4618      	mov	r0, r3
 8005614:	f7fe fb4e 	bl	8003cb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800561c:	e01f      	b.n	800565e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800561e:	4b69      	ldr	r3, [pc, #420]	@ (80057c4 <UART_SetConfig+0xc2c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0320 	and.w	r3, r3, #32
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800562a:	4b66      	ldr	r3, [pc, #408]	@ (80057c4 <UART_SetConfig+0xc2c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	08db      	lsrs	r3, r3, #3
 8005630:	f003 0303 	and.w	r3, r3, #3
 8005634:	4a64      	ldr	r2, [pc, #400]	@ (80057c8 <UART_SetConfig+0xc30>)
 8005636:	fa22 f303 	lsr.w	r3, r2, r3
 800563a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800563c:	e00f      	b.n	800565e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800563e:	4b62      	ldr	r3, [pc, #392]	@ (80057c8 <UART_SetConfig+0xc30>)
 8005640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005642:	e00c      	b.n	800565e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005644:	4b61      	ldr	r3, [pc, #388]	@ (80057cc <UART_SetConfig+0xc34>)
 8005646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005648:	e009      	b.n	800565e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800564a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800564e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005650:	e005      	b.n	800565e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800565c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800565e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80ea 	beq.w	800583a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566a:	4a55      	ldr	r2, [pc, #340]	@ (80057c0 <UART_SetConfig+0xc28>)
 800566c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005670:	461a      	mov	r2, r3
 8005672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005674:	fbb3 f3f2 	udiv	r3, r3, r2
 8005678:	005a      	lsls	r2, r3, #1
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	085b      	lsrs	r3, r3, #1
 8005680:	441a      	add	r2, r3
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	fbb2 f3f3 	udiv	r3, r2, r3
 800568a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800568c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800568e:	2b0f      	cmp	r3, #15
 8005690:	d916      	bls.n	80056c0 <UART_SetConfig+0xb28>
 8005692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005698:	d212      	bcs.n	80056c0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800569a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800569c:	b29b      	uxth	r3, r3
 800569e:	f023 030f 	bic.w	r3, r3, #15
 80056a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a6:	085b      	lsrs	r3, r3, #1
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80056b2:	4313      	orrs	r3, r2
 80056b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80056bc:	60da      	str	r2, [r3, #12]
 80056be:	e0bc      	b.n	800583a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80056c6:	e0b8      	b.n	800583a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056c8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	dc4b      	bgt.n	8005768 <UART_SetConfig+0xbd0>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f2c0 8087 	blt.w	80057e4 <UART_SetConfig+0xc4c>
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	f200 8084 	bhi.w	80057e4 <UART_SetConfig+0xc4c>
 80056dc:	a201      	add	r2, pc, #4	@ (adr r2, 80056e4 <UART_SetConfig+0xb4c>)
 80056de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e2:	bf00      	nop
 80056e4:	0800576f 	.word	0x0800576f
 80056e8:	08005777 	.word	0x08005777
 80056ec:	080057e5 	.word	0x080057e5
 80056f0:	080057e5 	.word	0x080057e5
 80056f4:	0800577f 	.word	0x0800577f
 80056f8:	080057e5 	.word	0x080057e5
 80056fc:	080057e5 	.word	0x080057e5
 8005700:	080057e5 	.word	0x080057e5
 8005704:	0800578f 	.word	0x0800578f
 8005708:	080057e5 	.word	0x080057e5
 800570c:	080057e5 	.word	0x080057e5
 8005710:	080057e5 	.word	0x080057e5
 8005714:	080057e5 	.word	0x080057e5
 8005718:	080057e5 	.word	0x080057e5
 800571c:	080057e5 	.word	0x080057e5
 8005720:	080057e5 	.word	0x080057e5
 8005724:	0800579f 	.word	0x0800579f
 8005728:	080057e5 	.word	0x080057e5
 800572c:	080057e5 	.word	0x080057e5
 8005730:	080057e5 	.word	0x080057e5
 8005734:	080057e5 	.word	0x080057e5
 8005738:	080057e5 	.word	0x080057e5
 800573c:	080057e5 	.word	0x080057e5
 8005740:	080057e5 	.word	0x080057e5
 8005744:	080057e5 	.word	0x080057e5
 8005748:	080057e5 	.word	0x080057e5
 800574c:	080057e5 	.word	0x080057e5
 8005750:	080057e5 	.word	0x080057e5
 8005754:	080057e5 	.word	0x080057e5
 8005758:	080057e5 	.word	0x080057e5
 800575c:	080057e5 	.word	0x080057e5
 8005760:	080057e5 	.word	0x080057e5
 8005764:	080057d7 	.word	0x080057d7
 8005768:	2b40      	cmp	r3, #64	@ 0x40
 800576a:	d037      	beq.n	80057dc <UART_SetConfig+0xc44>
 800576c:	e03a      	b.n	80057e4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800576e:	f7fc ff6b 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 8005772:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005774:	e03c      	b.n	80057f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005776:	f7fc ff7d 	bl	8002674 <HAL_RCC_GetPCLK2Freq>
 800577a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800577c:	e038      	b.n	80057f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800577e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005782:	4618      	mov	r0, r3
 8005784:	f7fe f942 	bl	8003a0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800578c:	e030      	b.n	80057f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800578e:	f107 0318 	add.w	r3, r7, #24
 8005792:	4618      	mov	r0, r3
 8005794:	f7fe fa8e 	bl	8003cb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800579c:	e028      	b.n	80057f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800579e:	4b09      	ldr	r3, [pc, #36]	@ (80057c4 <UART_SetConfig+0xc2c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d012      	beq.n	80057d0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057aa:	4b06      	ldr	r3, [pc, #24]	@ (80057c4 <UART_SetConfig+0xc2c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	08db      	lsrs	r3, r3, #3
 80057b0:	f003 0303 	and.w	r3, r3, #3
 80057b4:	4a04      	ldr	r2, [pc, #16]	@ (80057c8 <UART_SetConfig+0xc30>)
 80057b6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057bc:	e018      	b.n	80057f0 <UART_SetConfig+0xc58>
 80057be:	bf00      	nop
 80057c0:	0800684c 	.word	0x0800684c
 80057c4:	58024400 	.word	0x58024400
 80057c8:	03d09000 	.word	0x03d09000
 80057cc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80057d0:	4b24      	ldr	r3, [pc, #144]	@ (8005864 <UART_SetConfig+0xccc>)
 80057d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057d4:	e00c      	b.n	80057f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057d6:	4b24      	ldr	r3, [pc, #144]	@ (8005868 <UART_SetConfig+0xcd0>)
 80057d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057da:	e009      	b.n	80057f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057e2:	e005      	b.n	80057f0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80057ee:	bf00      	nop
    }

    if (pclk != 0U)
 80057f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d021      	beq.n	800583a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fa:	4a1c      	ldr	r2, [pc, #112]	@ (800586c <UART_SetConfig+0xcd4>)
 80057fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005800:	461a      	mov	r2, r3
 8005802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005804:	fbb3 f2f2 	udiv	r2, r3, r2
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	085b      	lsrs	r3, r3, #1
 800580e:	441a      	add	r2, r3
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	fbb2 f3f3 	udiv	r3, r2, r3
 8005818:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800581a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581c:	2b0f      	cmp	r3, #15
 800581e:	d909      	bls.n	8005834 <UART_SetConfig+0xc9c>
 8005820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005822:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005826:	d205      	bcs.n	8005834 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582a:	b29a      	uxth	r2, r3
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	60da      	str	r2, [r3, #12]
 8005832:	e002      	b.n	800583a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2201      	movs	r2, #1
 800583e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2201      	movs	r2, #1
 8005846:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2200      	movs	r2, #0
 800584e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	2200      	movs	r2, #0
 8005854:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005856:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800585a:	4618      	mov	r0, r3
 800585c:	3748      	adds	r7, #72	@ 0x48
 800585e:	46bd      	mov	sp, r7
 8005860:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005864:	03d09000 	.word	0x03d09000
 8005868:	003d0900 	.word	0x003d0900
 800586c:	0800684c 	.word	0x0800684c

08005870 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00a      	beq.n	800589a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005904:	f003 0310 	and.w	r3, r3, #16
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00a      	beq.n	8005922 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00a      	beq.n	8005944 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d01a      	beq.n	8005986 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800596e:	d10a      	bne.n	8005986 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	605a      	str	r2, [r3, #4]
  }
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b098      	sub	sp, #96	@ 0x60
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059c4:	f7fb fba2 	bl	800110c <HAL_GetTick>
 80059c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d12f      	bne.n	8005a38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059e0:	2200      	movs	r2, #0
 80059e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f88e 	bl	8005b08 <UART_WaitOnFlagUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d022      	beq.n	8005a38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a06:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a12:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a18:	e841 2300 	strex	r3, r2, [r1]
 8005a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1e6      	bne.n	80059f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e063      	b.n	8005b00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d149      	bne.n	8005ada <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f857 	bl	8005b08 <UART_WaitOnFlagUntilTimeout>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d03c      	beq.n	8005ada <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	e853 3f00 	ldrex	r3, [r3]
 8005a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e6      	bne.n	8005a60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3308      	adds	r3, #8
 8005a98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f023 0301 	bic.w	r3, r3, #1
 8005aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ab2:	61fa      	str	r2, [r7, #28]
 8005ab4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	69b9      	ldr	r1, [r7, #24]
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	617b      	str	r3, [r7, #20]
   return(result);
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e5      	bne.n	8005a92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e012      	b.n	8005b00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3758      	adds	r7, #88	@ 0x58
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	4613      	mov	r3, r2
 8005b16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b18:	e04f      	b.n	8005bba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b20:	d04b      	beq.n	8005bba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b22:	f7fb faf3 	bl	800110c <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d302      	bcc.n	8005b38 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e04e      	b.n	8005bda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d037      	beq.n	8005bba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b80      	cmp	r3, #128	@ 0x80
 8005b4e:	d034      	beq.n	8005bba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2b40      	cmp	r3, #64	@ 0x40
 8005b54:	d031      	beq.n	8005bba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d110      	bne.n	8005b86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2208      	movs	r2, #8
 8005b6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 f839 	bl	8005be4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2208      	movs	r2, #8
 8005b76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e029      	b.n	8005bda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b94:	d111      	bne.n	8005bba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f81f 	bl	8005be4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e00f      	b.n	8005bda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69da      	ldr	r2, [r3, #28]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	bf0c      	ite	eq
 8005bca:	2301      	moveq	r3, #1
 8005bcc:	2300      	movne	r3, #0
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	79fb      	ldrb	r3, [r7, #7]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d0a0      	beq.n	8005b1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b095      	sub	sp, #84	@ 0x54
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e6      	bne.n	8005bec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3308      	adds	r3, #8
 8005c24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	4b1e      	ldr	r3, [pc, #120]	@ (8005cac <UART_EndRxTransfer+0xc8>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e5      	bne.n	8005c1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d118      	bne.n	8005c8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f023 0310 	bic.w	r3, r3, #16
 8005c6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c78:	61bb      	str	r3, [r7, #24]
 8005c7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6979      	ldr	r1, [r7, #20]
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	613b      	str	r3, [r7, #16]
   return(result);
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e6      	bne.n	8005c5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005ca0:	bf00      	nop
 8005ca2:	3754      	adds	r7, #84	@ 0x54
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	effffffe 	.word	0xeffffffe

08005cb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e027      	b.n	8005d16 <HAL_UARTEx_DisableFifoMode+0x66>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2224      	movs	r2, #36	@ 0x24
 8005cd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0201 	bic.w	r2, r2, #1
 8005cec:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005cf4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b084      	sub	sp, #16
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e02d      	b.n	8005d96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2224      	movs	r2, #36	@ 0x24
 8005d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0201 	bic.w	r2, r2, #1
 8005d60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f850 	bl	8005e1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e02d      	b.n	8005e12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2224      	movs	r2, #36	@ 0x24
 8005dc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0201 	bic.w	r2, r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f812 	bl	8005e1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d108      	bne.n	8005e3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e3c:	e031      	b.n	8005ea2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e3e:	2310      	movs	r3, #16
 8005e40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e42:	2310      	movs	r3, #16
 8005e44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	0e5b      	lsrs	r3, r3, #25
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	0f5b      	lsrs	r3, r3, #29
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e66:	7bbb      	ldrb	r3, [r7, #14]
 8005e68:	7b3a      	ldrb	r2, [r7, #12]
 8005e6a:	4911      	ldr	r1, [pc, #68]	@ (8005eb0 <UARTEx_SetNbDataToProcess+0x94>)
 8005e6c:	5c8a      	ldrb	r2, [r1, r2]
 8005e6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e72:	7b3a      	ldrb	r2, [r7, #12]
 8005e74:	490f      	ldr	r1, [pc, #60]	@ (8005eb4 <UARTEx_SetNbDataToProcess+0x98>)
 8005e76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e78:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	7b7a      	ldrb	r2, [r7, #13]
 8005e88:	4909      	ldr	r1, [pc, #36]	@ (8005eb0 <UARTEx_SetNbDataToProcess+0x94>)
 8005e8a:	5c8a      	ldrb	r2, [r1, r2]
 8005e8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e90:	7b7a      	ldrb	r2, [r7, #13]
 8005e92:	4908      	ldr	r1, [pc, #32]	@ (8005eb4 <UARTEx_SetNbDataToProcess+0x98>)
 8005e94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e96:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005ea2:	bf00      	nop
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	08006864 	.word	0x08006864
 8005eb4:	0800686c 	.word	0x0800686c

08005eb8 <sniprintf>:
 8005eb8:	b40c      	push	{r2, r3}
 8005eba:	b530      	push	{r4, r5, lr}
 8005ebc:	4b17      	ldr	r3, [pc, #92]	@ (8005f1c <sniprintf+0x64>)
 8005ebe:	1e0c      	subs	r4, r1, #0
 8005ec0:	681d      	ldr	r5, [r3, #0]
 8005ec2:	b09d      	sub	sp, #116	@ 0x74
 8005ec4:	da08      	bge.n	8005ed8 <sniprintf+0x20>
 8005ec6:	238b      	movs	r3, #139	@ 0x8b
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	f04f 30ff 	mov.w	r0, #4294967295
 8005ece:	b01d      	add	sp, #116	@ 0x74
 8005ed0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ed4:	b002      	add	sp, #8
 8005ed6:	4770      	bx	lr
 8005ed8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005edc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005ee0:	bf14      	ite	ne
 8005ee2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005ee6:	4623      	moveq	r3, r4
 8005ee8:	9304      	str	r3, [sp, #16]
 8005eea:	9307      	str	r3, [sp, #28]
 8005eec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ef0:	9002      	str	r0, [sp, #8]
 8005ef2:	9006      	str	r0, [sp, #24]
 8005ef4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ef8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005efa:	ab21      	add	r3, sp, #132	@ 0x84
 8005efc:	a902      	add	r1, sp, #8
 8005efe:	4628      	mov	r0, r5
 8005f00:	9301      	str	r3, [sp, #4]
 8005f02:	f000 f995 	bl	8006230 <_svfiprintf_r>
 8005f06:	1c43      	adds	r3, r0, #1
 8005f08:	bfbc      	itt	lt
 8005f0a:	238b      	movlt	r3, #139	@ 0x8b
 8005f0c:	602b      	strlt	r3, [r5, #0]
 8005f0e:	2c00      	cmp	r4, #0
 8005f10:	d0dd      	beq.n	8005ece <sniprintf+0x16>
 8005f12:	9b02      	ldr	r3, [sp, #8]
 8005f14:	2200      	movs	r2, #0
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	e7d9      	b.n	8005ece <sniprintf+0x16>
 8005f1a:	bf00      	nop
 8005f1c:	2400002c 	.word	0x2400002c

08005f20 <memset>:
 8005f20:	4402      	add	r2, r0
 8005f22:	4603      	mov	r3, r0
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d100      	bne.n	8005f2a <memset+0xa>
 8005f28:	4770      	bx	lr
 8005f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f2e:	e7f9      	b.n	8005f24 <memset+0x4>

08005f30 <__errno>:
 8005f30:	4b01      	ldr	r3, [pc, #4]	@ (8005f38 <__errno+0x8>)
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	2400002c 	.word	0x2400002c

08005f3c <__libc_init_array>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	4d0d      	ldr	r5, [pc, #52]	@ (8005f74 <__libc_init_array+0x38>)
 8005f40:	4c0d      	ldr	r4, [pc, #52]	@ (8005f78 <__libc_init_array+0x3c>)
 8005f42:	1b64      	subs	r4, r4, r5
 8005f44:	10a4      	asrs	r4, r4, #2
 8005f46:	2600      	movs	r6, #0
 8005f48:	42a6      	cmp	r6, r4
 8005f4a:	d109      	bne.n	8005f60 <__libc_init_array+0x24>
 8005f4c:	4d0b      	ldr	r5, [pc, #44]	@ (8005f7c <__libc_init_array+0x40>)
 8005f4e:	4c0c      	ldr	r4, [pc, #48]	@ (8005f80 <__libc_init_array+0x44>)
 8005f50:	f000 fc66 	bl	8006820 <_init>
 8005f54:	1b64      	subs	r4, r4, r5
 8005f56:	10a4      	asrs	r4, r4, #2
 8005f58:	2600      	movs	r6, #0
 8005f5a:	42a6      	cmp	r6, r4
 8005f5c:	d105      	bne.n	8005f6a <__libc_init_array+0x2e>
 8005f5e:	bd70      	pop	{r4, r5, r6, pc}
 8005f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f64:	4798      	blx	r3
 8005f66:	3601      	adds	r6, #1
 8005f68:	e7ee      	b.n	8005f48 <__libc_init_array+0xc>
 8005f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f6e:	4798      	blx	r3
 8005f70:	3601      	adds	r6, #1
 8005f72:	e7f2      	b.n	8005f5a <__libc_init_array+0x1e>
 8005f74:	080068b0 	.word	0x080068b0
 8005f78:	080068b0 	.word	0x080068b0
 8005f7c:	080068b0 	.word	0x080068b0
 8005f80:	080068b4 	.word	0x080068b4

08005f84 <__retarget_lock_acquire_recursive>:
 8005f84:	4770      	bx	lr

08005f86 <__retarget_lock_release_recursive>:
 8005f86:	4770      	bx	lr

08005f88 <_free_r>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	4605      	mov	r5, r0
 8005f8c:	2900      	cmp	r1, #0
 8005f8e:	d041      	beq.n	8006014 <_free_r+0x8c>
 8005f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f94:	1f0c      	subs	r4, r1, #4
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	bfb8      	it	lt
 8005f9a:	18e4      	addlt	r4, r4, r3
 8005f9c:	f000 f8e0 	bl	8006160 <__malloc_lock>
 8005fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8006018 <_free_r+0x90>)
 8005fa2:	6813      	ldr	r3, [r2, #0]
 8005fa4:	b933      	cbnz	r3, 8005fb4 <_free_r+0x2c>
 8005fa6:	6063      	str	r3, [r4, #4]
 8005fa8:	6014      	str	r4, [r2, #0]
 8005faa:	4628      	mov	r0, r5
 8005fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fb0:	f000 b8dc 	b.w	800616c <__malloc_unlock>
 8005fb4:	42a3      	cmp	r3, r4
 8005fb6:	d908      	bls.n	8005fca <_free_r+0x42>
 8005fb8:	6820      	ldr	r0, [r4, #0]
 8005fba:	1821      	adds	r1, r4, r0
 8005fbc:	428b      	cmp	r3, r1
 8005fbe:	bf01      	itttt	eq
 8005fc0:	6819      	ldreq	r1, [r3, #0]
 8005fc2:	685b      	ldreq	r3, [r3, #4]
 8005fc4:	1809      	addeq	r1, r1, r0
 8005fc6:	6021      	streq	r1, [r4, #0]
 8005fc8:	e7ed      	b.n	8005fa6 <_free_r+0x1e>
 8005fca:	461a      	mov	r2, r3
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	b10b      	cbz	r3, 8005fd4 <_free_r+0x4c>
 8005fd0:	42a3      	cmp	r3, r4
 8005fd2:	d9fa      	bls.n	8005fca <_free_r+0x42>
 8005fd4:	6811      	ldr	r1, [r2, #0]
 8005fd6:	1850      	adds	r0, r2, r1
 8005fd8:	42a0      	cmp	r0, r4
 8005fda:	d10b      	bne.n	8005ff4 <_free_r+0x6c>
 8005fdc:	6820      	ldr	r0, [r4, #0]
 8005fde:	4401      	add	r1, r0
 8005fe0:	1850      	adds	r0, r2, r1
 8005fe2:	4283      	cmp	r3, r0
 8005fe4:	6011      	str	r1, [r2, #0]
 8005fe6:	d1e0      	bne.n	8005faa <_free_r+0x22>
 8005fe8:	6818      	ldr	r0, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	6053      	str	r3, [r2, #4]
 8005fee:	4408      	add	r0, r1
 8005ff0:	6010      	str	r0, [r2, #0]
 8005ff2:	e7da      	b.n	8005faa <_free_r+0x22>
 8005ff4:	d902      	bls.n	8005ffc <_free_r+0x74>
 8005ff6:	230c      	movs	r3, #12
 8005ff8:	602b      	str	r3, [r5, #0]
 8005ffa:	e7d6      	b.n	8005faa <_free_r+0x22>
 8005ffc:	6820      	ldr	r0, [r4, #0]
 8005ffe:	1821      	adds	r1, r4, r0
 8006000:	428b      	cmp	r3, r1
 8006002:	bf04      	itt	eq
 8006004:	6819      	ldreq	r1, [r3, #0]
 8006006:	685b      	ldreq	r3, [r3, #4]
 8006008:	6063      	str	r3, [r4, #4]
 800600a:	bf04      	itt	eq
 800600c:	1809      	addeq	r1, r1, r0
 800600e:	6021      	streq	r1, [r4, #0]
 8006010:	6054      	str	r4, [r2, #4]
 8006012:	e7ca      	b.n	8005faa <_free_r+0x22>
 8006014:	bd38      	pop	{r3, r4, r5, pc}
 8006016:	bf00      	nop
 8006018:	240002dc 	.word	0x240002dc

0800601c <sbrk_aligned>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	4e0f      	ldr	r6, [pc, #60]	@ (800605c <sbrk_aligned+0x40>)
 8006020:	460c      	mov	r4, r1
 8006022:	6831      	ldr	r1, [r6, #0]
 8006024:	4605      	mov	r5, r0
 8006026:	b911      	cbnz	r1, 800602e <sbrk_aligned+0x12>
 8006028:	f000 fba6 	bl	8006778 <_sbrk_r>
 800602c:	6030      	str	r0, [r6, #0]
 800602e:	4621      	mov	r1, r4
 8006030:	4628      	mov	r0, r5
 8006032:	f000 fba1 	bl	8006778 <_sbrk_r>
 8006036:	1c43      	adds	r3, r0, #1
 8006038:	d103      	bne.n	8006042 <sbrk_aligned+0x26>
 800603a:	f04f 34ff 	mov.w	r4, #4294967295
 800603e:	4620      	mov	r0, r4
 8006040:	bd70      	pop	{r4, r5, r6, pc}
 8006042:	1cc4      	adds	r4, r0, #3
 8006044:	f024 0403 	bic.w	r4, r4, #3
 8006048:	42a0      	cmp	r0, r4
 800604a:	d0f8      	beq.n	800603e <sbrk_aligned+0x22>
 800604c:	1a21      	subs	r1, r4, r0
 800604e:	4628      	mov	r0, r5
 8006050:	f000 fb92 	bl	8006778 <_sbrk_r>
 8006054:	3001      	adds	r0, #1
 8006056:	d1f2      	bne.n	800603e <sbrk_aligned+0x22>
 8006058:	e7ef      	b.n	800603a <sbrk_aligned+0x1e>
 800605a:	bf00      	nop
 800605c:	240002d8 	.word	0x240002d8

08006060 <_malloc_r>:
 8006060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006064:	1ccd      	adds	r5, r1, #3
 8006066:	f025 0503 	bic.w	r5, r5, #3
 800606a:	3508      	adds	r5, #8
 800606c:	2d0c      	cmp	r5, #12
 800606e:	bf38      	it	cc
 8006070:	250c      	movcc	r5, #12
 8006072:	2d00      	cmp	r5, #0
 8006074:	4606      	mov	r6, r0
 8006076:	db01      	blt.n	800607c <_malloc_r+0x1c>
 8006078:	42a9      	cmp	r1, r5
 800607a:	d904      	bls.n	8006086 <_malloc_r+0x26>
 800607c:	230c      	movs	r3, #12
 800607e:	6033      	str	r3, [r6, #0]
 8006080:	2000      	movs	r0, #0
 8006082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006086:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800615c <_malloc_r+0xfc>
 800608a:	f000 f869 	bl	8006160 <__malloc_lock>
 800608e:	f8d8 3000 	ldr.w	r3, [r8]
 8006092:	461c      	mov	r4, r3
 8006094:	bb44      	cbnz	r4, 80060e8 <_malloc_r+0x88>
 8006096:	4629      	mov	r1, r5
 8006098:	4630      	mov	r0, r6
 800609a:	f7ff ffbf 	bl	800601c <sbrk_aligned>
 800609e:	1c43      	adds	r3, r0, #1
 80060a0:	4604      	mov	r4, r0
 80060a2:	d158      	bne.n	8006156 <_malloc_r+0xf6>
 80060a4:	f8d8 4000 	ldr.w	r4, [r8]
 80060a8:	4627      	mov	r7, r4
 80060aa:	2f00      	cmp	r7, #0
 80060ac:	d143      	bne.n	8006136 <_malloc_r+0xd6>
 80060ae:	2c00      	cmp	r4, #0
 80060b0:	d04b      	beq.n	800614a <_malloc_r+0xea>
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	4639      	mov	r1, r7
 80060b6:	4630      	mov	r0, r6
 80060b8:	eb04 0903 	add.w	r9, r4, r3
 80060bc:	f000 fb5c 	bl	8006778 <_sbrk_r>
 80060c0:	4581      	cmp	r9, r0
 80060c2:	d142      	bne.n	800614a <_malloc_r+0xea>
 80060c4:	6821      	ldr	r1, [r4, #0]
 80060c6:	1a6d      	subs	r5, r5, r1
 80060c8:	4629      	mov	r1, r5
 80060ca:	4630      	mov	r0, r6
 80060cc:	f7ff ffa6 	bl	800601c <sbrk_aligned>
 80060d0:	3001      	adds	r0, #1
 80060d2:	d03a      	beq.n	800614a <_malloc_r+0xea>
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	442b      	add	r3, r5
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	f8d8 3000 	ldr.w	r3, [r8]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	bb62      	cbnz	r2, 800613c <_malloc_r+0xdc>
 80060e2:	f8c8 7000 	str.w	r7, [r8]
 80060e6:	e00f      	b.n	8006108 <_malloc_r+0xa8>
 80060e8:	6822      	ldr	r2, [r4, #0]
 80060ea:	1b52      	subs	r2, r2, r5
 80060ec:	d420      	bmi.n	8006130 <_malloc_r+0xd0>
 80060ee:	2a0b      	cmp	r2, #11
 80060f0:	d917      	bls.n	8006122 <_malloc_r+0xc2>
 80060f2:	1961      	adds	r1, r4, r5
 80060f4:	42a3      	cmp	r3, r4
 80060f6:	6025      	str	r5, [r4, #0]
 80060f8:	bf18      	it	ne
 80060fa:	6059      	strne	r1, [r3, #4]
 80060fc:	6863      	ldr	r3, [r4, #4]
 80060fe:	bf08      	it	eq
 8006100:	f8c8 1000 	streq.w	r1, [r8]
 8006104:	5162      	str	r2, [r4, r5]
 8006106:	604b      	str	r3, [r1, #4]
 8006108:	4630      	mov	r0, r6
 800610a:	f000 f82f 	bl	800616c <__malloc_unlock>
 800610e:	f104 000b 	add.w	r0, r4, #11
 8006112:	1d23      	adds	r3, r4, #4
 8006114:	f020 0007 	bic.w	r0, r0, #7
 8006118:	1ac2      	subs	r2, r0, r3
 800611a:	bf1c      	itt	ne
 800611c:	1a1b      	subne	r3, r3, r0
 800611e:	50a3      	strne	r3, [r4, r2]
 8006120:	e7af      	b.n	8006082 <_malloc_r+0x22>
 8006122:	6862      	ldr	r2, [r4, #4]
 8006124:	42a3      	cmp	r3, r4
 8006126:	bf0c      	ite	eq
 8006128:	f8c8 2000 	streq.w	r2, [r8]
 800612c:	605a      	strne	r2, [r3, #4]
 800612e:	e7eb      	b.n	8006108 <_malloc_r+0xa8>
 8006130:	4623      	mov	r3, r4
 8006132:	6864      	ldr	r4, [r4, #4]
 8006134:	e7ae      	b.n	8006094 <_malloc_r+0x34>
 8006136:	463c      	mov	r4, r7
 8006138:	687f      	ldr	r7, [r7, #4]
 800613a:	e7b6      	b.n	80060aa <_malloc_r+0x4a>
 800613c:	461a      	mov	r2, r3
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	42a3      	cmp	r3, r4
 8006142:	d1fb      	bne.n	800613c <_malloc_r+0xdc>
 8006144:	2300      	movs	r3, #0
 8006146:	6053      	str	r3, [r2, #4]
 8006148:	e7de      	b.n	8006108 <_malloc_r+0xa8>
 800614a:	230c      	movs	r3, #12
 800614c:	6033      	str	r3, [r6, #0]
 800614e:	4630      	mov	r0, r6
 8006150:	f000 f80c 	bl	800616c <__malloc_unlock>
 8006154:	e794      	b.n	8006080 <_malloc_r+0x20>
 8006156:	6005      	str	r5, [r0, #0]
 8006158:	e7d6      	b.n	8006108 <_malloc_r+0xa8>
 800615a:	bf00      	nop
 800615c:	240002dc 	.word	0x240002dc

08006160 <__malloc_lock>:
 8006160:	4801      	ldr	r0, [pc, #4]	@ (8006168 <__malloc_lock+0x8>)
 8006162:	f7ff bf0f 	b.w	8005f84 <__retarget_lock_acquire_recursive>
 8006166:	bf00      	nop
 8006168:	240002d4 	.word	0x240002d4

0800616c <__malloc_unlock>:
 800616c:	4801      	ldr	r0, [pc, #4]	@ (8006174 <__malloc_unlock+0x8>)
 800616e:	f7ff bf0a 	b.w	8005f86 <__retarget_lock_release_recursive>
 8006172:	bf00      	nop
 8006174:	240002d4 	.word	0x240002d4

08006178 <__ssputs_r>:
 8006178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800617c:	688e      	ldr	r6, [r1, #8]
 800617e:	461f      	mov	r7, r3
 8006180:	42be      	cmp	r6, r7
 8006182:	680b      	ldr	r3, [r1, #0]
 8006184:	4682      	mov	sl, r0
 8006186:	460c      	mov	r4, r1
 8006188:	4690      	mov	r8, r2
 800618a:	d82d      	bhi.n	80061e8 <__ssputs_r+0x70>
 800618c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006190:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006194:	d026      	beq.n	80061e4 <__ssputs_r+0x6c>
 8006196:	6965      	ldr	r5, [r4, #20]
 8006198:	6909      	ldr	r1, [r1, #16]
 800619a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800619e:	eba3 0901 	sub.w	r9, r3, r1
 80061a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061a6:	1c7b      	adds	r3, r7, #1
 80061a8:	444b      	add	r3, r9
 80061aa:	106d      	asrs	r5, r5, #1
 80061ac:	429d      	cmp	r5, r3
 80061ae:	bf38      	it	cc
 80061b0:	461d      	movcc	r5, r3
 80061b2:	0553      	lsls	r3, r2, #21
 80061b4:	d527      	bpl.n	8006206 <__ssputs_r+0x8e>
 80061b6:	4629      	mov	r1, r5
 80061b8:	f7ff ff52 	bl	8006060 <_malloc_r>
 80061bc:	4606      	mov	r6, r0
 80061be:	b360      	cbz	r0, 800621a <__ssputs_r+0xa2>
 80061c0:	6921      	ldr	r1, [r4, #16]
 80061c2:	464a      	mov	r2, r9
 80061c4:	f000 fae8 	bl	8006798 <memcpy>
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80061ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061d2:	81a3      	strh	r3, [r4, #12]
 80061d4:	6126      	str	r6, [r4, #16]
 80061d6:	6165      	str	r5, [r4, #20]
 80061d8:	444e      	add	r6, r9
 80061da:	eba5 0509 	sub.w	r5, r5, r9
 80061de:	6026      	str	r6, [r4, #0]
 80061e0:	60a5      	str	r5, [r4, #8]
 80061e2:	463e      	mov	r6, r7
 80061e4:	42be      	cmp	r6, r7
 80061e6:	d900      	bls.n	80061ea <__ssputs_r+0x72>
 80061e8:	463e      	mov	r6, r7
 80061ea:	6820      	ldr	r0, [r4, #0]
 80061ec:	4632      	mov	r2, r6
 80061ee:	4641      	mov	r1, r8
 80061f0:	f000 faa8 	bl	8006744 <memmove>
 80061f4:	68a3      	ldr	r3, [r4, #8]
 80061f6:	1b9b      	subs	r3, r3, r6
 80061f8:	60a3      	str	r3, [r4, #8]
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	4433      	add	r3, r6
 80061fe:	6023      	str	r3, [r4, #0]
 8006200:	2000      	movs	r0, #0
 8006202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006206:	462a      	mov	r2, r5
 8006208:	f000 fad4 	bl	80067b4 <_realloc_r>
 800620c:	4606      	mov	r6, r0
 800620e:	2800      	cmp	r0, #0
 8006210:	d1e0      	bne.n	80061d4 <__ssputs_r+0x5c>
 8006212:	6921      	ldr	r1, [r4, #16]
 8006214:	4650      	mov	r0, sl
 8006216:	f7ff feb7 	bl	8005f88 <_free_r>
 800621a:	230c      	movs	r3, #12
 800621c:	f8ca 3000 	str.w	r3, [sl]
 8006220:	89a3      	ldrh	r3, [r4, #12]
 8006222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006226:	81a3      	strh	r3, [r4, #12]
 8006228:	f04f 30ff 	mov.w	r0, #4294967295
 800622c:	e7e9      	b.n	8006202 <__ssputs_r+0x8a>
	...

08006230 <_svfiprintf_r>:
 8006230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	4698      	mov	r8, r3
 8006236:	898b      	ldrh	r3, [r1, #12]
 8006238:	061b      	lsls	r3, r3, #24
 800623a:	b09d      	sub	sp, #116	@ 0x74
 800623c:	4607      	mov	r7, r0
 800623e:	460d      	mov	r5, r1
 8006240:	4614      	mov	r4, r2
 8006242:	d510      	bpl.n	8006266 <_svfiprintf_r+0x36>
 8006244:	690b      	ldr	r3, [r1, #16]
 8006246:	b973      	cbnz	r3, 8006266 <_svfiprintf_r+0x36>
 8006248:	2140      	movs	r1, #64	@ 0x40
 800624a:	f7ff ff09 	bl	8006060 <_malloc_r>
 800624e:	6028      	str	r0, [r5, #0]
 8006250:	6128      	str	r0, [r5, #16]
 8006252:	b930      	cbnz	r0, 8006262 <_svfiprintf_r+0x32>
 8006254:	230c      	movs	r3, #12
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	f04f 30ff 	mov.w	r0, #4294967295
 800625c:	b01d      	add	sp, #116	@ 0x74
 800625e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006262:	2340      	movs	r3, #64	@ 0x40
 8006264:	616b      	str	r3, [r5, #20]
 8006266:	2300      	movs	r3, #0
 8006268:	9309      	str	r3, [sp, #36]	@ 0x24
 800626a:	2320      	movs	r3, #32
 800626c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006270:	f8cd 800c 	str.w	r8, [sp, #12]
 8006274:	2330      	movs	r3, #48	@ 0x30
 8006276:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006414 <_svfiprintf_r+0x1e4>
 800627a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800627e:	f04f 0901 	mov.w	r9, #1
 8006282:	4623      	mov	r3, r4
 8006284:	469a      	mov	sl, r3
 8006286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800628a:	b10a      	cbz	r2, 8006290 <_svfiprintf_r+0x60>
 800628c:	2a25      	cmp	r2, #37	@ 0x25
 800628e:	d1f9      	bne.n	8006284 <_svfiprintf_r+0x54>
 8006290:	ebba 0b04 	subs.w	fp, sl, r4
 8006294:	d00b      	beq.n	80062ae <_svfiprintf_r+0x7e>
 8006296:	465b      	mov	r3, fp
 8006298:	4622      	mov	r2, r4
 800629a:	4629      	mov	r1, r5
 800629c:	4638      	mov	r0, r7
 800629e:	f7ff ff6b 	bl	8006178 <__ssputs_r>
 80062a2:	3001      	adds	r0, #1
 80062a4:	f000 80a7 	beq.w	80063f6 <_svfiprintf_r+0x1c6>
 80062a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062aa:	445a      	add	r2, fp
 80062ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80062ae:	f89a 3000 	ldrb.w	r3, [sl]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 809f 	beq.w	80063f6 <_svfiprintf_r+0x1c6>
 80062b8:	2300      	movs	r3, #0
 80062ba:	f04f 32ff 	mov.w	r2, #4294967295
 80062be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062c2:	f10a 0a01 	add.w	sl, sl, #1
 80062c6:	9304      	str	r3, [sp, #16]
 80062c8:	9307      	str	r3, [sp, #28]
 80062ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80062d0:	4654      	mov	r4, sl
 80062d2:	2205      	movs	r2, #5
 80062d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d8:	484e      	ldr	r0, [pc, #312]	@ (8006414 <_svfiprintf_r+0x1e4>)
 80062da:	f7fa f819 	bl	8000310 <memchr>
 80062de:	9a04      	ldr	r2, [sp, #16]
 80062e0:	b9d8      	cbnz	r0, 800631a <_svfiprintf_r+0xea>
 80062e2:	06d0      	lsls	r0, r2, #27
 80062e4:	bf44      	itt	mi
 80062e6:	2320      	movmi	r3, #32
 80062e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062ec:	0711      	lsls	r1, r2, #28
 80062ee:	bf44      	itt	mi
 80062f0:	232b      	movmi	r3, #43	@ 0x2b
 80062f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062f6:	f89a 3000 	ldrb.w	r3, [sl]
 80062fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80062fc:	d015      	beq.n	800632a <_svfiprintf_r+0xfa>
 80062fe:	9a07      	ldr	r2, [sp, #28]
 8006300:	4654      	mov	r4, sl
 8006302:	2000      	movs	r0, #0
 8006304:	f04f 0c0a 	mov.w	ip, #10
 8006308:	4621      	mov	r1, r4
 800630a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800630e:	3b30      	subs	r3, #48	@ 0x30
 8006310:	2b09      	cmp	r3, #9
 8006312:	d94b      	bls.n	80063ac <_svfiprintf_r+0x17c>
 8006314:	b1b0      	cbz	r0, 8006344 <_svfiprintf_r+0x114>
 8006316:	9207      	str	r2, [sp, #28]
 8006318:	e014      	b.n	8006344 <_svfiprintf_r+0x114>
 800631a:	eba0 0308 	sub.w	r3, r0, r8
 800631e:	fa09 f303 	lsl.w	r3, r9, r3
 8006322:	4313      	orrs	r3, r2
 8006324:	9304      	str	r3, [sp, #16]
 8006326:	46a2      	mov	sl, r4
 8006328:	e7d2      	b.n	80062d0 <_svfiprintf_r+0xa0>
 800632a:	9b03      	ldr	r3, [sp, #12]
 800632c:	1d19      	adds	r1, r3, #4
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	9103      	str	r1, [sp, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	bfbb      	ittet	lt
 8006336:	425b      	neglt	r3, r3
 8006338:	f042 0202 	orrlt.w	r2, r2, #2
 800633c:	9307      	strge	r3, [sp, #28]
 800633e:	9307      	strlt	r3, [sp, #28]
 8006340:	bfb8      	it	lt
 8006342:	9204      	strlt	r2, [sp, #16]
 8006344:	7823      	ldrb	r3, [r4, #0]
 8006346:	2b2e      	cmp	r3, #46	@ 0x2e
 8006348:	d10a      	bne.n	8006360 <_svfiprintf_r+0x130>
 800634a:	7863      	ldrb	r3, [r4, #1]
 800634c:	2b2a      	cmp	r3, #42	@ 0x2a
 800634e:	d132      	bne.n	80063b6 <_svfiprintf_r+0x186>
 8006350:	9b03      	ldr	r3, [sp, #12]
 8006352:	1d1a      	adds	r2, r3, #4
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	9203      	str	r2, [sp, #12]
 8006358:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800635c:	3402      	adds	r4, #2
 800635e:	9305      	str	r3, [sp, #20]
 8006360:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006424 <_svfiprintf_r+0x1f4>
 8006364:	7821      	ldrb	r1, [r4, #0]
 8006366:	2203      	movs	r2, #3
 8006368:	4650      	mov	r0, sl
 800636a:	f7f9 ffd1 	bl	8000310 <memchr>
 800636e:	b138      	cbz	r0, 8006380 <_svfiprintf_r+0x150>
 8006370:	9b04      	ldr	r3, [sp, #16]
 8006372:	eba0 000a 	sub.w	r0, r0, sl
 8006376:	2240      	movs	r2, #64	@ 0x40
 8006378:	4082      	lsls	r2, r0
 800637a:	4313      	orrs	r3, r2
 800637c:	3401      	adds	r4, #1
 800637e:	9304      	str	r3, [sp, #16]
 8006380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006384:	4824      	ldr	r0, [pc, #144]	@ (8006418 <_svfiprintf_r+0x1e8>)
 8006386:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800638a:	2206      	movs	r2, #6
 800638c:	f7f9 ffc0 	bl	8000310 <memchr>
 8006390:	2800      	cmp	r0, #0
 8006392:	d036      	beq.n	8006402 <_svfiprintf_r+0x1d2>
 8006394:	4b21      	ldr	r3, [pc, #132]	@ (800641c <_svfiprintf_r+0x1ec>)
 8006396:	bb1b      	cbnz	r3, 80063e0 <_svfiprintf_r+0x1b0>
 8006398:	9b03      	ldr	r3, [sp, #12]
 800639a:	3307      	adds	r3, #7
 800639c:	f023 0307 	bic.w	r3, r3, #7
 80063a0:	3308      	adds	r3, #8
 80063a2:	9303      	str	r3, [sp, #12]
 80063a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063a6:	4433      	add	r3, r6
 80063a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80063aa:	e76a      	b.n	8006282 <_svfiprintf_r+0x52>
 80063ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80063b0:	460c      	mov	r4, r1
 80063b2:	2001      	movs	r0, #1
 80063b4:	e7a8      	b.n	8006308 <_svfiprintf_r+0xd8>
 80063b6:	2300      	movs	r3, #0
 80063b8:	3401      	adds	r4, #1
 80063ba:	9305      	str	r3, [sp, #20]
 80063bc:	4619      	mov	r1, r3
 80063be:	f04f 0c0a 	mov.w	ip, #10
 80063c2:	4620      	mov	r0, r4
 80063c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063c8:	3a30      	subs	r2, #48	@ 0x30
 80063ca:	2a09      	cmp	r2, #9
 80063cc:	d903      	bls.n	80063d6 <_svfiprintf_r+0x1a6>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0c6      	beq.n	8006360 <_svfiprintf_r+0x130>
 80063d2:	9105      	str	r1, [sp, #20]
 80063d4:	e7c4      	b.n	8006360 <_svfiprintf_r+0x130>
 80063d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80063da:	4604      	mov	r4, r0
 80063dc:	2301      	movs	r3, #1
 80063de:	e7f0      	b.n	80063c2 <_svfiprintf_r+0x192>
 80063e0:	ab03      	add	r3, sp, #12
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	462a      	mov	r2, r5
 80063e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006420 <_svfiprintf_r+0x1f0>)
 80063e8:	a904      	add	r1, sp, #16
 80063ea:	4638      	mov	r0, r7
 80063ec:	f3af 8000 	nop.w
 80063f0:	1c42      	adds	r2, r0, #1
 80063f2:	4606      	mov	r6, r0
 80063f4:	d1d6      	bne.n	80063a4 <_svfiprintf_r+0x174>
 80063f6:	89ab      	ldrh	r3, [r5, #12]
 80063f8:	065b      	lsls	r3, r3, #25
 80063fa:	f53f af2d 	bmi.w	8006258 <_svfiprintf_r+0x28>
 80063fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006400:	e72c      	b.n	800625c <_svfiprintf_r+0x2c>
 8006402:	ab03      	add	r3, sp, #12
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	462a      	mov	r2, r5
 8006408:	4b05      	ldr	r3, [pc, #20]	@ (8006420 <_svfiprintf_r+0x1f0>)
 800640a:	a904      	add	r1, sp, #16
 800640c:	4638      	mov	r0, r7
 800640e:	f000 f879 	bl	8006504 <_printf_i>
 8006412:	e7ed      	b.n	80063f0 <_svfiprintf_r+0x1c0>
 8006414:	08006874 	.word	0x08006874
 8006418:	0800687e 	.word	0x0800687e
 800641c:	00000000 	.word	0x00000000
 8006420:	08006179 	.word	0x08006179
 8006424:	0800687a 	.word	0x0800687a

08006428 <_printf_common>:
 8006428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800642c:	4616      	mov	r6, r2
 800642e:	4698      	mov	r8, r3
 8006430:	688a      	ldr	r2, [r1, #8]
 8006432:	690b      	ldr	r3, [r1, #16]
 8006434:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006438:	4293      	cmp	r3, r2
 800643a:	bfb8      	it	lt
 800643c:	4613      	movlt	r3, r2
 800643e:	6033      	str	r3, [r6, #0]
 8006440:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006444:	4607      	mov	r7, r0
 8006446:	460c      	mov	r4, r1
 8006448:	b10a      	cbz	r2, 800644e <_printf_common+0x26>
 800644a:	3301      	adds	r3, #1
 800644c:	6033      	str	r3, [r6, #0]
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	0699      	lsls	r1, r3, #26
 8006452:	bf42      	ittt	mi
 8006454:	6833      	ldrmi	r3, [r6, #0]
 8006456:	3302      	addmi	r3, #2
 8006458:	6033      	strmi	r3, [r6, #0]
 800645a:	6825      	ldr	r5, [r4, #0]
 800645c:	f015 0506 	ands.w	r5, r5, #6
 8006460:	d106      	bne.n	8006470 <_printf_common+0x48>
 8006462:	f104 0a19 	add.w	sl, r4, #25
 8006466:	68e3      	ldr	r3, [r4, #12]
 8006468:	6832      	ldr	r2, [r6, #0]
 800646a:	1a9b      	subs	r3, r3, r2
 800646c:	42ab      	cmp	r3, r5
 800646e:	dc26      	bgt.n	80064be <_printf_common+0x96>
 8006470:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006474:	6822      	ldr	r2, [r4, #0]
 8006476:	3b00      	subs	r3, #0
 8006478:	bf18      	it	ne
 800647a:	2301      	movne	r3, #1
 800647c:	0692      	lsls	r2, r2, #26
 800647e:	d42b      	bmi.n	80064d8 <_printf_common+0xb0>
 8006480:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006484:	4641      	mov	r1, r8
 8006486:	4638      	mov	r0, r7
 8006488:	47c8      	blx	r9
 800648a:	3001      	adds	r0, #1
 800648c:	d01e      	beq.n	80064cc <_printf_common+0xa4>
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	6922      	ldr	r2, [r4, #16]
 8006492:	f003 0306 	and.w	r3, r3, #6
 8006496:	2b04      	cmp	r3, #4
 8006498:	bf02      	ittt	eq
 800649a:	68e5      	ldreq	r5, [r4, #12]
 800649c:	6833      	ldreq	r3, [r6, #0]
 800649e:	1aed      	subeq	r5, r5, r3
 80064a0:	68a3      	ldr	r3, [r4, #8]
 80064a2:	bf0c      	ite	eq
 80064a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064a8:	2500      	movne	r5, #0
 80064aa:	4293      	cmp	r3, r2
 80064ac:	bfc4      	itt	gt
 80064ae:	1a9b      	subgt	r3, r3, r2
 80064b0:	18ed      	addgt	r5, r5, r3
 80064b2:	2600      	movs	r6, #0
 80064b4:	341a      	adds	r4, #26
 80064b6:	42b5      	cmp	r5, r6
 80064b8:	d11a      	bne.n	80064f0 <_printf_common+0xc8>
 80064ba:	2000      	movs	r0, #0
 80064bc:	e008      	b.n	80064d0 <_printf_common+0xa8>
 80064be:	2301      	movs	r3, #1
 80064c0:	4652      	mov	r2, sl
 80064c2:	4641      	mov	r1, r8
 80064c4:	4638      	mov	r0, r7
 80064c6:	47c8      	blx	r9
 80064c8:	3001      	adds	r0, #1
 80064ca:	d103      	bne.n	80064d4 <_printf_common+0xac>
 80064cc:	f04f 30ff 	mov.w	r0, #4294967295
 80064d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d4:	3501      	adds	r5, #1
 80064d6:	e7c6      	b.n	8006466 <_printf_common+0x3e>
 80064d8:	18e1      	adds	r1, r4, r3
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	2030      	movs	r0, #48	@ 0x30
 80064de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064e2:	4422      	add	r2, r4
 80064e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064ec:	3302      	adds	r3, #2
 80064ee:	e7c7      	b.n	8006480 <_printf_common+0x58>
 80064f0:	2301      	movs	r3, #1
 80064f2:	4622      	mov	r2, r4
 80064f4:	4641      	mov	r1, r8
 80064f6:	4638      	mov	r0, r7
 80064f8:	47c8      	blx	r9
 80064fa:	3001      	adds	r0, #1
 80064fc:	d0e6      	beq.n	80064cc <_printf_common+0xa4>
 80064fe:	3601      	adds	r6, #1
 8006500:	e7d9      	b.n	80064b6 <_printf_common+0x8e>
	...

08006504 <_printf_i>:
 8006504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006508:	7e0f      	ldrb	r7, [r1, #24]
 800650a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800650c:	2f78      	cmp	r7, #120	@ 0x78
 800650e:	4691      	mov	r9, r2
 8006510:	4680      	mov	r8, r0
 8006512:	460c      	mov	r4, r1
 8006514:	469a      	mov	sl, r3
 8006516:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800651a:	d807      	bhi.n	800652c <_printf_i+0x28>
 800651c:	2f62      	cmp	r7, #98	@ 0x62
 800651e:	d80a      	bhi.n	8006536 <_printf_i+0x32>
 8006520:	2f00      	cmp	r7, #0
 8006522:	f000 80d2 	beq.w	80066ca <_printf_i+0x1c6>
 8006526:	2f58      	cmp	r7, #88	@ 0x58
 8006528:	f000 80b9 	beq.w	800669e <_printf_i+0x19a>
 800652c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006530:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006534:	e03a      	b.n	80065ac <_printf_i+0xa8>
 8006536:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800653a:	2b15      	cmp	r3, #21
 800653c:	d8f6      	bhi.n	800652c <_printf_i+0x28>
 800653e:	a101      	add	r1, pc, #4	@ (adr r1, 8006544 <_printf_i+0x40>)
 8006540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006544:	0800659d 	.word	0x0800659d
 8006548:	080065b1 	.word	0x080065b1
 800654c:	0800652d 	.word	0x0800652d
 8006550:	0800652d 	.word	0x0800652d
 8006554:	0800652d 	.word	0x0800652d
 8006558:	0800652d 	.word	0x0800652d
 800655c:	080065b1 	.word	0x080065b1
 8006560:	0800652d 	.word	0x0800652d
 8006564:	0800652d 	.word	0x0800652d
 8006568:	0800652d 	.word	0x0800652d
 800656c:	0800652d 	.word	0x0800652d
 8006570:	080066b1 	.word	0x080066b1
 8006574:	080065db 	.word	0x080065db
 8006578:	0800666b 	.word	0x0800666b
 800657c:	0800652d 	.word	0x0800652d
 8006580:	0800652d 	.word	0x0800652d
 8006584:	080066d3 	.word	0x080066d3
 8006588:	0800652d 	.word	0x0800652d
 800658c:	080065db 	.word	0x080065db
 8006590:	0800652d 	.word	0x0800652d
 8006594:	0800652d 	.word	0x0800652d
 8006598:	08006673 	.word	0x08006673
 800659c:	6833      	ldr	r3, [r6, #0]
 800659e:	1d1a      	adds	r2, r3, #4
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6032      	str	r2, [r6, #0]
 80065a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065ac:	2301      	movs	r3, #1
 80065ae:	e09d      	b.n	80066ec <_printf_i+0x1e8>
 80065b0:	6833      	ldr	r3, [r6, #0]
 80065b2:	6820      	ldr	r0, [r4, #0]
 80065b4:	1d19      	adds	r1, r3, #4
 80065b6:	6031      	str	r1, [r6, #0]
 80065b8:	0606      	lsls	r6, r0, #24
 80065ba:	d501      	bpl.n	80065c0 <_printf_i+0xbc>
 80065bc:	681d      	ldr	r5, [r3, #0]
 80065be:	e003      	b.n	80065c8 <_printf_i+0xc4>
 80065c0:	0645      	lsls	r5, r0, #25
 80065c2:	d5fb      	bpl.n	80065bc <_printf_i+0xb8>
 80065c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80065c8:	2d00      	cmp	r5, #0
 80065ca:	da03      	bge.n	80065d4 <_printf_i+0xd0>
 80065cc:	232d      	movs	r3, #45	@ 0x2d
 80065ce:	426d      	negs	r5, r5
 80065d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065d4:	4859      	ldr	r0, [pc, #356]	@ (800673c <_printf_i+0x238>)
 80065d6:	230a      	movs	r3, #10
 80065d8:	e011      	b.n	80065fe <_printf_i+0xfa>
 80065da:	6821      	ldr	r1, [r4, #0]
 80065dc:	6833      	ldr	r3, [r6, #0]
 80065de:	0608      	lsls	r0, r1, #24
 80065e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80065e4:	d402      	bmi.n	80065ec <_printf_i+0xe8>
 80065e6:	0649      	lsls	r1, r1, #25
 80065e8:	bf48      	it	mi
 80065ea:	b2ad      	uxthmi	r5, r5
 80065ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80065ee:	4853      	ldr	r0, [pc, #332]	@ (800673c <_printf_i+0x238>)
 80065f0:	6033      	str	r3, [r6, #0]
 80065f2:	bf14      	ite	ne
 80065f4:	230a      	movne	r3, #10
 80065f6:	2308      	moveq	r3, #8
 80065f8:	2100      	movs	r1, #0
 80065fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065fe:	6866      	ldr	r6, [r4, #4]
 8006600:	60a6      	str	r6, [r4, #8]
 8006602:	2e00      	cmp	r6, #0
 8006604:	bfa2      	ittt	ge
 8006606:	6821      	ldrge	r1, [r4, #0]
 8006608:	f021 0104 	bicge.w	r1, r1, #4
 800660c:	6021      	strge	r1, [r4, #0]
 800660e:	b90d      	cbnz	r5, 8006614 <_printf_i+0x110>
 8006610:	2e00      	cmp	r6, #0
 8006612:	d04b      	beq.n	80066ac <_printf_i+0x1a8>
 8006614:	4616      	mov	r6, r2
 8006616:	fbb5 f1f3 	udiv	r1, r5, r3
 800661a:	fb03 5711 	mls	r7, r3, r1, r5
 800661e:	5dc7      	ldrb	r7, [r0, r7]
 8006620:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006624:	462f      	mov	r7, r5
 8006626:	42bb      	cmp	r3, r7
 8006628:	460d      	mov	r5, r1
 800662a:	d9f4      	bls.n	8006616 <_printf_i+0x112>
 800662c:	2b08      	cmp	r3, #8
 800662e:	d10b      	bne.n	8006648 <_printf_i+0x144>
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	07df      	lsls	r7, r3, #31
 8006634:	d508      	bpl.n	8006648 <_printf_i+0x144>
 8006636:	6923      	ldr	r3, [r4, #16]
 8006638:	6861      	ldr	r1, [r4, #4]
 800663a:	4299      	cmp	r1, r3
 800663c:	bfde      	ittt	le
 800663e:	2330      	movle	r3, #48	@ 0x30
 8006640:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006644:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006648:	1b92      	subs	r2, r2, r6
 800664a:	6122      	str	r2, [r4, #16]
 800664c:	f8cd a000 	str.w	sl, [sp]
 8006650:	464b      	mov	r3, r9
 8006652:	aa03      	add	r2, sp, #12
 8006654:	4621      	mov	r1, r4
 8006656:	4640      	mov	r0, r8
 8006658:	f7ff fee6 	bl	8006428 <_printf_common>
 800665c:	3001      	adds	r0, #1
 800665e:	d14a      	bne.n	80066f6 <_printf_i+0x1f2>
 8006660:	f04f 30ff 	mov.w	r0, #4294967295
 8006664:	b004      	add	sp, #16
 8006666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	f043 0320 	orr.w	r3, r3, #32
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	4833      	ldr	r0, [pc, #204]	@ (8006740 <_printf_i+0x23c>)
 8006674:	2778      	movs	r7, #120	@ 0x78
 8006676:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	6831      	ldr	r1, [r6, #0]
 800667e:	061f      	lsls	r7, r3, #24
 8006680:	f851 5b04 	ldr.w	r5, [r1], #4
 8006684:	d402      	bmi.n	800668c <_printf_i+0x188>
 8006686:	065f      	lsls	r7, r3, #25
 8006688:	bf48      	it	mi
 800668a:	b2ad      	uxthmi	r5, r5
 800668c:	6031      	str	r1, [r6, #0]
 800668e:	07d9      	lsls	r1, r3, #31
 8006690:	bf44      	itt	mi
 8006692:	f043 0320 	orrmi.w	r3, r3, #32
 8006696:	6023      	strmi	r3, [r4, #0]
 8006698:	b11d      	cbz	r5, 80066a2 <_printf_i+0x19e>
 800669a:	2310      	movs	r3, #16
 800669c:	e7ac      	b.n	80065f8 <_printf_i+0xf4>
 800669e:	4827      	ldr	r0, [pc, #156]	@ (800673c <_printf_i+0x238>)
 80066a0:	e7e9      	b.n	8006676 <_printf_i+0x172>
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	f023 0320 	bic.w	r3, r3, #32
 80066a8:	6023      	str	r3, [r4, #0]
 80066aa:	e7f6      	b.n	800669a <_printf_i+0x196>
 80066ac:	4616      	mov	r6, r2
 80066ae:	e7bd      	b.n	800662c <_printf_i+0x128>
 80066b0:	6833      	ldr	r3, [r6, #0]
 80066b2:	6825      	ldr	r5, [r4, #0]
 80066b4:	6961      	ldr	r1, [r4, #20]
 80066b6:	1d18      	adds	r0, r3, #4
 80066b8:	6030      	str	r0, [r6, #0]
 80066ba:	062e      	lsls	r6, r5, #24
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	d501      	bpl.n	80066c4 <_printf_i+0x1c0>
 80066c0:	6019      	str	r1, [r3, #0]
 80066c2:	e002      	b.n	80066ca <_printf_i+0x1c6>
 80066c4:	0668      	lsls	r0, r5, #25
 80066c6:	d5fb      	bpl.n	80066c0 <_printf_i+0x1bc>
 80066c8:	8019      	strh	r1, [r3, #0]
 80066ca:	2300      	movs	r3, #0
 80066cc:	6123      	str	r3, [r4, #16]
 80066ce:	4616      	mov	r6, r2
 80066d0:	e7bc      	b.n	800664c <_printf_i+0x148>
 80066d2:	6833      	ldr	r3, [r6, #0]
 80066d4:	1d1a      	adds	r2, r3, #4
 80066d6:	6032      	str	r2, [r6, #0]
 80066d8:	681e      	ldr	r6, [r3, #0]
 80066da:	6862      	ldr	r2, [r4, #4]
 80066dc:	2100      	movs	r1, #0
 80066de:	4630      	mov	r0, r6
 80066e0:	f7f9 fe16 	bl	8000310 <memchr>
 80066e4:	b108      	cbz	r0, 80066ea <_printf_i+0x1e6>
 80066e6:	1b80      	subs	r0, r0, r6
 80066e8:	6060      	str	r0, [r4, #4]
 80066ea:	6863      	ldr	r3, [r4, #4]
 80066ec:	6123      	str	r3, [r4, #16]
 80066ee:	2300      	movs	r3, #0
 80066f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066f4:	e7aa      	b.n	800664c <_printf_i+0x148>
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	4632      	mov	r2, r6
 80066fa:	4649      	mov	r1, r9
 80066fc:	4640      	mov	r0, r8
 80066fe:	47d0      	blx	sl
 8006700:	3001      	adds	r0, #1
 8006702:	d0ad      	beq.n	8006660 <_printf_i+0x15c>
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	079b      	lsls	r3, r3, #30
 8006708:	d413      	bmi.n	8006732 <_printf_i+0x22e>
 800670a:	68e0      	ldr	r0, [r4, #12]
 800670c:	9b03      	ldr	r3, [sp, #12]
 800670e:	4298      	cmp	r0, r3
 8006710:	bfb8      	it	lt
 8006712:	4618      	movlt	r0, r3
 8006714:	e7a6      	b.n	8006664 <_printf_i+0x160>
 8006716:	2301      	movs	r3, #1
 8006718:	4632      	mov	r2, r6
 800671a:	4649      	mov	r1, r9
 800671c:	4640      	mov	r0, r8
 800671e:	47d0      	blx	sl
 8006720:	3001      	adds	r0, #1
 8006722:	d09d      	beq.n	8006660 <_printf_i+0x15c>
 8006724:	3501      	adds	r5, #1
 8006726:	68e3      	ldr	r3, [r4, #12]
 8006728:	9903      	ldr	r1, [sp, #12]
 800672a:	1a5b      	subs	r3, r3, r1
 800672c:	42ab      	cmp	r3, r5
 800672e:	dcf2      	bgt.n	8006716 <_printf_i+0x212>
 8006730:	e7eb      	b.n	800670a <_printf_i+0x206>
 8006732:	2500      	movs	r5, #0
 8006734:	f104 0619 	add.w	r6, r4, #25
 8006738:	e7f5      	b.n	8006726 <_printf_i+0x222>
 800673a:	bf00      	nop
 800673c:	08006885 	.word	0x08006885
 8006740:	08006896 	.word	0x08006896

08006744 <memmove>:
 8006744:	4288      	cmp	r0, r1
 8006746:	b510      	push	{r4, lr}
 8006748:	eb01 0402 	add.w	r4, r1, r2
 800674c:	d902      	bls.n	8006754 <memmove+0x10>
 800674e:	4284      	cmp	r4, r0
 8006750:	4623      	mov	r3, r4
 8006752:	d807      	bhi.n	8006764 <memmove+0x20>
 8006754:	1e43      	subs	r3, r0, #1
 8006756:	42a1      	cmp	r1, r4
 8006758:	d008      	beq.n	800676c <memmove+0x28>
 800675a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800675e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006762:	e7f8      	b.n	8006756 <memmove+0x12>
 8006764:	4402      	add	r2, r0
 8006766:	4601      	mov	r1, r0
 8006768:	428a      	cmp	r2, r1
 800676a:	d100      	bne.n	800676e <memmove+0x2a>
 800676c:	bd10      	pop	{r4, pc}
 800676e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006776:	e7f7      	b.n	8006768 <memmove+0x24>

08006778 <_sbrk_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	4d06      	ldr	r5, [pc, #24]	@ (8006794 <_sbrk_r+0x1c>)
 800677c:	2300      	movs	r3, #0
 800677e:	4604      	mov	r4, r0
 8006780:	4608      	mov	r0, r1
 8006782:	602b      	str	r3, [r5, #0]
 8006784:	f7fa fb32 	bl	8000dec <_sbrk>
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	d102      	bne.n	8006792 <_sbrk_r+0x1a>
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	b103      	cbz	r3, 8006792 <_sbrk_r+0x1a>
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	240002d0 	.word	0x240002d0

08006798 <memcpy>:
 8006798:	440a      	add	r2, r1
 800679a:	4291      	cmp	r1, r2
 800679c:	f100 33ff 	add.w	r3, r0, #4294967295
 80067a0:	d100      	bne.n	80067a4 <memcpy+0xc>
 80067a2:	4770      	bx	lr
 80067a4:	b510      	push	{r4, lr}
 80067a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067ae:	4291      	cmp	r1, r2
 80067b0:	d1f9      	bne.n	80067a6 <memcpy+0xe>
 80067b2:	bd10      	pop	{r4, pc}

080067b4 <_realloc_r>:
 80067b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b8:	4680      	mov	r8, r0
 80067ba:	4615      	mov	r5, r2
 80067bc:	460c      	mov	r4, r1
 80067be:	b921      	cbnz	r1, 80067ca <_realloc_r+0x16>
 80067c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067c4:	4611      	mov	r1, r2
 80067c6:	f7ff bc4b 	b.w	8006060 <_malloc_r>
 80067ca:	b92a      	cbnz	r2, 80067d8 <_realloc_r+0x24>
 80067cc:	f7ff fbdc 	bl	8005f88 <_free_r>
 80067d0:	2400      	movs	r4, #0
 80067d2:	4620      	mov	r0, r4
 80067d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067d8:	f000 f81a 	bl	8006810 <_malloc_usable_size_r>
 80067dc:	4285      	cmp	r5, r0
 80067de:	4606      	mov	r6, r0
 80067e0:	d802      	bhi.n	80067e8 <_realloc_r+0x34>
 80067e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80067e6:	d8f4      	bhi.n	80067d2 <_realloc_r+0x1e>
 80067e8:	4629      	mov	r1, r5
 80067ea:	4640      	mov	r0, r8
 80067ec:	f7ff fc38 	bl	8006060 <_malloc_r>
 80067f0:	4607      	mov	r7, r0
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d0ec      	beq.n	80067d0 <_realloc_r+0x1c>
 80067f6:	42b5      	cmp	r5, r6
 80067f8:	462a      	mov	r2, r5
 80067fa:	4621      	mov	r1, r4
 80067fc:	bf28      	it	cs
 80067fe:	4632      	movcs	r2, r6
 8006800:	f7ff ffca 	bl	8006798 <memcpy>
 8006804:	4621      	mov	r1, r4
 8006806:	4640      	mov	r0, r8
 8006808:	f7ff fbbe 	bl	8005f88 <_free_r>
 800680c:	463c      	mov	r4, r7
 800680e:	e7e0      	b.n	80067d2 <_realloc_r+0x1e>

08006810 <_malloc_usable_size_r>:
 8006810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006814:	1f18      	subs	r0, r3, #4
 8006816:	2b00      	cmp	r3, #0
 8006818:	bfbc      	itt	lt
 800681a:	580b      	ldrlt	r3, [r1, r0]
 800681c:	18c0      	addlt	r0, r0, r3
 800681e:	4770      	bx	lr

08006820 <_init>:
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006822:	bf00      	nop
 8006824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006826:	bc08      	pop	{r3}
 8006828:	469e      	mov	lr, r3
 800682a:	4770      	bx	lr

0800682c <_fini>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	bf00      	nop
 8006830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006832:	bc08      	pop	{r3}
 8006834:	469e      	mov	lr, r3
 8006836:	4770      	bx	lr
